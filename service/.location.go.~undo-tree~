(undo-tree-save-format-version . 1)
"ca7d4bca25e50a6a71aa78f2fa5b5c40a20f7076"
[nil nil nil nil (25843 12143 628078 190000) 0 nil]
([nil nil ((1 . 13) (t 25843 12116 507059 524000)) nil (25843 12143 628077 448000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -9) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("o" 0 1 (fontified t)) . -10) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("a" 0 1 (fontified t)) . -11) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("c" 0 1 (fontified t)) . -12) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 13) nil (25843 12143 628076 296000) 0 nil])
([nil nil ((9 . 15)) nil (25843 12143 628072 680000) 0 nil])
([nil nil ((15 . 16)) nil (25843 12143 628072 149000) 0 nil])
([nil nil ((9 . 16) (#("service" 0 7 (fontified nil)) . 9) (9 . 16) (#("service" 0 7 (fontified t)) . -9) (undo-tree-id23 . -7) (undo-tree-id24 . -7) 16) nil (25843 12143 628071 207000) 0 nil])
([nil nil ((16 . 18)) nil (25843 12143 628069 404000) 0 nil])
([nil nil ((18 . 25)) nil (25843 12143 628069 13000) 0 nil])
([nil nil ((25 . 26) (#(" " 0 1 (fontified nil)) . 24) (undo-tree-id22 . -1) (25 . 26)) nil (25843 12143 628068 282000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -24) (undo-tree-id20 . -1) (#("
" 0 1 (fontified t)) . -25) (undo-tree-id21 . -1) 26) nil (25843 12143 628066 789000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -26) (26 . 27) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -26) (26 . 27) (24 . 27)) nil (25843 12143 628065 86000) 0 nil])
([nil nil ((27 . 28) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 27) (27 . 28) (26 . 28)) nil (25843 12143 628063 864000) 0 nil])
([nil nil ((28 . 32)) nil (25843 12143 628062 692000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -31) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 32) nil (25843 12143 628061 780000) 0 nil])
([nil nil ((31 . 33)) nil (25843 12143 628057 863000) 0 nil])
([nil nil ((28 . 30) (#("\"" 0 1 (fontified nil)) . -28) (28 . 29)) nil (25843 12143 628057 132000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -29) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 30) nil (25843 12143 628056 90000) 0 nil])
([nil nil ((32 . 33) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25843 12143 627876 946000) 0 nil])
([nil nil ((36 . 42) (35 . 37) (#("\"" 0 1 (fontified nil)) . -35) (35 . 36)) nil (25843 12143 627875 804000) 0 nil])
([nil nil ((45 . 46)) nil (25843 12143 627871 637000) 0 nil])
([nil nil ((45 . 47) (t 25843 12143 728247 822000)) nil (25843 12283 697204 870000) 0 nil])
([nil nil ((47 . 50)) nil (25843 12283 697204 510000) 0 nil])
([nil nil ((50 . 52)) nil (25843 12283 697204 209000) 0 nil])
([nil nil ((43 . 45)) nil (25843 12283 697203 859000) 0 nil])
([nil nil ((46 . 54) (45 . 47) (#("\"" 0 1 (fontified nil)) . -45) (45 . 46)) nil (25843 12283 697203 518000) 0 nil])
([nil nil ((64 . 68)) nil (25843 12283 697203 157000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -67) (undo-tree-id794 . -1) 68) nil (25843 12283 697202 767000) 0 nil])
([nil nil ((67 . 76)) nil (25843 12283 697202 266000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -69) (undo-tree-id787 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -70) (undo-tree-id788 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -71) (undo-tree-id789 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -72) (undo-tree-id790 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -73) (undo-tree-id791 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -74) (undo-tree-id792 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -75) (undo-tree-id793 . -1) 76) nil (25843 12283 697201 23000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -81) (81 . 82) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -81) (81 . 82) (79 . 82) (#(")" 0 1 (fontified nil)) . -78) (78 . 79) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -78) (78 . 79) (69 . 79)) nil (25843 12283 697198 88000) 0 nil])
([nil nil ((82 . 83) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 82) (82 . 83) (81 . 83)) nil (25843 12283 697196 605000) 0 nil])
([nil nil ((nil rear-nonsticky nil 411 . 412) (nil fontified nil 83 . 412) (83 . 412) 82) nil (25843 12283 697196 144000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -83) (undo-tree-id786 . -1) 84) nil (25843 12283 697195 603000) 0 nil])
([nil nil ((43 . 45)) nil (25843 12283 697194 912000) 0 nil])
([nil nil ((46 . 49) (45 . 47) (#("\"" 0 1 (fontified nil)) . -45) (45 . 46)) nil (25843 12283 697194 341000) 0 nil])
([nil nil ((50 . 52)) nil (25843 12283 697193 950000) 0 nil])
([nil nil ((53 . 55) (52 . 54) (#("\"" 0 1 (fontified nil)) . -52) (52 . 53)) nil (25843 12283 697193 489000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -129) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -130) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -131) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -132) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -133) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -134) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -135) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -136) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -137) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -138) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -139) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -140) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -141) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -142) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -143) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -144) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -145) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -146) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -147) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:string)) . -148) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -149) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) 150) nil (25843 12283 697187 228000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -118) (undo-tree-id33 . -1) (undo-tree-id34 . 1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -119) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -120) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -121) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(":" 0 1 (fontified t face tree-sitter-hl-face:string)) . -122) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -123) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -124) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -125) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -126) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -127) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -128) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 129) nil (25843 12283 697053 220000) 0 nil])
([nil nil ((nil rear-nonsticky nil 156 . 157) (nil fontified nil 118 . 157) (118 . 157) 117) nil (25843 12283 696705 848000) 0 nil])
([nil nil ((#("	\"errors\"
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:string) 9 10 (fontified t)) . 34) (undo-tree-id795 . -9) (undo-tree-id796 . -9) (undo-tree-id797 . -8) (undo-tree-id798 . -1) (undo-tree-id799 . -9) (undo-tree-id800 . 8) (undo-tree-id801 . -8) (undo-tree-id802 . -8) (undo-tree-id803 . -8) (undo-tree-id804 . -8) (undo-tree-id805 . -8) (undo-tree-id806 . -10) 42 (t 25843 12283 704430 660000)) nil (25843 12291 852683 399000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -67) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) 68 (t 25843 12291 859181 485000)) nil (25843 12350 323767 458000) 0 nil])
([nil nil ((67 . 68)) nil (25843 12350 323754 254000) 0 nil])
([nil nil ((60 . 62) (t 25843 12350 422662 506000)) nil (25843 13949 414650 77000) 0 nil])
([nil nil ((62 . 63)) nil (25843 13949 414648 525000) 0 nil])
([nil nil ((nil rear-nonsticky nil 285 . 286) (nil fontified nil 63 . 286) (63 . 286) 62) nil (25843 13949 414647 873000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -62) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 63) nil (25843 13949 414646 651000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -66) (undo-tree-id8 . -1) (#("A" 0 1 (face tree-sitter-hl-face:type fontified t)) . -67) (undo-tree-id9 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -68) (undo-tree-id10 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -69) (undo-tree-id11 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -70) (undo-tree-id12 . -1) (#("G" 0 1 (face tree-sitter-hl-face:type fontified t)) . -71) (undo-tree-id13 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -72) (undo-tree-id14 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -73) (undo-tree-id15 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -74) (undo-tree-id16 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -75) (undo-tree-id17 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -76) (undo-tree-id18 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -77) (undo-tree-id19 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -78) (undo-tree-id20 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -79) (undo-tree-id21 . -1) 80) nil (25843 13949 414643 475000) 0 nil])
([nil nil ((66 . 70)) nil (25843 13949 414595 155000) 0 nil])
([nil nil ((66 . 67)) nil (25843 13949 414594 654000) 0 nil])
([nil nil ((71 . 75)) nil (25843 13949 414594 163000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -73) (undo-tree-id6 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -74) (undo-tree-id7 . -1) 75) nil (25843 13949 414593 232000) 0 nil])
([nil nil ((73 . 79)) nil (25843 13949 414591 849000) 0 nil])
([nil nil ((#("J" 0 1 (face tree-sitter-hl-face:type fontified t)) . -67) (undo-tree-id2 . -1) (#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -68) (undo-tree-id3 . -1) (#("O" 0 1 (face tree-sitter-hl-face:type fontified t)) . -69) (undo-tree-id4 . -1) (#("N" 0 1 (face tree-sitter-hl-face:type fontified t)) . -70) (undo-tree-id5 . -1) 71) nil (25843 13949 414590 867000) 0 nil])
([nil nil ((75 . 76)) nil (25843 13949 414588 132000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -75) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 76) nil (25843 13949 414587 341000) 0 nil])
([nil nil ((75 . 79)) nil (25843 13949 414559 98000) 0 nil])
([nil nil ((645 . 647) (t 25843 13949 423307 305000)) nil (25843 14194 991811 415000) 0 nil])
([nil nil ((647 . 657)) nil (25843 14194 991810 664000) 0 nil])
([nil nil ((654 . 657) (#("res" 0 3 (fontified nil)) . 654) (654 . 657) (#("res" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -654) (undo-tree-id228 . -3) (undo-tree-id229 . -3) 657) nil (25843 14194 991810 173000) 0 nil])
([nil nil ((306 . 311)) nil (25843 14194 991808 520000) 0 nil])
([nil nil ((307 . 319) (#("Loca" 0 4 (fontified nil)) . 307) (307 . 311) (#("LocationJSON" 0 12 (fontified nil)) . -307) (307 . 319) (#("Loca" 0 4 (face tree-sitter-hl-face:type fontified t)) . -307) (undo-tree-id226 . -4) (undo-tree-id227 . -4) 311) nil (25843 14194 991807 769000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -667) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -668) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -669) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 670) nil (25843 14194 991806 55000) 0 nil])
([nil nil ((667 . 671)) nil (25843 14194 991803 711000) 0 nil])
([nil nil ((58 . 60)) nil (25843 14194 991803 190000) 0 nil])
([nil nil ((61 . 65) (60 . 62) (#("\"" 0 1 (fontified nil)) . -60) (60 . 61)) nil (25843 14194 991802 549000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -63) (undo-tree-id218 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -64) (undo-tree-id219 . -1) 65) nil (25843 14194 991801 677000) 0 nil])
([nil nil ((63 . 65)) nil (25843 14194 991795 977000) 0 nil])
([nil nil ((61 . 69) (#("enco" 0 4 (fontified nil)) . 61) (61 . 65) (#("encoding" 0 8 (fontified nil)) . -61) (61 . 69) (#("enco" 0 4 (face tree-sitter-hl-face:string fontified t)) . -61) (undo-tree-id216 . -4) (undo-tree-id217 . -4) 65) nil (25843 14194 991795 416000) 0 nil])
([nil nil ((69 . 74)) nil (25843 14194 991794 203000) 0 nil])
([nil nil ((684 . 691)) nil (25843 14194 991793 702000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -689) (undo-tree-id214 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -690) (undo-tree-id215 . -1) 691) nil (25843 14194 991792 911000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -689) (undo-tree-id210 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -690) (undo-tree-id211 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -691) (undo-tree-id212 . -1) (#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -692) (undo-tree-id213 . -1) 693) nil (25843 14194 991791 408000) 0 nil])
([nil nil ((689 . 692)) nil (25843 14194 991789 575000) 0 nil])
([nil nil ((689 . 728) (#("Unm" 0 3 (fontified nil)) . 689) (689 . 692) (#("Unmarshal" 0 9 (fontified nil)) . -689) (689 . 698) (#("Unm" 0 3 (face tree-sitter-hl-face:property fontified t)) . -689) (undo-tree-id208 . -3) (undo-tree-id209 . -3) 692) nil (25843 14194 991789 24000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -706) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#(" " 0 1 (fontified t)) . -707) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -708) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -709) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -710) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("y" 0 1 (face tree-sitter-hl-face:type fontified t)) . -711) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -712) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -713) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -714) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("," 0 1 (fontified t)) . -715) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -716) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("$" 0 1 (fontified t)) . -717) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -718) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("2" 0 1 (face tree-sitter-hl-face:number fontified t)) . -719) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#(":" 0 1 (fontified t)) . -720) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("v" 0 1 (face tree-sitter-hl-face:type fontified t)) . -721) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -722) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -723) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -724) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("y" 0 1 (face tree-sitter-hl-face:type fontified t)) . -725) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -726) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . 1) (undo-tree-id207 . -1) 727) nil (25843 14194 991784 495000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -699) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -700) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -701) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#(":" 0 1 (fontified t)) . -702) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -703) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -704) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -705) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 706) nil (25843 14194 991748 538000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -698) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 699)) nil (25843 14194 991721 548000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -689) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -690) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -691) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -692) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -693) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -694) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("h" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -695) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -696) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -697) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 698) nil (25843 14194 991718 702000) 0 nil])
([nil nil ((689 . 692)) nil (25843 14194 991705 708000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) #s(yas--field 2 705 715 nil nil nil t nil)) nil 0 nil #s(yas--field 2 705 715 nil nil nil t nil) nil nil)) (689 . 718) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 689) (689 . 728) (#("Unm" 0 3 (fontified nil)) . 689) (689 . 692) (#("Unmarshal" 0 9 (fontified nil)) . -689) (689 . 698) (#("Unm" 0 3 (face tree-sitter-hl-face:property fontified t)) . -689) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 692) nil (25843 14194 991704 736000) 0 nil])
([nil nil ((700 . 703) (#("data []byte" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-3-face) fontified nil) 6 7 (face (rainbow-delimiters-depth-3-face) fontified nil) 7 11 (face tree-sitter-hl-face:type fontified nil)) . 700) (699 . 700)) nil (25843 14194 991702 512000) 0 nil])
([nil nil ((apply yas--snippet-revive 699 703 #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) nil)) (699 . 703) (#("body" 0 4 (fontified nil)) . 699) (699 . 703) (#("body" 0 4 (fontified nil)) . 699) (699 . 703) (#("body" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -699) (undo-tree-id50 . -4) (undo-tree-id51 . -4) 703) nil (25843 14194 991701 420000) 0 nil])
([nil nil ((706 . 714) (#("v any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:variable fontified nil)) . 706) (705 . 706)) nil (25843 14194 991700 7000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -713) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 714) nil (25843 14194 991698 625000) 0 nil])
([nil nil ((713 . 715)) nil (25843 14194 991696 942000) 0 nil])
([nil nil ((715 . 717)) nil (25843 14194 991696 471000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -715) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("	" 0 1 (fontified t)) . -716) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 717) nil (25843 14194 991695 790000) 0 nil])
([nil nil ((apply yas--snippet-revive 689 716 #s(yas--snippet nil (#s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) #s(yas--field 2 705 715 nil nil nil t nil)) nil 0 nil #s(yas--field 2 705 715 nil nil nil t nil) nil nil))) nil (25843 14194 991694 116000) 0 nil])
([nil nil ((675 . 677)) nil (25843 14194 991693 746000) 0 nil])
([nil nil ((677 . 688)) nil (25843 14194 991693 475000) 0 nil])
([nil nil ((688 . 695)) nil (25843 14194 991693 205000) 0 nil])
([nil nil ((apply yas--snippet-revive 691 703 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (691 . 703) (#("LocationJSON" 0 12 (fontified nil)) . 691) (691 . 703) (#("Loca" 0 4 (fontified nil)) . 691) (691 . 695) (#("LocationJSON" 0 12 (fontified nil)) . -691) (691 . 703) (#("Loca" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -691) (undo-tree-id42 . -4) (undo-tree-id43 . -4) 695) nil (25843 14194 991692 654000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -704) (704 . 705) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -704) (704 . 705) (703 . 705)) nil (25843 14194 991690 410000) 0 nil])
([nil nil ((714 . 715)) nil (25843 14194 991689 27000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -714) (undo-tree-id41 . -1) 715) nil (25843 14194 991688 225000) 0 nil])
([nil nil ((#("json.Unmarshal(body, resultBody)" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 14 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 19 (face tree-sitter-hl-face:variable fontified t) 19 21 (fontified t) 21 31 (face tree-sitter-hl-face:variable fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t)) . 714) (undo-tree-id27 . -31) (undo-tree-id28 . -31) (undo-tree-id29 . 32) (undo-tree-id30 . -31) (undo-tree-id31 . -5) (undo-tree-id32 . -15) (undo-tree-id33 . -32) (undo-tree-id34 . -5) (undo-tree-id35 . -31) (undo-tree-id36 . -31) (undo-tree-id37 . 1) (undo-tree-id38 . -32) (undo-tree-id39 . 18) (undo-tree-id40 . -15) 745) nil (25843 14194 991686 943000) 0 nil])
([nil nil ((705 . 707)) nil (25843 14194 991679 459000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -706) (undo-tree-id26 . -1) 707) nil (25843 14194 991678 487000) 0 nil])
([nil nil ((nil rear-nonsticky nil 737 . 738) (nil fontified nil 706 . 738) (706 . 738)) nil (25843 14194 991671 284000) 0 nil])
([nil nil (737) nil (25843 14194 991670 452000) 0 nil])
([nil nil ((706 . 708)) nil (25843 14194 991667 467000) 0 nil])
([nil nil ((749 . 752) (t 25843 14194 997585 10000)) nil (25843 14199 580773 922000) 0 nil])
([nil nil ((apply yas--snippet-revive 749 759 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (749 . 759) (#("resultBody" 0 10 (fontified nil)) . 749) (749 . 759) (#("res" 0 3 (fontified nil)) . 749) (749 . 752) (#("resultBody" 0 10 (fontified nil)) . -749) (749 . 759) (#("res" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -749) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -1) (undo-tree-id233 . -2) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) 752) nil (25843 14199 580770 595000) 0 nil])
([nil nil ((#("JSON" 0 4 (face tree-sitter-hl-face:type fontified t)) . 92) (undo-tree-id241 . -3) (undo-tree-id242 . -3) 95 (#("JSON" 0 4 (face tree-sitter-hl-face:type fontified t)) . 332) 324 (#("JSON" 0 4 (face tree-sitter-hl-face:type fontified t)) . 699) 691 (t 25843 14199 682522 412000)) nil (25843 14229 442597 210000) 0 nil])
([nil nil ((92 . 106) 91 (328 . 342) 320 (691 . 705) 683) nil (25843 14229 442586 720000) 0 nil])
([nil nil ((759 . 760) (t 25843 14229 449130 765000)) nil (25843 14342 40730 588000) 0 nil])
([nil nil ((332 . 335) (t 25843 14342 47735 914000)) nil (25843 14603 96965 223000) 0 nil])
([nil nil ((335 . 342)) nil (25843 14603 96964 912000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -338) (undo-tree-id406 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -339) (undo-tree-id407 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -340) (undo-tree-id408 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -341) (undo-tree-id409 . -1) 342) nil (25843 14603 96964 291000) 0 nil])
([nil nil ((338 . 342)) nil (25843 14603 96962 998000) 0 nil])
([nil nil ((311 . 313)) nil (25843 14603 96962 748000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -311) (undo-tree-id404 . -1) (#("
" 0 1 (fontified t)) . -312) (undo-tree-id405 . -1) 313) nil (25843 14603 96962 177000) 0 nil])
([nil nil ((368 . 370)) nil (25843 14603 96960 744000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -373) (373 . 374) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -373) (373 . 374) (370 . 374)) nil (25843 14603 96960 394000) 0 nil])
([nil nil ((373 . 376)) nil (25843 14603 96959 963000) 0 nil])
([nil nil ((377 . 379) (#("'" 0 1 (fontified nil)) . -377) (376 . 378)) nil (25843 14603 96959 582000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -377) (undo-tree-id403 . -1) (#("'" 0 1 (fontified t)) . 378)) nil (25843 14603 96959 71000) 0 nil])
([nil nil ((377 . 383)) nil (25843 14603 96958 520000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -386) (386 . 387) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -386) (386 . 387) (384 . 387)) nil (25843 14603 96958 139000) 0 nil])
([nil nil ((387 . 389) (388 . 389) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 387) (387 . 389) (386 . 388)) nil (25843 14603 96957 418000) 0 nil])
([nil nil ((389 . 395)) nil (25843 14603 96956 647000) 0 nil])
([nil nil ((nil rear-nonsticky nil 435 . 436) (nil fontified nil 395 . 436) (395 . 436) 394) nil (25843 14603 96956 386000) 0 nil])
([nil nil ((#("	if(url == nil) {
		url = \"https://pokeapi.co/api/v2/location-area\"
	}
" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 11 (fontified t) 11 14 (face tree-sitter-hl-face:constant\.builtin fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (fontified t) 18 20 (fontified t) 20 23 (face tree-sitter-hl-face:variable fontified t) 23 24 (fontified t) 24 25 (face tree-sitter-hl-face:operator fontified t) 25 26 (fontified t) 26 66 (face tree-sitter-hl-face:string fontified t) 66 67 (face tree-sitter-hl-face:string rear-nonsticky t fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-2-face) fontified t) 70 71 (fontified t)) . 369) (undo-tree-id395 . -69) (undo-tree-id396 . -70) (undo-tree-id397 . -69) (undo-tree-id398 . -1) (undo-tree-id399 . -69) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -69) 370) nil (25843 14603 96955 675000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -332) (undo-tree-id385 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -333) (undo-tree-id386 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -334) (undo-tree-id387 . -1) (#(" " 0 1 (fontified t)) . -335) (undo-tree-id388 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -336) (undo-tree-id389 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -337) (undo-tree-id390 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -338) (undo-tree-id391 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -339) (undo-tree-id392 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -340) (undo-tree-id393 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -341) (undo-tree-id394 . -1) 342) nil (25843 14603 96950 645000) 0 nil])
([nil nil ((332 . 346)) nil (25843 14603 96947 239000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -345) (undo-tree-id384 . -1) 346) nil (25843 14603 96946 718000) 0 nil])
([nil nil ((345 . 347)) nil (25843 14603 96946 107000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -346) (undo-tree-id383 . -1) 347) nil (25843 14603 96945 696000) 0 nil])
([nil nil ((346 . 347)) nil (25843 14603 96945 15000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -345) (undo-tree-id381 . -1) (#(" " 0 1 (fontified t)) . -346) (undo-tree-id382 . -1) 347) nil (25843 14603 96944 614000) 0 nil])
([nil nil ((345 . 351)) nil (25843 14603 96943 602000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -345) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -346) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -347) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -348) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -349) (undo-tree-id379 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -350) (undo-tree-id380 . -1) 351) nil (25843 14603 96942 861000) 0 nil])
([nil nil ((338 . 345)) nil (25843 14603 96937 952000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -346) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -347) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -348) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -349) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -350) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -351) (undo-tree-id369 . -1) (undo-tree-id370 . -1) 352) nil (25843 14603 96937 50000) 0 nil])
([nil nil ((346 . 349)) nil (25843 14603 96933 123000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -332) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -333) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -334) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -335) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -336) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -337) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("," 0 1 (fontified t)) . -338) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#(" " 0 1 (fontified t)) . -339) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -340) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -341) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -342) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -343) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -344) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#(" " 0 1 (fontified t)) . -345) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -346) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -347) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -348) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 349) nil (25843 14603 96930 748000) 0 nil])
([nil nil ((332 . 344)) nil (25843 14603 96832 84000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -343) (undo-tree-id324 . -1) 344) nil (25843 14603 96831 683000) 0 nil])
([nil nil ((343 . 347)) nil (25843 14603 96831 42000) 0 nil])
([nil nil ((apply yas--snippet-revive 343 365 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (343 . 365) (#("LocationResponseObject" 0 22 (fontified nil)) . 343) (343 . 365) (#("Loca" 0 4 (fontified nil)) . 343) (343 . 347) (#("LocationResponseObject" 0 22 (fontified nil)) . -343) (343 . 365) (#("Loca" 0 4 (face tree-sitter-hl-face:type fontified t)) . -343) (undo-tree-id322 . -4) (undo-tree-id323 . -4) 347) nil (25843 14603 96830 90000) 0 nil])
([nil nil ((391 . 393)) nil (25843 14603 96827 615000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -396) (396 . 397) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -396) (396 . 397) (393 . 397)) nil (25843 14603 96827 14000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -344) (undo-tree-id301 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -345) (undo-tree-id302 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -346) (undo-tree-id303 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -347) (undo-tree-id304 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -348) (undo-tree-id305 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -349) (undo-tree-id306 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -350) (undo-tree-id307 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -351) (undo-tree-id308 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -352) (undo-tree-id309 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -353) (undo-tree-id310 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -354) (undo-tree-id311 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -355) (undo-tree-id312 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -356) (undo-tree-id313 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -357) (undo-tree-id314 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -358) (undo-tree-id315 . -1) (#("O" 0 1 (face tree-sitter-hl-face:type fontified t)) . -359) (undo-tree-id316 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -360) (undo-tree-id317 . -1) (#("j" 0 1 (face tree-sitter-hl-face:type fontified t)) . -361) (undo-tree-id318 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -362) (undo-tree-id319 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -363) (undo-tree-id320 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -364) (undo-tree-id321 . -1) 365) nil (25843 14603 96824 820000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -332) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -333) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -334) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("v" 0 1 (face tree-sitter-hl-face:type fontified t)) . -335) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("O" 0 1 (face tree-sitter-hl-face:type fontified t)) . -336) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -337) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("j" 0 1 (face tree-sitter-hl-face:type fontified t)) . -338) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -339) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -340) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -341) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#(" " 0 1 (fontified t)) . -342) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("L" 0 1 (face tree-sitter-hl-face:type fontified t)) . -343) (undo-tree-id300 . -1) 344) nil (25843 14603 96814 831000) 0 nil])
([nil nil ((#("L" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -321) (undo-tree-id269 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -322) (undo-tree-id270 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -323) (undo-tree-id271 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -324) (undo-tree-id272 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -325) (undo-tree-id273 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -326) (undo-tree-id274 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -327) (undo-tree-id275 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -328) (undo-tree-id276 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -329) (undo-tree-id277 . -1) 330) nil (25843 14603 96804 642000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -349) (undo-tree-id261 . -1) (#("	" 0 1 (fontified t)) . -350) (undo-tree-id262 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -351) (undo-tree-id263 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -352) (undo-tree-id264 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -353) (undo-tree-id265 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -354) (undo-tree-id266 . -1) (undo-tree-id267 . 1) (undo-tree-id268 . -1) 355) nil (25843 14603 96799 643000) 0 nil])
([nil nil ((323 . 334)) nil (25843 14603 96795 455000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -326) (undo-tree-id260 . -1) 327) nil (25843 14603 96794 914000) 0 nil])
([nil nil ((#("https://pokeapi.co/api/v2/location-area" 0 5 (face tree-sitter-hl-face:string fontified t) 5 6 (face tree-sitter-hl-face:string fontified t) 6 39 (face tree-sitter-hl-face:string fontified t)) . 383) (undo-tree-id255 . -38) (undo-tree-id256 . -38) (undo-tree-id257 . -38) (undo-tree-id258 . -39) (undo-tree-id259 . -38)) nil (25843 14603 96793 932000) 0 nil])
([nil nil ((312 . 314)) nil (25843 14603 96791 578000) 0 nil])
([nil nil ((313 . 317)) nil (25843 14603 96791 287000) 0 nil])
([nil nil ((326 . 328) (#("\"" 0 1 (fontified nil)) . -326) (317 . 327)) nil (25843 14603 96790 776000) 0 nil])
([nil nil ((nil rear-nonsticky nil 365 . 366) (nil fontified nil 327 . 366) (327 . 366) 326) nil (25843 14603 96790 145000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -438) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -439) (undo-tree-id253 . 1) (undo-tree-id254 . -1) 440) nil (25843 14603 96788 853000) 0 nil])
([nil nil ((438 . 441)) nil (25843 14603 96784 695000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -323) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 324) nil (25843 14603 96781 900000) 0 nil])
([nil nil ((366 . 368) (t 25843 14603 104911 289000)) nil (25843 15136 496482 106000) 0 nil])
([nil nil ((368 . 371)) nil (25843 15136 496480 864000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -368) (undo-tree-id444 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -369) (undo-tree-id445 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -370) (undo-tree-id446 . -1) 371) nil (25843 15136 496479 912000) 0 nil])
([nil nil ((368 . 383)) nil (25843 15136 496477 989000) 0 nil])
([nil nil ((#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -382) (undo-tree-id443 . -1) 383) nil (25843 15136 496477 277000) 0 nil])
([nil nil ((382 . 389)) nil (25843 15136 496476 65000) 0 nil])
([nil nil ((392 . 394) (#("\"" 0 1 (fontified nil)) . -392) (391 . 393) (#(")" 0 1 (fontified nil)) . -390) (390 . 391) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -390) (390 . 391) (389 . 391)) nil (25843 15136 496474 973000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -392) (undo-tree-id442 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 393)) nil (25843 15136 496473 490000) 0 nil])
([nil nil ((392 . 396)) nil (25843 15136 496472 278000) 0 nil])
([nil nil ((apply yas--snippet-revive 392 414 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (392 . 414) (#("LocationResponseObject" 0 22 (fontified nil)) . 392) (392 . 414) (#("Loca" 0 4 (fontified nil)) . 392) (392 . 396) (#("LocationResponseObject" 0 22 (fontified nil)) . -392) (392 . 414) (#("Loca" 0 4 (face tree-sitter-hl-face:type fontified t)) . -392) (undo-tree-id440 . -4) (undo-tree-id441 . -4) 396) nil (25843 15136 496471 256000) 0 nil])
([nil nil ((424 . 432)) nil (25843 15136 496468 601000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -416) (416 . 417) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -416) (416 . 417) (414 . 417)) nil (25843 15136 496467 689000) 0 nil])
([nil nil ((417 . 418) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 417) (417 . 418) (416 . 418)) nil (25843 15136 496466 497000) 0 nil])
([nil nil ((#("const url = \"https://pokeapi.co/api/v2/location-area\"
" 0 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (face tree-sitter-hl-face:operator fontified t) 11 12 (fontified t) 12 13 (face tree-sitter-hl-face:string fontified t) 13 51 (face tree-sitter-hl-face:string fontified t) 51 52 (face tree-sitter-hl-face:string rear-nonsticky t fontified t) 52 53 (face tree-sitter-hl-face:string fontified t) 53 54 (fontified t)) . 313) (undo-tree-id436 . -53) (undo-tree-id437 . 52) (undo-tree-id438 . -53) (undo-tree-id439 . -1) 314) nil (25843 15136 496464 894000) 0 nil])
([nil nil ((#("

func GetPrevLocations() LocationResponseObject {
	
}
" 0 1 (fontified t) 1 2 (fontified t) 2 6 (face tree-sitter-hl-face:keyword fontified t) 6 7 (fontified t) 7 23 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t) 26 48 (face tree-sitter-hl-face:type fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t)) . 312) (undo-tree-id410 . -1) (undo-tree-id411 . -53) (undo-tree-id412 . -54) (undo-tree-id413 . 54) (undo-tree-id414 . -53) (undo-tree-id415 . -1) (undo-tree-id416 . -52) (undo-tree-id417 . -52) (undo-tree-id418 . -53) (undo-tree-id419 . -54) (undo-tree-id420 . -7) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -53) (undo-tree-id428 . -53) (undo-tree-id429 . -53) (undo-tree-id430 . -53) (undo-tree-id431 . -55) (undo-tree-id432 . -53) (undo-tree-id433 . -53) (undo-tree-id434 . -53) (undo-tree-id435 . -55)) nil (25843 15136 496460 536000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -189) (undo-tree-id462 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -190) (undo-tree-id463 . -1) (#("y" 0 1 (face tree-sitter-hl-face:type fontified t)) . -191) (undo-tree-id464 . -1) 192 (t 25843 15136 598162 691000)) nil (25843 15762 784008 259000) 0 nil])
([nil nil ((189 . 195)) nil (25843 15762 784006 405000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -196) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t)) . -197) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#(" " 0 1 (fontified t)) . -198) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) 199) nil (25843 15762 784003 580000) 0 nil])
([nil nil ((#("	fmt.Printf(\"%s\", body)
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 11 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face tree-sitter-hl-face:string fontified t) 13 14 (face tree-sitter-hl-face:string fontified t) 14 15 (face tree-sitter-hl-face:string fontified t) 15 16 (face tree-sitter-hl-face:string fontified t) 16 18 (fontified t) 18 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (fontified t)) . 643) (undo-tree-id465 . -23) (undo-tree-id466 . -23) (undo-tree-id467 . -16) (undo-tree-id468 . -16) (undo-tree-id469 . -16) (undo-tree-id470 . -16) (undo-tree-id471 . -16) (undo-tree-id472 . -16) (undo-tree-id473 . -16) (undo-tree-id474 . -16) (undo-tree-id475 . -16) (undo-tree-id476 . -24) 659 (t 25843 15762 791322 909000)) nil (25843 16195 811020 984000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (t 25843 16195 913137 427000)) nil (25843 16647 968486 465000) 0 nil])
([nil nil ((33 . 34)) nil (25843 16647 968485 93000) 0 nil])
([nil nil ((#("	\"fmt\"
" 0 1 (fontified t) 1 6 (face tree-sitter-hl-face:string fontified t) 6 7 (fontified t)) . 27) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -5) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -5) (undo-tree-id509 . -5) (undo-tree-id510 . -1) (undo-tree-id511 . -6) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . 5) (undo-tree-id515 . -5) (undo-tree-id516 . -1) (undo-tree-id517 . -6) (undo-tree-id518 . -5) (undo-tree-id519 . -5) (undo-tree-id520 . -5) (undo-tree-id521 . -5) (undo-tree-id522 . -5) (undo-tree-id523 . -7) 32 (t 25843 16195 913137 427000)) nil (25843 16647 968482 528000) 0 nil])
([nil nil ((360 . 362) (t 25843 16647 970863 910000)) nil (25846 21948 606045 500000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -365) (365 . 366) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -365) (365 . 366) (362 . 366)) nil (25846 21948 606044 378000) 0 nil])
([nil nil ((365 . 368)) nil (25846 21948 606042 435000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -365) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -366) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -367) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 368) nil (25846 21948 606041 974000) 0 nil])
([nil nil ((70 . 72)) nil (25846 21948 606039 479000) 0 nil])
([nil nil ((72 . 73)) nil (25846 21948 606038 788000) 0 nil])
([nil nil ((73 . 76)) nil (25846 21948 606038 16000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -72) (undo-tree-id260 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -73) (undo-tree-id261 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -74) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t)) . -75) (undo-tree-id263 . -1) 76) nil (25846 21948 606036 353000) 0 nil])
([nil nil ((72 . 73)) nil (25846 21948 606034 69000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -72) (undo-tree-id259 . -1) 73) nil (25846 21948 606032 996000) 0 nil])
([nil nil ((72 . 76)) nil (25846 21948 606031 854000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -72) (undo-tree-id255 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -73) (undo-tree-id256 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -74) (undo-tree-id257 . -1) (#(" " 0 1 (fontified t)) . -75) (undo-tree-id258 . -1) 76) nil (25846 21948 606030 261000) 0 nil])
([nil nil ((72 . 81)) nil (25846 21948 606027 596000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -79) (undo-tree-id253 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -80) (undo-tree-id254 . -1) 81) nil (25846 21948 606026 394000) 0 nil])
([nil nil ((79 . 84)) nil (25846 21948 606023 458000) 0 nil])
([nil nil ((84 . 89)) nil (25846 21948 606022 867000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -88) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 89) nil (25846 21948 606022 85000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -86) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -87) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 88) nil (25846 21948 606020 903000) 0 nil])
([nil nil ((68 . 70)) nil (25846 21948 606018 849000) 0 nil])
([nil nil ((71 . 73) (70 . 72) (#("\"" 0 1 (fontified nil)) . -70) (70 . 71)) nil (25846 21948 606018 519000) 0 nil])
([nil nil ((73 . 79)) nil (25846 21948 606017 617000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -73) (undo-tree-id241 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -74) (undo-tree-id242 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -75) (undo-tree-id243 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -76) (undo-tree-id244 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -77) (undo-tree-id245 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -78) (undo-tree-id246 . -1) 79) nil (25846 21948 606016 184000) 0 nil])
([nil nil ((73 . 76)) nil (25846 21948 606013 709000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -71) (undo-tree-id236 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -72) (undo-tree-id237 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -73) (undo-tree-id238 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -74) (undo-tree-id239 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -75) (undo-tree-id240 . -1) 76) nil (25846 21948 606012 878000) 0 nil])
([nil nil ((71 . 73)) nil (25846 21948 606010 543000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:string)) . -71) (undo-tree-id234 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -72) (undo-tree-id235 . -1) 73) nil (25846 21948 606009 822000) 0 nil])
([nil nil ((71 . 74)) nil (25846 21948 606008 499000) 0 nil])
([nil nil ((71 . 81) (#("GoP" 0 3 (fontified nil)) . 71) (71 . 74) (#("GoPokedex/" 0 10 (fontified nil)) . -71) (71 . 81) (#("GoP" 0 3 (fontified t face tree-sitter-hl-face:string)) . -71) (undo-tree-id232 . -3) (undo-tree-id233 . -3) 74) nil (25846 21948 606007 287000) 0 nil])
([nil nil ((81 . 84)) nil (25846 21948 606005 193000) 0 nil])
([nil nil ((81 . 90) (#("pok" 0 3 (fontified nil)) . 81) (81 . 84) (#("pokecache" 0 9 (fontified nil)) . -81) (81 . 90) (#("pok" 0 3 (fontified t face tree-sitter-hl-face:string)) . -81) (undo-tree-id230 . -3) (undo-tree-id231 . -3) 84) nil (25846 21948 606004 291000) 0 nil])
([nil nil ((109 . 113)) nil (25846 21948 606002 237000) 0 nil])
([nil nil ((109 . 118) (#("poke" 0 4 (fontified nil)) . 109) (109 . 113) (#("pokecache" 0 9 (fontified nil)) . -109) (109 . 118) (#("poke" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -109) (undo-tree-id228 . -4) (undo-tree-id229 . -4) 113) nil (25846 21948 606001 456000) 0 nil])
([nil nil ((118 . 119)) nil (25846 21948 605999 893000) 0 nil])
([nil nil ((119 . 156) (#("NewCache" 0 8 (fontified nil)) . -119) (119 . 127)) nil (25846 21948 605999 342000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -134) (undo-tree-id205 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -135) (undo-tree-id206 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -136) (undo-tree-id207 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -137) (undo-tree-id208 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -138) (undo-tree-id209 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -139) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -140) (undo-tree-id211 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -141) (undo-tree-id212 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -142) (undo-tree-id213 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -143) (undo-tree-id214 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -144) (undo-tree-id215 . -1) (#("." 0 1 (fontified t)) . -145) (undo-tree-id216 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -146) (undo-tree-id217 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -147) (undo-tree-id218 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -148) (undo-tree-id219 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -149) (undo-tree-id220 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -150) (undo-tree-id221 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -151) (undo-tree-id222 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -152) (undo-tree-id223 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -153) (undo-tree-id224 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -154) (undo-tree-id225 . -1) (undo-tree-id226 . 1) (undo-tree-id227 . -1) 155) nil (25846 21948 605995 43000) 0 nil])
([nil nil ((#("$" 0 1 (fontified nil)) . -128) (undo-tree-id199 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -129) (undo-tree-id200 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -130) (undo-tree-id201 . -1) (#(":" 0 1 (fontified t)) . -131) (undo-tree-id202 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -132) (undo-tree-id203 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -133) (undo-tree-id204 . -1) 134) nil (25846 21948 605978 91000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -127) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#(")" 0 1 (fontified nil face (rainbow-delimiters-mismatched-face))) . 128) (undo-tree-id198 . -1)) nil (25846 21948 605975 826000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -124) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("h" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -125) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -126) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 127) nil (25846 21948 605974 294000) 0 nil])
([nil nil ((124 . 125)) nil (25846 21948 605971 508000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 128 146 nil nil nil t nil)) nil 27 nil #s(yas--field 1 128 146 nil nil nil t nil) nil nil)) (119 . 151) (#("NewCache(${1:interval time.Duration})" 0 37 (fontified nil)) . 119) (119 . 156) (#("NewCac" 0 6 (fontified nil)) . 119) (119 . 125) (#("NewCache" 0 8 (fontified nil)) . -119) (119 . 127) (#("NewCac" 0 6 (fontified t face tree-sitter-hl-face:property)) . -119) (undo-tree-id188 . -6) (undo-tree-id189 . -6) 125) nil (25846 21948 605970 596000) 0 nil])
([nil nil ((129 . 133) (#("interval time.Duration" 0 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 13 (fontified nil face tree-sitter-hl-face:variable) 13 14 (fontified nil) 14 22 (fontified nil face tree-sitter-hl-face:property)) . 129) (128 . 129)) nil (25846 21948 605969 214000) 0 nil])
([nil nil ((133 . 136)) nil (25846 21948 605968 292000) 0 nil])
([nil nil ((136 . 137)) nil (25846 21948 605967 821000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -135) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -136) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 137) nil (25846 21948 605967 140000) 0 nil])
([nil nil ((135 . 139)) nil (25846 21948 605964 404000) 0 nil])
([nil nil ((139 . 140)) nil (25846 21948 605963 352000) 0 nil])
([nil nil ((140 . 141)) nil (25846 21948 605962 882000) 0 nil])
([nil nil ((141 . 146)) nil (25846 21948 605962 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 119 147 #s(yas--snippet nil (#s(yas--field 1 128 146 nil nil nil t nil)) nil 27 nil #s(yas--field 1 128 146 nil nil nil t nil) nil nil))) nil (25846 21948 605961 479000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -441) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 442)) nil (25846 21948 605960 627000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -439) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -440) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 441) nil (25846 21948 605958 774000) 0 nil])
([nil nil ((439 . 442)) nil (25846 21948 605955 838000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -441) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 442) nil (25846 21948 605955 217000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -439) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -440) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 441) nil (25846 21948 605953 974000) 0 nil])
([nil nil ((439 . 449)) nil (25846 21948 605952 171000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -448) (undo-tree-id171 . -1) 449) nil (25846 21948 605951 99000) 0 nil])
([nil nil ((448 . 450)) nil (25846 21948 605950 177000) 0 nil])
([nil nil ((450 . 453)) nil (25846 21948 605949 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 450 455 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (450 . 455) (#("cache" 0 5 (fontified nil)) . 450) (450 . 455) (#("cac" 0 3 (fontified nil)) . 450) (450 . 453) (#("cache" 0 5 (fontified nil)) . -450) (450 . 455) (#("cac" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -450) (undo-tree-id169 . -3) (undo-tree-id170 . -3) 453) nil (25846 21948 605948 794000) 0 nil])
([nil nil ((455 . 457)) nil (25846 21948 605945 598000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -456) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 457) nil (25846 21948 605944 857000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -455) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 456) nil (25846 21948 605943 935000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -460) (460 . 461) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -460) (460 . 461) (455 . 461)) nil (25846 21948 605942 883000) 0 nil])
([nil nil ((460 . 463)) nil (25846 21948 605942 552000) 0 nil])
([nil nil ((apply yas--snippet-revive 460 463 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (460 . 463) (#("url" 0 3 (fontified nil)) . 460) (460 . 463) (#("url" 0 3 (fontified nil)) . 460) (460 . 463) (#("url" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -460) (undo-tree-id163 . -3) (undo-tree-id164 . -3) 463) nil (25846 21948 605941 510000) 0 nil])
([nil nil ((464 . 466)) nil (25846 21948 605939 617000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -469) (469 . 470) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -469) (469 . 470) (466 . 470)) nil (25846 21948 605939 46000) 0 nil])
([nil nil ((469 . 472)) nil (25846 21948 605938 445000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -475) (475 . 476) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -475) (475 . 476) (473 . 476)) nil (25846 21948 605938 44000) 0 nil])
([nil nil ((476 . 478) (477 . 478) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 476) (476 . 478) (475 . 477)) nil (25846 21948 605937 272000) 0 nil])
([nil nil ((#("	res, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	body, err := io.ReadAll(res.Body)
	res.Body.Close()
	if res.StatusCode > 299 {
		log.Fatalf(\"Response failed with status code: %d and\\nbody: %s\\n\", res.StatusCode, body)
	}
	if err != nil {
		log.Fatal(err)
	}
	resultBody := LocationResponseObject{}
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 6 (fontified t) 6 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 12 (fontified t face tree-sitter-hl-face:operator) 12 13 (fontified t) 13 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 21 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 25 (fontified t face tree-sitter-hl-face:variable) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t face tree-sitter-hl-face:keyword) 30 31 (fontified t) 31 34 (fontified t face tree-sitter-hl-face:variable) 34 35 (fontified t) 35 37 (fontified t face tree-sitter-hl-face:operator) 37 38 (fontified t) 38 41 (fontified t face tree-sitter-hl-face:constant\.builtin) 41 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 46 (fontified t) 46 49 (fontified t face tree-sitter-hl-face:variable) 49 50 (fontified t) 50 55 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 55 56 (fontified t face (rainbow-delimiters-depth-3-face)) 56 59 (fontified t face tree-sitter-hl-face:variable) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-2-face)) 63 65 (fontified t) 65 69 (fontified t face tree-sitter-hl-face:variable) 69 71 (fontified t) 71 74 (fontified t face tree-sitter-hl-face:variable) 74 75 (fontified t) 75 77 (fontified t face tree-sitter-hl-face:operator) 77 78 (fontified t) 78 80 (fontified t face tree-sitter-hl-face:variable) 80 81 (fontified t) 81 88 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 88 89 (fontified t face (rainbow-delimiters-depth-2-face)) 89 92 (fontified t face tree-sitter-hl-face:variable) 92 93 (fontified t) 93 97 (fontified t face tree-sitter-hl-face:property) 97 98 (fontified t face (rainbow-delimiters-depth-2-face)) 98 100 (fontified t) 100 103 (fontified t face tree-sitter-hl-face:variable) 103 104 (fontified t) 104 108 (fontified t face tree-sitter-hl-face:property) 108 109 (fontified t) 109 114 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 114 115 (fontified t face (rainbow-delimiters-depth-2-face)) 115 116 (fontified t face (rainbow-delimiters-depth-2-face)) 116 118 (fontified t) 118 120 (fontified t face tree-sitter-hl-face:keyword) 120 121 (fontified t) 121 124 (fontified t face tree-sitter-hl-face:variable) 124 125 (fontified t) 125 135 (fontified t face tree-sitter-hl-face:property) 135 136 (fontified t) 136 137 (fontified t face tree-sitter-hl-face:operator) 137 138 (fontified t) 138 141 (fontified t face tree-sitter-hl-face:number) 141 142 (fontified t) 142 143 (fontified t face (rainbow-delimiters-depth-2-face)) 143 146 (fontified t) 146 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t) 150 156 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 156 157 (fontified t face (rainbow-delimiters-depth-3-face)) 157 198 (fontified t face tree-sitter-hl-face:string) 198 199 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 199 200 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 200 208 (fontified t face tree-sitter-hl-face:string) 208 209 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 209 210 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 210 211 (fontified t face tree-sitter-hl-face:string) 211 213 (fontified t) 213 216 (fontified t face tree-sitter-hl-face:variable) 216 217 (fontified t) 217 227 (fontified t face tree-sitter-hl-face:property) 227 229 (fontified t) 229 233 (fontified t face tree-sitter-hl-face:variable) 233 234 (fontified t face (rainbow-delimiters-depth-3-face)) 234 236 (fontified t) 236 237 (fontified t face (rainbow-delimiters-depth-2-face)) 237 239 (fontified t) 239 241 (fontified t face tree-sitter-hl-face:keyword) 241 242 (fontified t) 242 245 (fontified t face tree-sitter-hl-face:variable) 245 246 (fontified t) 246 248 (fontified t face tree-sitter-hl-face:operator) 248 249 (fontified t) 249 252 (fontified t face tree-sitter-hl-face:constant\.builtin) 252 253 (fontified t) 253 254 (fontified t face (rainbow-delimiters-depth-2-face)) 254 257 (fontified t) 257 260 (fontified t face tree-sitter-hl-face:variable) 260 261 (fontified t) 261 266 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 266 267 (fontified t face (rainbow-delimiters-depth-3-face)) 267 270 (fontified t face tree-sitter-hl-face:variable) 270 271 (fontified t face (rainbow-delimiters-depth-3-face)) 271 273 (fontified t) 273 274 (fontified t face (rainbow-delimiters-depth-2-face)) 274 276 (fontified t) 276 286 (fontified t face tree-sitter-hl-face:variable) 286 287 (fontified t) 287 289 (fontified t face tree-sitter-hl-face:operator) 289 290 (fontified t) 290 312 (fontified t face tree-sitter-hl-face:type) 312 313 (fontified t face (rainbow-delimiters-depth-2-face)) 313 314 (fontified t face (rainbow-delimiters-depth-2-face)) 314 315 (fontified t)) . 482) (undo-tree-id149 . -270) (undo-tree-id150 . -284) (undo-tree-id151 . -270) (undo-tree-id152 . -270) (undo-tree-id153 . -270) (undo-tree-id154 . -284) (undo-tree-id155 . -9) (undo-tree-id156 . -9) (undo-tree-id157 . -274) (undo-tree-id158 . -285) (undo-tree-id159 . 30) (undo-tree-id160 . -9) (undo-tree-id161 . -284) (undo-tree-id162 . -314) 491) nil (25846 21948 605936 260000) 0 nil])
([nil nil ((nil rear-nonsticky nil 479 . 480) (#("
" 0 1 (fontified nil)) . -793) (478 . 794) 477) nil (25846 21948 605929 638000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 476) (undo-tree-id147 . -1) (undo-tree-id148 . -2) 477) nil (25846 21948 605928 315000) 0 nil])
([nil nil ((29 . 30) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -29) 30 (31 . 32) (#("g\"
	\"i" 0 2 (fontified t face tree-sitter-hl-face:string) 2 4 (fontified t) 4 6 (fontified t face tree-sitter-hl-face:string)) . -31) 37 (38 . 39) (#("\"
	\"n" 0 1 (fontified t face tree-sitter-hl-face:string) 1 3 (fontified t) 3 5 (fontified t face tree-sitter-hl-face:string)) . -38) 43 (44 . 47) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . 44) (#("htt" 0 3 (fontified t face tree-sitter-hl-face:string)) . 46) (50 . 58) (71 . 72) (#("G" 0 1 (fontified t face tree-sitter-hl-face:string)) . 71) (73 . 78) (#("P" 0 1 (fontified t face tree-sitter-hl-face:string)) . 73) (75 . 81) (#("ked" 0 3 (fontified t face tree-sitter-hl-face:string)) . 75) (79 . 80) (#("x" 0 1 (fontified t face tree-sitter-hl-face:string)) . 79) (#("pokecac" 0 7 (fontified t face tree-sitter-hl-face:string)) . 81) (89 . 92) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . 89) (#(" " 0 1 (fontified t)) . 399) (468 . 469) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 468) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 472) (476 . 477) (503 . 504) (520 . 521) (537 . 538) (540 . 541) (575 . 576) (593 . 594) (620 . 621) (711 . 712) (714 . 715) (731 . 732) (748 . 749) (751 . 752) (794 . 795) (#("  " 0 2 (fontified t)) . 794) (undo-tree-id145 . 2) (undo-tree-id146 . 2)) nil (25846 21948 605925 219000) 0 nil])
([nil nil ((463 . 465)) nil (25846 21948 605916 603000) 0 nil])
([nil nil ((465 . 470)) nil (25846 21948 605916 272000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -468) (undo-tree-id143 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id144 . -1) 470) nil (25846 21948 605915 581000) 0 nil])
([nil nil ((468 . 476)) nil (25846 21948 605914 148000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -475) (undo-tree-id142 . -1) 476) nil (25846 21948 605913 206000) 0 nil])
([nil nil ((475 . 476)) nil (25846 21948 605912 354000) 0 nil])
([nil nil ((476 . 480)) nil (25846 21948 605911 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 476 498 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (476 . 498) (#("LocationResponseObject" 0 22 (fontified nil)) . 476) (476 . 498) (#("Loca" 0 4 (fontified nil)) . 476) (476 . 480) (#("LocationResponseObject" 0 22 (fontified nil)) . -476) (476 . 498) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -476) (undo-tree-id140 . -4) (undo-tree-id141 . -4) 480) nil (25846 21948 605910 741000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -499) (499 . 500) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -499) (499 . 500) (498 . 500)) nil (25846 21948 605909 198000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -498) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . 1) (undo-tree-id136 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -499) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) 500) nil (25846 21948 605908 387000) 0 nil])
([nil nil ((836 . 839)) nil (25846 21948 605906 413000) 0 nil])
([nil nil ((839 . 851)) nil (25846 21948 605906 62000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -836) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("	" 0 1 (fontified t)) . -837) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("	" 0 1 (fontified t)) . -838) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -839) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -840) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -841) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -842) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -843) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -844) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#(" " 0 1 (fontified t)) . -845) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -846) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t)) . -847) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -848) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -849) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -850) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 851) nil (25846 21948 605903 297000) 0 nil])
([nil nil ((475 . 479)) nil (25846 21948 605891 344000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -813) (undo-tree-id102 . -1) 814) nil (25846 21948 605890 623000) 0 nil])
([nil nil ((#("		resultBody = LocationResponseObject{}
" 0 1 (fontified t) 1 2 (fontified t) 2 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:operator) 14 15 (fontified t) 15 37 (fontified t face tree-sitter-hl-face:type) 37 38 (fontified t face (rainbow-delimiters-depth-3-face)) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t)) . 800) (undo-tree-id91 . -39) (undo-tree-id92 . -38) (undo-tree-id93 . 1) (undo-tree-id94 . -39) (undo-tree-id95 . -39) (undo-tree-id96 . -39) (undo-tree-id97 . -39) (undo-tree-id98 . 2) (undo-tree-id99 . -39) (undo-tree-id100 . 3) (undo-tree-id101 . -38) 838) nil (25846 21948 605888 719000) 0 nil])
([nil nil ((#("	json.Unmarshal(body, &resultBody)
	return resultBody
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 15 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 20 (fontified t face tree-sitter-hl-face:variable) 20 22 (fontified t) 22 23 (fontified t face tree-sitter-hl-face:operator) 23 33 (fontified t face tree-sitter-hl-face:variable) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t) 35 36 (fontified t) 36 42 (fontified t face tree-sitter-hl-face:keyword) 42 43 (fontified t) 43 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t)) . 803) (undo-tree-id83 . -53) (undo-tree-id84 . -24) (undo-tree-id85 . -53) (undo-tree-id86 . -53) (undo-tree-id87 . -19) (undo-tree-id88 . -53) (undo-tree-id89 . -24) (undo-tree-id90 . -53) 856) nil (25846 21948 605494 20000) 0 nil])
([nil nil ((nil rear-nonsticky nil 800 . 801) (#("
" 0 1 (fontified nil)) . -853) (799 . 854) 796) nil (25846 21948 605489 531000) 0 nil])
([nil nil ((800 . 801) (835 . 836) 801) nil (25846 21948 605489 220000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -865) (865 . 866) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -865) (865 . 866) (858 . 866)) nil (25846 21948 605488 399000) 0 nil])
([nil nil ((866 . 868) (867 . 868) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 866) (866 . 868) (865 . 867)) nil (25846 21948 605487 908000) 0 nil])
([nil nil ((868 . 869)) nil (25846 21948 605487 96000) 0 nil])
([nil nil ((869 . 872)) nil (25846 21948 605486 766000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id82 . -1) 872) nil (25846 21948 605486 265000) 0 nil])
([nil nil ((871 . 873)) nil (25846 21948 605485 834000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id80 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -872) (undo-tree-id81 . -1) 873) nil (25846 21948 605485 153000) 0 nil])
([nil nil ((871 . 876)) nil (25846 21948 605484 191000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -872) (undo-tree-id76 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -873) (undo-tree-id77 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -874) (undo-tree-id78 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -875) (undo-tree-id79 . -1) 876) nil (25846 21948 605483 409000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id75 . -1) 872) nil (25846 21948 605481 916000) 0 nil])
([nil nil ((871 . 878)) nil (25846 21948 605481 495000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -875) (undo-tree-id72 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -876) (undo-tree-id73 . -1) (#(" " 0 1 (fontified t)) . -877) (undo-tree-id74 . -1) 878) nil (25846 21948 605480 985000) 0 nil])
([nil nil ((868 . 872)) nil (25846 21948 605479 993000) 0 nil])
([nil nil ((872 . 873)) nil (25846 21948 605479 672000) 0 nil])
([nil nil ((873 . 877)) nil (25846 21948 605479 311000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) #s(yas--field 2 888 893 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) nil nil)) (873 . 902) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 873) (873 . 912) (#("Unmaval" 0 4 (fontified nil) 4 7 (fontified nil face tree-sitter-hl-face:property)) . 873) (873 . 877) (#("Unmarshal" 0 9 (fontified nil)) . -873) (873 . 882) (#("Unma" 0 4 (fontified t face tree-sitter-hl-face:property)) . -873) (undo-tree-id70 . -4) (undo-tree-id71 . -4) 877) nil (25846 21948 605478 359000) 0 nil])
([nil nil ((#("data []byte" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 11 (fontified t face tree-sitter-hl-face:type)) . 883)) nil (25846 21948 605477 147000) 0 nil])
([nil nil ((883 . 886)) nil (25846 21948 605476 847000) 0 nil])
([nil nil ((apply yas--snippet-revive 873 894 #s(yas--snippet nil (#s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) #s(yas--field 2 888 893 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) nil nil))) nil (25846 21948 605476 175000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -888) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -889) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -890) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -891) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -892) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 893) nil (25846 21948 605474 141000) 0 nil])
([nil nil ((888 . 892)) nil (25846 21948 605469 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 889 899 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (889 . 899) (#("resultBody" 0 10 (fontified nil)) . 889) (889 . 899) (#("res" 0 3 (fontified nil)) . 889) (889 . 892) (#("resultBody" 0 10 (fontified nil)) . -889) (889 . 899) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -889) (undo-tree-id58 . -3) (undo-tree-id59 . -3) 892) nil (25846 21948 605468 410000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -900) (undo-tree-id54 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -901) (undo-tree-id55 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -902) (undo-tree-id56 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -903) (undo-tree-id57 . -1) 904) nil (25846 21948 605465 805000) 0 nil])
([nil nil ((900 . 903)) nil (25846 21948 605463 811000) 0 nil])
([nil nil ((903 . 910)) nil (25846 21948 605463 461000) 0 nil])
([nil nil ((910 . 913)) nil (25846 21948 605463 60000) 0 nil])
([nil nil ((apply yas--snippet-revive 910 920 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (910 . 920) (#("resultBody" 0 10 (fontified nil)) . 910) (910 . 920) (#("res" 0 3 (fontified nil)) . 910) (910 . 913) (#("resultBody" 0 10 (fontified nil)) . -910) (910 . 920) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -910) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 913) nil (25846 21948 605462 78000) 0 nil])
([nil nil ((91 . 93)) nil (25846 21948 605460 24000) 0 nil])
([nil nil ((93 . 97)) nil (25846 21948 605459 513000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -93) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -94) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -95) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -96) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 97) nil (25846 21948 605457 339000) 0 nil])
([nil nil ((94 . 98) (93 . 95) (#("\"" 0 1 (fontified nil)) . -93) (93 . 94)) nil (25846 21948 605374 19000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -103) (undo-tree-id312 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -104) (undo-tree-id313 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -105) (undo-tree-id314 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -106) (undo-tree-id315 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -107) (undo-tree-id316 . -1) 108 (t 25846 21948 617114 480000)) nil (25846 22080 648647 382000) 0 nil])
([nil nil ((103 . 106)) nil (25846 22080 648642 764000) 0 nil])
([nil nil ((98 . 103)) nil (25846 22080 648641 572000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -98) (undo-tree-id307 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -99) (undo-tree-id308 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -100) (undo-tree-id309 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -101) (undo-tree-id310 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -102) (undo-tree-id311 . -1) 103) nil (25846 22080 648639 168000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -139) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -140) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -141) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -142) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -143) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -144) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -145) (undo-tree-id306 . -1) 146) nil (25846 22080 648633 628000) 0 nil])
([nil nil ((139 . 142)) nil (25846 22080 648618 161000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 145 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (139 . 145) (#("Second" 0 6 (fontified nil)) . 139) (139 . 145) (#("Sec" 0 3 (fontified nil)) . 139) (139 . 142) (#("Second" 0 6 (fontified nil)) . -139) (139 . 145) (#("Sec" 0 3 (fontified t face tree-sitter-hl-face:property)) . -139) (undo-tree-id277 . -3) (undo-tree-id278 . -3) 142) nil (25846 22080 648616 188000) 0 nil])
([nil nil ((891 . 895)) nil (25846 22080 648611 339000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -892) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 893) nil (25846 22080 648609 416000) 0 nil])
([nil nil ((892 . 893)) nil (25846 22080 648587 808000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -891) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("V" 0 1 (fontified t face tree-sitter-hl-face:property)) . -892) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -893) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -894) (undo-tree-id371 . 1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 895 (t 25846 22080 660117 217000)) nil (25846 22129 5074 809000) 0 nil])
([nil nil ((441 . 443) (t 25846 22129 109095 585000)) nil (25846 23327 140024 391000) 0 nil])
([nil nil ((443 . 445)) nil (25846 23327 140023 309000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -443) (undo-tree-id18 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -444) (undo-tree-id19 . -1) 445) nil (25846 23327 140021 806000) 0 nil])
([nil nil ((443 . 449)) nil (25846 23327 140017 278000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -448) (undo-tree-id17 . -1) 449) nil (25846 23327 140016 406000) 0 nil])
([nil nil ((448 . 452)) nil (25846 23327 140014 693000) 0 nil])
([nil nil ((452 . 453)) nil (25846 23327 140013 561000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -448) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -449) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -450) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -451) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -452) (undo-tree-id16 . -1) 453) nil (25846 23327 140011 327000) 0 nil])
([nil nil ((448 . 449)) nil (25846 23327 140005 766000) 0 nil])
([nil nil ((449 . 469) (#("Get" 0 3 (fontified nil)) . -449) (449 . 452)) nil (25846 23327 140004 564000) 0 nil])
([nil nil ((#("	cache.Get(${1:key string})
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 10 (face tree-sitter-hl-face:type fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (face tree-sitter-hl-face:number fontified t) 14 15 (fontified t) 15 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (fontified t) 19 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (fontified t)) . 442) (undo-tree-id0 . -7) (undo-tree-id1 . -26) (undo-tree-id2 . 2) (undo-tree-id3 . -27) (undo-tree-id4 . 18) (undo-tree-id5 . -11) (undo-tree-id6 . 1) (undo-tree-id7 . -27) 468) nil (25846 23327 140000 386000) 0 nil])
([nil nil ((804 . 807) (t 25846 23327 147350 484000)) nil (25850 2008 915900 762000) 0 nil])
([nil nil ((807 . 810)) nil (25850 2008 915899 770000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -808) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -809) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 810) nil (25850 2008 915897 946000) 0 nil])
([nil nil ((808 . 813)) nil (25850 2008 915892 366000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) #s(yas--field 2 822 826 nil nil nil t nil)) nil 3 nil #s(yas--field 2 822 826 nil nil nil t nil) nil nil)) (813 . 856) (#("Add(${1:key string}, ${2:entry pokecache.CacheEntry})" 0 53 (fontified nil)) . 813) (813 . 866) (#("Add" 0 3 (fontified nil)) . -813) (813 . 816)) nil (25850 2008 915889 691000) 0 nil])
([nil nil ((818 . 820) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 818) (817 . 818)) nil (25850 2008 915885 954000) 0 nil])
([nil nil ((apply yas--snippet-revive 817 820 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) nil)) (817 . 820) (#("url" 0 3 (fontified nil)) . 817) (817 . 820) (#("url" 0 3 (fontified nil)) . 817) (817 . 820) (#("url" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -817) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 820) nil (25850 2008 915882 698000) 0 nil])
([nil nil ((823 . 826) (#("entry pokecache.CacheEntry" 0 5 (fontified nil face tree-sitter-hl-face:variable) 5 6 (fontified nil) 6 15 (fontified nil face tree-sitter-hl-face:variable) 15 16 (fontified nil) 16 26 (fontified nil face tree-sitter-hl-face:property)) . 823) (822 . 823)) nil (25850 2008 915877 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 826 #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 2 822 826 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 2 822 826 nil nil nil t nil) nil)) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -822) (undo-tree-id7 . -4) (undo-tree-id8 . -4) 826) nil (25850 2008 915876 115000) 0 nil])
([nil nil ((apply yas--snippet-revive 813 827 #s(yas--snippet nil (#s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) #s(yas--field 2 822 826 nil nil nil t nil)) nil 3 nil #s(yas--field 2 822 826 nil nil nil t nil) nil nil))) nil (25850 2008 915872 28000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -825) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 826) nil (25850 2008 915870 936000) 0 nil])
([nil nil ((825 . 826)) nil (25850 2008 915867 659000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 826 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -822) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -3) (undo-tree-id3 . -4) 826) nil (25850 2008 915863 662000) 0 nil])
([nil nil ((953 . 955) (t 25850 2008 924924 892000)) nil (25850 3238 135503 451000) 0 nil])
([nil nil ((955 . 963)) nil (25850 3238 135502 749000) 0 nil])
([nil nil ((963 . 972)) nil (25850 3238 135502 529000) 0 nil])
([nil nil ((972 . 975)) nil (25850 3238 135502 138000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -976) (976 . 977) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -976) (976 . 977) (975 . 977)) nil (25850 3238 135501 627000) 0 nil])
([nil nil ((976 . 986)) nil (25850 3238 135500 595000) 0 nil])
([nil nil ((987 . 992)) nil (25850 3238 135500 225000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face tree-sitter-hl-face:type)) . -988) (undo-tree-id40 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -989) (undo-tree-id41 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -990) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -991) (undo-tree-id43 . -1) 992) nil (25850 3238 135499 684000) 0 nil])
([nil nil ((386 . 388)) nil (25850 3238 135497 530000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1899 . 1900) (nil fontified nil 388 . 1900) (388 . 1900)) nil (25850 3238 135497 199000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -393) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -394) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -395) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -396) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:type)) . -397) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -398) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -399) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -400) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -401) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -402) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -403) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -404) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -405) (undo-tree-id39 . -1) 406) nil (25850 3238 135495 175000) 0 nil])
([nil nil ((393 . 404)) nil (25850 3238 135481 310000) 0 nil])
([nil nil ((404 . 419)) nil (25850 3238 135478 284000) 0 nil])
([nil nil ((2515 . 2517) (t 25850 3238 238244 332000)) nil (25850 3396 40719 253000) 0 nil])
([nil nil ((2517 . 2518) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2517) (2517 . 2518) (2516 . 2518)) nil (25850 3396 40718 271000) 0 nil])
([nil nil ((2506 . 2510)) nil (25850 3396 40717 189000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2503) (undo-tree-id111 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2504) (undo-tree-id112 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2505) (undo-tree-id113 . -1) (#("P" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2506) (undo-tree-id114 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2507) (undo-tree-id115 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2508) (undo-tree-id116 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2509) (undo-tree-id117 . -1) 2510) nil (25850 3396 40715 897000) 0 nil])
([nil nil ((2503 . 2515)) nil (25850 3396 40712 971000) 0 nil])
([nil nil ((2527 . 2530)) nil (25850 3396 40708 854000) 0 nil])
([nil nil ((2530 . 2531)) nil (25850 3396 40708 132000) 0 nil])
([nil nil ((2531 . 2534)) nil (25850 3396 40707 241000) 0 nil])
([nil nil ((2534 . 2538)) nil (25850 3396 40706 329000) 0 nil])
([nil nil ((65 . 72) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil)) #s(yas--field 3 2578 2586 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) nil nil)) (2538 . 2580) (#("Appendf(${1:b []byte}, ${2:format string}, ${3:a ...any})" 0 57 (fontified nil)) . 2538) (2538 . 2595) (#("Appendf" 0 7 (fontified nil)) . -2538) (2538 . 2545)) nil (25850 3396 40705 447000) 0 nil])
([nil nil ((apply yas--snippet-revive 2545 2587 #s(yas--snippet nil (#s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil)) #s(yas--field 3 2578 2586 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) nil nil))) nil (25850 3396 40703 684000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2593 . 2594) (nil fontified nil 2554 . 2594) (2554 . 2594) 2553) nil (25850 3396 40703 13000) 0 nil])
([nil nil ((#("https://pokeapi.co/api/v2/location-area/" 0 5 (fontified nil face tree-sitter-hl-face:variable) 5 6 (fontified nil) 6 39 (fontified nil face tree-sitter-hl-face:comment) 39 40 (fontified nil rear-nonsticky nil face tree-sitter-hl-face:comment)) . 2554) (undo-tree-id108 . -39) (undo-tree-id109 . -39) (undo-tree-id110 . -39) (nil rear-nonsticky t 2593 . 2594)) nil (25850 3396 40701 780000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2592 . 2593) (nil fontified nil 2553 . 2593) (2553 . 2593) 2552) nil (25850 3396 40700 187000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2594) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("[" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2595) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("]" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2596) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . 1) (undo-tree-id99 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2597) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2598) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2599) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2600) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 2601) nil (25850 3396 40698 104000) 0 nil])
([nil nil ((2553 . 2555) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2553) (2553 . 2554)) nil (25850 3396 40502 970000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2554) (undo-tree-id91 . -1) 2555) nil (25850 3396 40501 938000) 0 nil])
([nil nil ((2595 . 2596) (#("\"" 0 1 (fontified nil)) . -2595) (2595 . 2596)) nil (25850 3396 40500 555000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2594) (undo-tree-id88 . 1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 2595) nil (25850 3396 40499 884000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2599) (undo-tree-id67 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2600) (undo-tree-id68 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2601) (undo-tree-id69 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2602) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -2603) (undo-tree-id71 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2604) (undo-tree-id72 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2605) (undo-tree-id73 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2606) (undo-tree-id74 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2607) (undo-tree-id75 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2608) (undo-tree-id76 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2609) (undo-tree-id77 . -1) (#("," 0 1 (fontified t)) . -2610) (undo-tree-id78 . -1) (#(" " 0 1 (fontified t)) . -2611) (undo-tree-id79 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2612) (undo-tree-id80 . -1) (#(" " 0 1 (fontified t)) . -2613) (undo-tree-id81 . -1) (#("." 0 1 (fontified t)) . -2614) (undo-tree-id82 . -1) (#("." 0 1 (fontified t)) . -2615) (undo-tree-id83 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2616) (undo-tree-id84 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2617) (undo-tree-id85 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2618) (undo-tree-id86 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2619) (undo-tree-id87 . -1) 2620) nil (25850 3396 40496 77000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2597) (undo-tree-id65 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2598) (undo-tree-id66 . -1) 2599) nil (25850 3396 40485 568000) 0 nil])
([nil nil ((2597 . 2605)) nil (25850 3396 40484 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 2597 2609 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (2597 . 2609) (#("locationArea" 0 12 (fontified nil)) . 2597) (2597 . 2609) (#("location" 0 8 (fontified nil)) . 2597) (2597 . 2605) (#("locationArea" 0 12 (fontified nil)) . -2597) (2597 . 2609) (#("location" 0 8 (fontified t face tree-sitter-hl-face:variable)) . -2597) (undo-tree-id63 . -8) (undo-tree-id64 . -8) 2605) nil (25850 3396 40483 243000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2544) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2545) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2546) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2547) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2548) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2549) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2550) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("f" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2551) (undo-tree-id62 . -1) 2552) nil (25850 3396 40480 498000) 0 nil])
([nil nil ((2544 . 2545)) nil (25850 3396 40473 535000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil)) (2545 . 2585) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 2545) (2545 . 2595) (#("FormatString" 0 12 (fontified nil)) . -2545) (2545 . 2557)) nil (25850 3396 40472 874000) 0 nil])
([nil nil ((apply yas--snippet-revive 2545 2585 #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40472 243000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40471 862000) 0 nil])
([nil nil ((#("FormatString" 0 12 (fontified nil)) . 2545) (2545 . 2557) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 2545) (2545 . 2595) (#("FormatString(state fmt.State, verb rune)" 0 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 28 (fontified t face tree-sitter-hl-face:property) 28 30 (fontified t) 30 34 (fontified t face tree-sitter-hl-face:variable) 34 35 (fontified t) 35 39 (fontified t face tree-sitter-hl-face:variable) 39 40 (fontified t face (rainbow-delimiters-depth-2-face))) . 2545) (undo-tree-id44 . 27) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (apply yas--snippet-revive 2545 2585 #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40470 800000) 0 nil])
([nil nil ((2545 . 2552)) nil (25850 3396 40462 244000) 0 nil])
([nil nil ((2594 . 2596)) nil (25850 3396 40459 459000) 0 nil])
([nil nil ((2612 . 2614) (t 25850 3396 50315 798000)) nil (25850 3445 139648 299000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2615 . 2616) (#("
" 0 1 (fontified nil)) . -3097) (2614 . 3098) 2613) nil (25850 3445 139647 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2615 . 2616) (#("
" 0 1 (fontified nil)) . -2641) (2614 . 2642) 2613) nil (25850 3445 139646 275000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2613) (undo-tree-id120 . -1) (undo-tree-id121 . -1)) nil (25850 3445 139645 93000) 0 nil])
([nil nil ((2530 . 2535)) nil (25850 3445 139643 480000) 0 nil])
([nil nil ((apply yas--snippet-revive 2531 2557 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (2531 . 2557) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 2531) (2531 . 2557) (#("Loca" 0 4 (fontified nil)) . 2531) (2531 . 2535) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -2531) (2531 . 2557) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -2531) (undo-tree-id118 . -4) (undo-tree-id119 . -4) 2535) nil (25850 3445 139642 97000) 0 nil])
([nil nil ((2691 . 2692)) nil (25850 3445 139633 631000) 0 nil])
([nil nil ((2692 . 2693)) nil (25850 3445 139632 850000) 0 nil])
([nil nil ((2693 . 2694)) nil (25850 3445 139631 888000) 0 nil])
([nil current ((2694 . 2695)) nil (25850 3445 139628 682000) 0 nil])
nil

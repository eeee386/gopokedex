(undo-tree-save-format-version . 1)
"5936ac644a79cb69441dfedddf171b0cb3e137b8"
[nil nil nil nil (25843 12143 628078 190000) 0 nil]
([nil nil ((1 . 13) (t 25843 12116 507059 524000)) nil (25843 12143 628077 448000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -9) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("o" 0 1 (fontified t)) . -10) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("a" 0 1 (fontified t)) . -11) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("c" 0 1 (fontified t)) . -12) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 13) nil (25843 12143 628076 296000) 0 nil])
([nil nil ((9 . 15)) nil (25843 12143 628072 680000) 0 nil])
([nil nil ((15 . 16)) nil (25843 12143 628072 149000) 0 nil])
([nil nil ((9 . 16) (#("service" 0 7 (fontified nil)) . 9) (9 . 16) (#("service" 0 7 (fontified t)) . -9) (undo-tree-id23 . -7) (undo-tree-id24 . -7) 16) nil (25843 12143 628071 207000) 0 nil])
([nil nil ((16 . 18)) nil (25843 12143 628069 404000) 0 nil])
([nil nil ((18 . 25)) nil (25843 12143 628069 13000) 0 nil])
([nil nil ((25 . 26) (#(" " 0 1 (fontified nil)) . 24) (undo-tree-id22 . -1) (25 . 26)) nil (25843 12143 628068 282000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -24) (undo-tree-id20 . -1) (#("
" 0 1 (fontified t)) . -25) (undo-tree-id21 . -1) 26) nil (25843 12143 628066 789000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -26) (26 . 27) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -26) (26 . 27) (24 . 27)) nil (25843 12143 628065 86000) 0 nil])
([nil nil ((27 . 28) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 27) (27 . 28) (26 . 28)) nil (25843 12143 628063 864000) 0 nil])
([nil nil ((28 . 32)) nil (25843 12143 628062 692000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -31) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 32) nil (25843 12143 628061 780000) 0 nil])
([nil nil ((31 . 33)) nil (25843 12143 628057 863000) 0 nil])
([nil nil ((28 . 30) (#("\"" 0 1 (fontified nil)) . -28) (28 . 29)) nil (25843 12143 628057 132000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -29) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 30) nil (25843 12143 628056 90000) 0 nil])
([nil nil ((32 . 33) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25843 12143 627876 946000) 0 nil])
([nil nil ((36 . 42) (35 . 37) (#("\"" 0 1 (fontified nil)) . -35) (35 . 36)) nil (25843 12143 627875 804000) 0 nil])
([nil nil ((45 . 46)) nil (25843 12143 627871 637000) 0 nil])
([nil nil ((45 . 47) (t 25843 12143 728247 822000)) nil (25843 12283 697204 870000) 0 nil])
([nil nil ((47 . 50)) nil (25843 12283 697204 510000) 0 nil])
([nil nil ((50 . 52)) nil (25843 12283 697204 209000) 0 nil])
([nil nil ((43 . 45)) nil (25843 12283 697203 859000) 0 nil])
([nil nil ((46 . 54) (45 . 47) (#("\"" 0 1 (fontified nil)) . -45) (45 . 46)) nil (25843 12283 697203 518000) 0 nil])
([nil nil ((64 . 68)) nil (25843 12283 697203 157000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -67) (undo-tree-id794 . -1) 68) nil (25843 12283 697202 767000) 0 nil])
([nil nil ((67 . 76)) nil (25843 12283 697202 266000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -69) (undo-tree-id787 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -70) (undo-tree-id788 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -71) (undo-tree-id789 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -72) (undo-tree-id790 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -73) (undo-tree-id791 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -74) (undo-tree-id792 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -75) (undo-tree-id793 . -1) 76) nil (25843 12283 697201 23000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -81) (81 . 82) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -81) (81 . 82) (79 . 82) (#(")" 0 1 (fontified nil)) . -78) (78 . 79) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -78) (78 . 79) (69 . 79)) nil (25843 12283 697198 88000) 0 nil])
([nil nil ((82 . 83) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 82) (82 . 83) (81 . 83)) nil (25843 12283 697196 605000) 0 nil])
([nil nil ((nil rear-nonsticky nil 411 . 412) (nil fontified nil 83 . 412) (83 . 412) 82) nil (25843 12283 697196 144000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -83) (undo-tree-id786 . -1) 84) nil (25843 12283 697195 603000) 0 nil])
([nil nil ((43 . 45)) nil (25843 12283 697194 912000) 0 nil])
([nil nil ((46 . 49) (45 . 47) (#("\"" 0 1 (fontified nil)) . -45) (45 . 46)) nil (25843 12283 697194 341000) 0 nil])
([nil nil ((50 . 52)) nil (25843 12283 697193 950000) 0 nil])
([nil nil ((53 . 55) (52 . 54) (#("\"" 0 1 (fontified nil)) . -52) (52 . 53)) nil (25843 12283 697193 489000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -129) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -130) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -131) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -132) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -133) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -134) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("." 0 1 (face tree-sitter-hl-face:string fontified t)) . -135) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -136) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -137) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -138) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -139) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -140) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -141) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("b" 0 1 (face tree-sitter-hl-face:string fontified t)) . -142) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -143) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -144) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -145) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("." 0 1 (face tree-sitter-hl-face:string fontified t)) . -146) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -147) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("x" 0 1 (face tree-sitter-hl-face:string fontified t)) . -148) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -149) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) 150) nil (25843 12283 697187 228000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -118) (undo-tree-id33 . -1) (undo-tree-id34 . 1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -119) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -120) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -121) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(":" 0 1 (face tree-sitter-hl-face:string fontified t)) . -122) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -123) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -124) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -125) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -126) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -127) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("." 0 1 (face tree-sitter-hl-face:string fontified t)) . -128) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 129) nil (25843 12283 697053 220000) 0 nil])
([nil nil ((nil rear-nonsticky nil 156 . 157) (nil fontified nil 118 . 157) (118 . 157) 117) nil (25843 12283 696705 848000) 0 nil])
([nil nil ((#("	\"errors\"
" 0 1 (fontified t) 1 9 (face tree-sitter-hl-face:string fontified t) 9 10 (fontified t)) . 34) (undo-tree-id795 . -9) (undo-tree-id796 . -9) (undo-tree-id797 . -8) (undo-tree-id798 . -1) (undo-tree-id799 . -9) (undo-tree-id800 . 8) (undo-tree-id801 . -8) (undo-tree-id802 . -8) (undo-tree-id803 . -8) (undo-tree-id804 . -8) (undo-tree-id805 . -8) (undo-tree-id806 . -10) 42 (t 25843 12283 704430 660000)) nil (25843 12291 852683 399000) 0 nil])
([nil nil ((#("g" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -67) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) 68 (t 25843 12291 859181 485000)) nil (25843 12350 323767 458000) 0 nil])
([nil nil ((67 . 68)) nil (25843 12350 323754 254000) 0 nil])
([nil nil ((60 . 62) (t 25843 12350 422662 506000)) nil (25843 13949 414650 77000) 0 nil])
([nil nil ((62 . 63)) nil (25843 13949 414648 525000) 0 nil])
([nil nil ((nil rear-nonsticky nil 285 . 286) (nil fontified nil 63 . 286) (63 . 286) 62) nil (25843 13949 414647 873000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -62) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 63) nil (25843 13949 414646 651000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -66) (undo-tree-id8 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -67) (undo-tree-id9 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -68) (undo-tree-id10 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -69) (undo-tree-id11 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -70) (undo-tree-id12 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:type)) . -71) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -72) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -73) (undo-tree-id15 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -74) (undo-tree-id16 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -75) (undo-tree-id17 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -76) (undo-tree-id18 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -77) (undo-tree-id19 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -78) (undo-tree-id20 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -79) (undo-tree-id21 . -1) 80) nil (25843 13949 414643 475000) 0 nil])
([nil nil ((66 . 70)) nil (25843 13949 414595 155000) 0 nil])
([nil nil ((66 . 67)) nil (25843 13949 414594 654000) 0 nil])
([nil nil ((71 . 75)) nil (25843 13949 414594 163000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -73) (undo-tree-id6 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -74) (undo-tree-id7 . -1) 75) nil (25843 13949 414593 232000) 0 nil])
([nil nil ((73 . 79)) nil (25843 13949 414591 849000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:type)) . -67) (undo-tree-id2 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:type)) . -68) (undo-tree-id3 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -69) (undo-tree-id4 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:type)) . -70) (undo-tree-id5 . -1) 71) nil (25843 13949 414590 867000) 0 nil])
([nil nil ((75 . 76)) nil (25843 13949 414588 132000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:type)) . -75) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 76) nil (25843 13949 414587 341000) 0 nil])
([nil nil ((75 . 79)) nil (25843 13949 414559 98000) 0 nil])
([nil nil ((645 . 647) (t 25843 13949 423307 305000)) nil (25843 14194 991811 415000) 0 nil])
([nil nil ((647 . 657)) nil (25843 14194 991810 664000) 0 nil])
([nil nil ((654 . 657) (#("res" 0 3 (fontified nil)) . 654) (654 . 657) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -654) (undo-tree-id228 . -3) (undo-tree-id229 . -3) 657) nil (25843 14194 991810 173000) 0 nil])
([nil nil ((306 . 311)) nil (25843 14194 991808 520000) 0 nil])
([nil nil ((307 . 319) (#("Loca" 0 4 (fontified nil)) . 307) (307 . 311) (#("LocationJSON" 0 12 (fontified nil)) . -307) (307 . 319) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -307) (undo-tree-id226 . -4) (undo-tree-id227 . -4) 311) nil (25843 14194 991807 769000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -667) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -668) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -669) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 670) nil (25843 14194 991806 55000) 0 nil])
([nil nil ((667 . 671)) nil (25843 14194 991803 711000) 0 nil])
([nil nil ((58 . 60)) nil (25843 14194 991803 190000) 0 nil])
([nil nil ((61 . 65) (60 . 62) (#("\"" 0 1 (fontified nil)) . -60) (60 . 61)) nil (25843 14194 991802 549000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -63) (undo-tree-id218 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -64) (undo-tree-id219 . -1) 65) nil (25843 14194 991801 677000) 0 nil])
([nil nil ((63 . 65)) nil (25843 14194 991795 977000) 0 nil])
([nil nil ((61 . 69) (#("enco" 0 4 (fontified nil)) . 61) (61 . 65) (#("encoding" 0 8 (fontified nil)) . -61) (61 . 69) (#("enco" 0 4 (fontified t face tree-sitter-hl-face:string)) . -61) (undo-tree-id216 . -4) (undo-tree-id217 . -4) 65) nil (25843 14194 991795 416000) 0 nil])
([nil nil ((69 . 74)) nil (25843 14194 991794 203000) 0 nil])
([nil nil ((684 . 691)) nil (25843 14194 991793 702000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -689) (undo-tree-id214 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -690) (undo-tree-id215 . -1) 691) nil (25843 14194 991792 911000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:property)) . -689) (undo-tree-id210 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -690) (undo-tree-id211 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -691) (undo-tree-id212 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -692) (undo-tree-id213 . -1) 693) nil (25843 14194 991791 408000) 0 nil])
([nil nil ((689 . 692)) nil (25843 14194 991789 575000) 0 nil])
([nil nil ((689 . 728) (#("Unm" 0 3 (fontified nil)) . 689) (689 . 692) (#("Unmarshal" 0 9 (fontified nil)) . -689) (689 . 698) (#("Unm" 0 3 (fontified t face tree-sitter-hl-face:property)) . -689) (undo-tree-id208 . -3) (undo-tree-id209 . -3) 692) nil (25843 14194 991789 24000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -706) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#(" " 0 1 (fontified t)) . -707) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -708) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -709) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -710) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -711) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -712) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -713) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -714) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("," 0 1 (fontified t)) . -715) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -716) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("$" 0 1 (fontified t)) . -717) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -718) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("2" 0 1 (fontified t face tree-sitter-hl-face:number)) . -719) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#(":" 0 1 (fontified t)) . -720) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:type)) . -721) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -722) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -723) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -724) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -725) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -726) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . 1) (undo-tree-id207 . -1) 727) nil (25843 14194 991784 495000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -699) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -700) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -701) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#(":" 0 1 (fontified t)) . -702) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -703) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -704) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -705) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 706) nil (25843 14194 991748 538000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -698) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 699)) nil (25843 14194 991721 548000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -689) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -690) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -691) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -692) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -693) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -694) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("h" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -695) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -696) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -697) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 698) nil (25843 14194 991718 702000) 0 nil])
([nil nil ((689 . 692)) nil (25843 14194 991705 708000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) #s(yas--field 2 705 715 nil nil nil t nil)) nil 0 nil #s(yas--field 2 705 715 nil nil nil t nil) nil nil)) (689 . 718) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 689) (689 . 728) (#("Unm" 0 3 (fontified nil)) . 689) (689 . 692) (#("Unmarshal" 0 9 (fontified nil)) . -689) (689 . 698) (#("Unm" 0 3 (fontified t face tree-sitter-hl-face:property)) . -689) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 692) nil (25843 14194 991704 736000) 0 nil])
([nil nil ((700 . 703) (#("data []byte" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 7 (fontified nil face (rainbow-delimiters-depth-3-face)) 7 11 (fontified nil face tree-sitter-hl-face:type)) . 700) (699 . 700)) nil (25843 14194 991702 512000) 0 nil])
([nil nil ((apply yas--snippet-revive 699 703 #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) nil)) (699 . 703) (#("body" 0 4 (fontified nil)) . 699) (699 . 703) (#("body" 0 4 (fontified nil)) . 699) (699 . 703) (#("body" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -699) (undo-tree-id50 . -4) (undo-tree-id51 . -4) 703) nil (25843 14194 991701 420000) 0 nil])
([nil nil ((706 . 714) (#("v any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:variable)) . 706) (705 . 706)) nil (25843 14194 991700 7000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -713) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 714) nil (25843 14194 991698 625000) 0 nil])
([nil nil ((713 . 715)) nil (25843 14194 991696 942000) 0 nil])
([nil nil ((715 . 717)) nil (25843 14194 991696 471000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -715) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("	" 0 1 (fontified t)) . -716) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 717) nil (25843 14194 991695 790000) 0 nil])
([nil nil ((apply yas--snippet-revive 689 716 #s(yas--snippet nil (#s(yas--field 1 699 703 nil nil nil t #s(yas--field 2 705 715 nil nil nil t nil)) #s(yas--field 2 705 715 nil nil nil t nil)) nil 0 nil #s(yas--field 2 705 715 nil nil nil t nil) nil nil))) nil (25843 14194 991694 116000) 0 nil])
([nil nil ((675 . 677)) nil (25843 14194 991693 746000) 0 nil])
([nil nil ((677 . 688)) nil (25843 14194 991693 475000) 0 nil])
([nil nil ((688 . 695)) nil (25843 14194 991693 205000) 0 nil])
([nil nil ((apply yas--snippet-revive 691 703 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (691 . 703) (#("LocationJSON" 0 12 (fontified nil)) . 691) (691 . 703) (#("Loca" 0 4 (fontified nil)) . 691) (691 . 695) (#("LocationJSON" 0 12 (fontified nil)) . -691) (691 . 703) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -691) (undo-tree-id42 . -4) (undo-tree-id43 . -4) 695) nil (25843 14194 991692 654000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -704) (704 . 705) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -704) (704 . 705) (703 . 705)) nil (25843 14194 991690 410000) 0 nil])
([nil nil ((714 . 715)) nil (25843 14194 991689 27000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -714) (undo-tree-id41 . -1) 715) nil (25843 14194 991688 225000) 0 nil])
([nil nil ((#("json.Unmarshal(body, resultBody)" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 14 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 19 (fontified t face tree-sitter-hl-face:variable) 19 21 (fontified t) 21 31 (fontified t face tree-sitter-hl-face:variable) 31 32 (fontified t face (rainbow-delimiters-depth-2-face))) . 714) (undo-tree-id27 . -31) (undo-tree-id28 . -31) (undo-tree-id29 . 32) (undo-tree-id30 . -31) (undo-tree-id31 . -5) (undo-tree-id32 . -15) (undo-tree-id33 . -32) (undo-tree-id34 . -5) (undo-tree-id35 . -31) (undo-tree-id36 . -31) (undo-tree-id37 . 1) (undo-tree-id38 . -32) (undo-tree-id39 . 18) (undo-tree-id40 . -15) 745) nil (25843 14194 991686 943000) 0 nil])
([nil nil ((705 . 707)) nil (25843 14194 991679 459000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -706) (undo-tree-id26 . -1) 707) nil (25843 14194 991678 487000) 0 nil])
([nil nil ((nil rear-nonsticky nil 737 . 738) (nil fontified nil 706 . 738) (706 . 738)) nil (25843 14194 991671 284000) 0 nil])
([nil nil (737) nil (25843 14194 991670 452000) 0 nil])
([nil nil ((706 . 708)) nil (25843 14194 991667 467000) 0 nil])
([nil nil ((749 . 752) (t 25843 14194 997585 10000)) nil (25843 14199 580773 922000) 0 nil])
([nil nil ((apply yas--snippet-revive 749 759 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (749 . 759) (#("resultBody" 0 10 (fontified nil)) . 749) (749 . 759) (#("res" 0 3 (fontified nil)) . 749) (749 . 752) (#("resultBody" 0 10 (fontified nil)) . -749) (749 . 759) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -749) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -1) (undo-tree-id233 . -2) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) 752) nil (25843 14199 580770 595000) 0 nil])
([nil nil ((#("JSON" 0 4 (fontified t face tree-sitter-hl-face:type)) . 92) (undo-tree-id241 . -3) (undo-tree-id242 . -3) 95 (#("JSON" 0 4 (fontified t face tree-sitter-hl-face:type)) . 332) 324 (#("JSON" 0 4 (fontified t face tree-sitter-hl-face:type)) . 699) 691 (t 25843 14199 682522 412000)) nil (25843 14229 442597 210000) 0 nil])
([nil nil ((92 . 106) 91 (328 . 342) 320 (691 . 705) 683) nil (25843 14229 442586 720000) 0 nil])
([nil nil ((759 . 760) (t 25843 14229 449130 765000)) nil (25843 14342 40730 588000) 0 nil])
([nil nil ((332 . 335) (t 25843 14342 47735 914000)) nil (25843 14603 96965 223000) 0 nil])
([nil nil ((335 . 342)) nil (25843 14603 96964 912000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -338) (undo-tree-id406 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -339) (undo-tree-id407 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -340) (undo-tree-id408 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -341) (undo-tree-id409 . -1) 342) nil (25843 14603 96964 291000) 0 nil])
([nil nil ((338 . 342)) nil (25843 14603 96962 998000) 0 nil])
([nil nil ((311 . 313)) nil (25843 14603 96962 748000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -311) (undo-tree-id404 . -1) (#("
" 0 1 (fontified t)) . -312) (undo-tree-id405 . -1) 313) nil (25843 14603 96962 177000) 0 nil])
([nil nil ((368 . 370)) nil (25843 14603 96960 744000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -373) (373 . 374) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -373) (373 . 374) (370 . 374)) nil (25843 14603 96960 394000) 0 nil])
([nil nil ((373 . 376)) nil (25843 14603 96959 963000) 0 nil])
([nil nil ((377 . 379) (#("'" 0 1 (fontified nil)) . -377) (376 . 378)) nil (25843 14603 96959 582000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -377) (undo-tree-id403 . -1) (#("'" 0 1 (fontified t)) . 378)) nil (25843 14603 96959 71000) 0 nil])
([nil nil ((377 . 383)) nil (25843 14603 96958 520000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -386) (386 . 387) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -386) (386 . 387) (384 . 387)) nil (25843 14603 96958 139000) 0 nil])
([nil nil ((387 . 389) (388 . 389) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 387) (387 . 389) (386 . 388)) nil (25843 14603 96957 418000) 0 nil])
([nil nil ((389 . 395)) nil (25843 14603 96956 647000) 0 nil])
([nil nil ((nil rear-nonsticky nil 435 . 436) (nil fontified nil 395 . 436) (395 . 436) 394) nil (25843 14603 96956 386000) 0 nil])
([nil nil ((#("	if(url == nil) {
		url = \"https://pokeapi.co/api/v2/location-area\"
	}
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 10 (fontified t face tree-sitter-hl-face:operator) 10 11 (fontified t) 11 14 (fontified t face tree-sitter-hl-face:constant\.builtin) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t) 18 20 (fontified t) 20 23 (fontified t face tree-sitter-hl-face:variable) 23 24 (fontified t) 24 25 (fontified t face tree-sitter-hl-face:operator) 25 26 (fontified t) 26 66 (fontified t face tree-sitter-hl-face:string) 66 67 (fontified t rear-nonsticky t face tree-sitter-hl-face:string) 67 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-2-face)) 70 71 (fontified t)) . 369) (undo-tree-id395 . -69) (undo-tree-id396 . -70) (undo-tree-id397 . -69) (undo-tree-id398 . -1) (undo-tree-id399 . -69) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -69) 370) nil (25843 14603 96955 675000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -332) (undo-tree-id385 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -333) (undo-tree-id386 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -334) (undo-tree-id387 . -1) (#(" " 0 1 (fontified t)) . -335) (undo-tree-id388 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -336) (undo-tree-id389 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -337) (undo-tree-id390 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -338) (undo-tree-id391 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -339) (undo-tree-id392 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -340) (undo-tree-id393 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -341) (undo-tree-id394 . -1) 342) nil (25843 14603 96950 645000) 0 nil])
([nil nil ((332 . 346)) nil (25843 14603 96947 239000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -345) (undo-tree-id384 . -1) 346) nil (25843 14603 96946 718000) 0 nil])
([nil nil ((345 . 347)) nil (25843 14603 96946 107000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -346) (undo-tree-id383 . -1) 347) nil (25843 14603 96945 696000) 0 nil])
([nil nil ((346 . 347)) nil (25843 14603 96945 15000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -345) (undo-tree-id381 . -1) (#(" " 0 1 (fontified t)) . -346) (undo-tree-id382 . -1) 347) nil (25843 14603 96944 614000) 0 nil])
([nil nil ((345 . 351)) nil (25843 14603 96943 602000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -345) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -346) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -347) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -348) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -349) (undo-tree-id379 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -350) (undo-tree-id380 . -1) 351) nil (25843 14603 96942 861000) 0 nil])
([nil nil ((338 . 345)) nil (25843 14603 96937 952000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -346) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -347) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -348) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -349) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -350) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -351) (undo-tree-id369 . -1) (undo-tree-id370 . -1) 352) nil (25843 14603 96937 50000) 0 nil])
([nil nil ((346 . 349)) nil (25843 14603 96933 123000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -332) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -333) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("f" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -334) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -335) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -336) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -337) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("," 0 1 (fontified t)) . -338) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#(" " 0 1 (fontified t)) . -339) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -340) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -341) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -342) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -343) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -344) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#(" " 0 1 (fontified t)) . -345) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -346) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -347) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -348) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 349) nil (25843 14603 96930 748000) 0 nil])
([nil nil ((332 . 344)) nil (25843 14603 96832 84000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -343) (undo-tree-id324 . -1) 344) nil (25843 14603 96831 683000) 0 nil])
([nil nil ((343 . 347)) nil (25843 14603 96831 42000) 0 nil])
([nil nil ((apply yas--snippet-revive 343 365 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (343 . 365) (#("LocationResponseObject" 0 22 (fontified nil)) . 343) (343 . 365) (#("Loca" 0 4 (fontified nil)) . 343) (343 . 347) (#("LocationResponseObject" 0 22 (fontified nil)) . -343) (343 . 365) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -343) (undo-tree-id322 . -4) (undo-tree-id323 . -4) 347) nil (25843 14603 96830 90000) 0 nil])
([nil nil ((391 . 393)) nil (25843 14603 96827 615000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -396) (396 . 397) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -396) (396 . 397) (393 . 397)) nil (25843 14603 96827 14000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -344) (undo-tree-id301 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -345) (undo-tree-id302 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -346) (undo-tree-id303 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -347) (undo-tree-id304 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -348) (undo-tree-id305 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -349) (undo-tree-id306 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -350) (undo-tree-id307 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -351) (undo-tree-id308 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -352) (undo-tree-id309 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -353) (undo-tree-id310 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -354) (undo-tree-id311 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -355) (undo-tree-id312 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -356) (undo-tree-id313 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -357) (undo-tree-id314 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -358) (undo-tree-id315 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -359) (undo-tree-id316 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -360) (undo-tree-id317 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -361) (undo-tree-id318 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -362) (undo-tree-id319 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -363) (undo-tree-id320 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -364) (undo-tree-id321 . -1) 365) nil (25843 14603 96824 820000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -332) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -333) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -334) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:type)) . -335) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -336) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -337) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -338) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -339) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -340) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -341) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#(" " 0 1 (fontified t)) . -342) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:type)) . -343) (undo-tree-id300 . -1) 344) nil (25843 14603 96814 831000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -321) (undo-tree-id269 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -322) (undo-tree-id270 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -323) (undo-tree-id271 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -324) (undo-tree-id272 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -325) (undo-tree-id273 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -326) (undo-tree-id274 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -327) (undo-tree-id275 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -328) (undo-tree-id276 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -329) (undo-tree-id277 . -1) 330) nil (25843 14603 96804 642000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -349) (undo-tree-id261 . -1) (#("	" 0 1 (fontified t)) . -350) (undo-tree-id262 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -351) (undo-tree-id263 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -352) (undo-tree-id264 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -353) (undo-tree-id265 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -354) (undo-tree-id266 . -1) (undo-tree-id267 . 1) (undo-tree-id268 . -1) 355) nil (25843 14603 96799 643000) 0 nil])
([nil nil ((323 . 334)) nil (25843 14603 96795 455000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -326) (undo-tree-id260 . -1) 327) nil (25843 14603 96794 914000) 0 nil])
([nil nil ((#("https://pokeapi.co/api/v2/location-area" 0 5 (fontified t face tree-sitter-hl-face:string) 5 6 (fontified t face tree-sitter-hl-face:string) 6 39 (fontified t face tree-sitter-hl-face:string)) . 383) (undo-tree-id255 . -38) (undo-tree-id256 . -38) (undo-tree-id257 . -38) (undo-tree-id258 . -39) (undo-tree-id259 . -38)) nil (25843 14603 96793 932000) 0 nil])
([nil nil ((312 . 314)) nil (25843 14603 96791 578000) 0 nil])
([nil nil ((313 . 317)) nil (25843 14603 96791 287000) 0 nil])
([nil nil ((326 . 328) (#("\"" 0 1 (fontified nil)) . -326) (317 . 327)) nil (25843 14603 96790 776000) 0 nil])
([nil nil ((nil rear-nonsticky nil 365 . 366) (nil fontified nil 327 . 366) (327 . 366) 326) nil (25843 14603 96790 145000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -438) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -439) (undo-tree-id253 . 1) (undo-tree-id254 . -1) 440) nil (25843 14603 96788 853000) 0 nil])
([nil nil ((438 . 441)) nil (25843 14603 96784 695000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -323) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 324) nil (25843 14603 96781 900000) 0 nil])
([nil nil ((366 . 368) (t 25843 14603 104911 289000)) nil (25843 15136 496482 106000) 0 nil])
([nil nil ((368 . 371)) nil (25843 15136 496480 864000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -368) (undo-tree-id444 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -369) (undo-tree-id445 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -370) (undo-tree-id446 . -1) 371) nil (25843 15136 496479 912000) 0 nil])
([nil nil ((368 . 383)) nil (25843 15136 496477 989000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -382) (undo-tree-id443 . -1) 383) nil (25843 15136 496477 277000) 0 nil])
([nil nil ((382 . 389)) nil (25843 15136 496476 65000) 0 nil])
([nil nil ((392 . 394) (#("\"" 0 1 (fontified nil)) . -392) (391 . 393) (#(")" 0 1 (fontified nil)) . -390) (390 . 391) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -390) (390 . 391) (389 . 391)) nil (25843 15136 496474 973000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -392) (undo-tree-id442 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 393)) nil (25843 15136 496473 490000) 0 nil])
([nil nil ((392 . 396)) nil (25843 15136 496472 278000) 0 nil])
([nil nil ((apply yas--snippet-revive 392 414 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (392 . 414) (#("LocationResponseObject" 0 22 (fontified nil)) . 392) (392 . 414) (#("Loca" 0 4 (fontified nil)) . 392) (392 . 396) (#("LocationResponseObject" 0 22 (fontified nil)) . -392) (392 . 414) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -392) (undo-tree-id440 . -4) (undo-tree-id441 . -4) 396) nil (25843 15136 496471 256000) 0 nil])
([nil nil ((424 . 432)) nil (25843 15136 496468 601000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -416) (416 . 417) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -416) (416 . 417) (414 . 417)) nil (25843 15136 496467 689000) 0 nil])
([nil nil ((417 . 418) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 417) (417 . 418) (416 . 418)) nil (25843 15136 496466 497000) 0 nil])
([nil nil ((#("const url = \"https://pokeapi.co/api/v2/location-area\"
" 0 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 13 (fontified t face tree-sitter-hl-face:string) 13 51 (fontified t face tree-sitter-hl-face:string) 51 52 (fontified t rear-nonsticky t face tree-sitter-hl-face:string) 52 53 (fontified t face tree-sitter-hl-face:string) 53 54 (fontified t)) . 313) (undo-tree-id436 . -53) (undo-tree-id437 . 52) (undo-tree-id438 . -53) (undo-tree-id439 . -1) 314) nil (25843 15136 496464 894000) 0 nil])
([nil nil ((#("

func GetPrevLocations() LocationResponseObject {
	
}
" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t face tree-sitter-hl-face:keyword) 6 7 (fontified t) 7 23 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t) 26 48 (fontified t face tree-sitter-hl-face:type) 48 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-1-face)) 54 55 (fontified t)) . 312) (undo-tree-id410 . -1) (undo-tree-id411 . -53) (undo-tree-id412 . -54) (undo-tree-id413 . 54) (undo-tree-id414 . -53) (undo-tree-id415 . -1) (undo-tree-id416 . -52) (undo-tree-id417 . -52) (undo-tree-id418 . -53) (undo-tree-id419 . -54) (undo-tree-id420 . -7) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -53) (undo-tree-id428 . -53) (undo-tree-id429 . -53) (undo-tree-id430 . -53) (undo-tree-id431 . -55) (undo-tree-id432 . -53) (undo-tree-id433 . -53) (undo-tree-id434 . -53) (undo-tree-id435 . -55)) nil (25843 15136 496460 536000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -189) (undo-tree-id462 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -190) (undo-tree-id463 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -191) (undo-tree-id464 . -1) 192 (t 25843 15136 598162 691000)) nil (25843 15762 784008 259000) 0 nil])
([nil nil ((189 . 195)) nil (25843 15762 784006 405000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -196) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t)) . -197) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#(" " 0 1 (fontified t)) . -198) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) 199) nil (25843 15762 784003 580000) 0 nil])
([nil nil ((#("	fmt.Printf(\"%s\", body)
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 11 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face tree-sitter-hl-face:string) 13 14 (fontified t face tree-sitter-hl-face:string) 14 15 (fontified t face tree-sitter-hl-face:string) 15 16 (fontified t face tree-sitter-hl-face:string) 16 18 (fontified t) 18 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t)) . 643) (undo-tree-id465 . -23) (undo-tree-id466 . -23) (undo-tree-id467 . -16) (undo-tree-id468 . -16) (undo-tree-id469 . -16) (undo-tree-id470 . -16) (undo-tree-id471 . -16) (undo-tree-id472 . -16) (undo-tree-id473 . -16) (undo-tree-id474 . -16) (undo-tree-id475 . -16) (undo-tree-id476 . -24) 659 (t 25843 15762 791322 909000)) nil (25843 16195 811020 984000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (t 25843 16195 913137 427000)) nil (25843 16647 968486 465000) 0 nil])
([nil nil ((33 . 34)) nil (25843 16647 968485 93000) 0 nil])
([nil nil ((#("	\"fmt\"
" 0 1 (fontified t) 1 6 (fontified t face tree-sitter-hl-face:string) 6 7 (fontified t)) . 27) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -5) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -5) (undo-tree-id509 . -5) (undo-tree-id510 . -1) (undo-tree-id511 . -6) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . 5) (undo-tree-id515 . -5) (undo-tree-id516 . -1) (undo-tree-id517 . -6) (undo-tree-id518 . -5) (undo-tree-id519 . -5) (undo-tree-id520 . -5) (undo-tree-id521 . -5) (undo-tree-id522 . -5) (undo-tree-id523 . -7) 32 (t 25843 16195 913137 427000)) nil (25843 16647 968482 528000) 0 nil])
([nil nil ((360 . 362) (t 25843 16647 970863 910000)) nil (25846 21948 606045 500000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -365) (365 . 366) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -365) (365 . 366) (362 . 366)) nil (25846 21948 606044 378000) 0 nil])
([nil nil ((365 . 368)) nil (25846 21948 606042 435000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -365) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -366) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -367) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 368) nil (25846 21948 606041 974000) 0 nil])
([nil nil ((70 . 72)) nil (25846 21948 606039 479000) 0 nil])
([nil nil ((72 . 73)) nil (25846 21948 606038 788000) 0 nil])
([nil nil ((73 . 76)) nil (25846 21948 606038 16000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -72) (undo-tree-id260 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -73) (undo-tree-id261 . -1) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -74) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t)) . -75) (undo-tree-id263 . -1) 76) nil (25846 21948 606036 353000) 0 nil])
([nil nil ((72 . 73)) nil (25846 21948 606034 69000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -72) (undo-tree-id259 . -1) 73) nil (25846 21948 606032 996000) 0 nil])
([nil nil ((72 . 76)) nil (25846 21948 606031 854000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -72) (undo-tree-id255 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -73) (undo-tree-id256 . -1) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -74) (undo-tree-id257 . -1) (#(" " 0 1 (fontified t)) . -75) (undo-tree-id258 . -1) 76) nil (25846 21948 606030 261000) 0 nil])
([nil nil ((72 . 81)) nil (25846 21948 606027 596000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -79) (undo-tree-id253 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -80) (undo-tree-id254 . -1) 81) nil (25846 21948 606026 394000) 0 nil])
([nil nil ((79 . 84)) nil (25846 21948 606023 458000) 0 nil])
([nil nil ((84 . 89)) nil (25846 21948 606022 867000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -88) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 89) nil (25846 21948 606022 85000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -86) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -87) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 88) nil (25846 21948 606020 903000) 0 nil])
([nil nil ((68 . 70)) nil (25846 21948 606018 849000) 0 nil])
([nil nil ((71 . 73) (70 . 72) (#("\"" 0 1 (fontified nil)) . -70) (70 . 71)) nil (25846 21948 606018 519000) 0 nil])
([nil nil ((73 . 79)) nil (25846 21948 606017 617000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -73) (undo-tree-id241 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -74) (undo-tree-id242 . -1) (#("k" 0 1 (face tree-sitter-hl-face:string fontified t)) . -75) (undo-tree-id243 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -76) (undo-tree-id244 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id245 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -78) (undo-tree-id246 . -1) 79) nil (25846 21948 606016 184000) 0 nil])
([nil nil ((73 . 76)) nil (25846 21948 606013 709000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -71) (undo-tree-id236 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -72) (undo-tree-id237 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -73) (undo-tree-id238 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -74) (undo-tree-id239 . -1) (#("k" 0 1 (face tree-sitter-hl-face:string fontified t)) . -75) (undo-tree-id240 . -1) 76) nil (25846 21948 606012 878000) 0 nil])
([nil nil ((71 . 73)) nil (25846 21948 606010 543000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:string fontified t)) . -71) (undo-tree-id234 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -72) (undo-tree-id235 . -1) 73) nil (25846 21948 606009 822000) 0 nil])
([nil nil ((71 . 74)) nil (25846 21948 606008 499000) 0 nil])
([nil nil ((71 . 81) (#("GoP" 0 3 (fontified nil)) . 71) (71 . 74) (#("GoPokedex/" 0 10 (fontified nil)) . -71) (71 . 81) (#("GoP" 0 3 (face tree-sitter-hl-face:string fontified t)) . -71) (undo-tree-id232 . -3) (undo-tree-id233 . -3) 74) nil (25846 21948 606007 287000) 0 nil])
([nil nil ((81 . 84)) nil (25846 21948 606005 193000) 0 nil])
([nil nil ((81 . 90) (#("pok" 0 3 (fontified nil)) . 81) (81 . 84) (#("pokecache" 0 9 (fontified nil)) . -81) (81 . 90) (#("pok" 0 3 (face tree-sitter-hl-face:string fontified t)) . -81) (undo-tree-id230 . -3) (undo-tree-id231 . -3) 84) nil (25846 21948 606004 291000) 0 nil])
([nil nil ((109 . 113)) nil (25846 21948 606002 237000) 0 nil])
([nil nil ((109 . 118) (#("poke" 0 4 (fontified nil)) . 109) (109 . 113) (#("pokecache" 0 9 (fontified nil)) . -109) (109 . 118) (#("poke" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -109) (undo-tree-id228 . -4) (undo-tree-id229 . -4) 113) nil (25846 21948 606001 456000) 0 nil])
([nil nil ((118 . 119)) nil (25846 21948 605999 893000) 0 nil])
([nil nil ((119 . 156) (#("NewCache" 0 8 (fontified nil)) . -119) (119 . 127)) nil (25846 21948 605999 342000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -134) (undo-tree-id205 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -135) (undo-tree-id206 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -136) (undo-tree-id207 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -137) (undo-tree-id208 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -138) (undo-tree-id209 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -139) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -140) (undo-tree-id211 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -141) (undo-tree-id212 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -142) (undo-tree-id213 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -143) (undo-tree-id214 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -144) (undo-tree-id215 . -1) (#("." 0 1 (fontified t)) . -145) (undo-tree-id216 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -146) (undo-tree-id217 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -147) (undo-tree-id218 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -148) (undo-tree-id219 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -149) (undo-tree-id220 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -150) (undo-tree-id221 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -151) (undo-tree-id222 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -152) (undo-tree-id223 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -153) (undo-tree-id224 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -154) (undo-tree-id225 . -1) (undo-tree-id226 . 1) (undo-tree-id227 . -1) 155) nil (25846 21948 605995 43000) 0 nil])
([nil nil ((#("$" 0 1 (fontified nil)) . -128) (undo-tree-id199 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -129) (undo-tree-id200 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -130) (undo-tree-id201 . -1) (#(":" 0 1 (fontified t)) . -131) (undo-tree-id202 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -132) (undo-tree-id203 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -133) (undo-tree-id204 . -1) 134) nil (25846 21948 605978 91000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -127) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified nil)) . 128) (undo-tree-id198 . -1)) nil (25846 21948 605975 826000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -124) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -125) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -126) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 127) nil (25846 21948 605974 294000) 0 nil])
([nil nil ((124 . 125)) nil (25846 21948 605971 508000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 128 146 nil nil nil t nil)) nil 27 nil #s(yas--field 1 128 146 nil nil nil t nil) nil nil)) (119 . 151) (#("NewCache(${1:interval time.Duration})" 0 37 (fontified nil)) . 119) (119 . 156) (#("NewCac" 0 6 (fontified nil)) . 119) (119 . 125) (#("NewCache" 0 8 (fontified nil)) . -119) (119 . 127) (#("NewCac" 0 6 (face tree-sitter-hl-face:property fontified t)) . -119) (undo-tree-id188 . -6) (undo-tree-id189 . -6) 125) nil (25846 21948 605970 596000) 0 nil])
([nil nil ((129 . 133) (#("interval time.Duration" 0 8 (face tree-sitter-hl-face:variable fontified nil) 8 9 (fontified nil) 9 13 (face tree-sitter-hl-face:variable fontified nil) 13 14 (fontified nil) 14 22 (face tree-sitter-hl-face:property fontified nil)) . 129) (128 . 129)) nil (25846 21948 605969 214000) 0 nil])
([nil nil ((133 . 136)) nil (25846 21948 605968 292000) 0 nil])
([nil nil ((136 . 137)) nil (25846 21948 605967 821000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -135) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -136) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 137) nil (25846 21948 605967 140000) 0 nil])
([nil nil ((135 . 139)) nil (25846 21948 605964 404000) 0 nil])
([nil nil ((139 . 140)) nil (25846 21948 605963 352000) 0 nil])
([nil nil ((140 . 141)) nil (25846 21948 605962 882000) 0 nil])
([nil nil ((141 . 146)) nil (25846 21948 605962 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 119 147 #s(yas--snippet nil (#s(yas--field 1 128 146 nil nil nil t nil)) nil 27 nil #s(yas--field 1 128 146 nil nil nil t nil) nil nil))) nil (25846 21948 605961 479000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -441) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 442)) nil (25846 21948 605960 627000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -439) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -440) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 441) nil (25846 21948 605958 774000) 0 nil])
([nil nil ((439 . 442)) nil (25846 21948 605955 838000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -441) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 442) nil (25846 21948 605955 217000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -439) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -440) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 441) nil (25846 21948 605953 974000) 0 nil])
([nil nil ((439 . 449)) nil (25846 21948 605952 171000) 0 nil])
([nil nil ((#("+" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -448) (undo-tree-id171 . -1) 449) nil (25846 21948 605951 99000) 0 nil])
([nil nil ((448 . 450)) nil (25846 21948 605950 177000) 0 nil])
([nil nil ((450 . 453)) nil (25846 21948 605949 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 450 455 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (450 . 455) (#("cache" 0 5 (fontified nil)) . 450) (450 . 455) (#("cac" 0 3 (fontified nil)) . 450) (450 . 453) (#("cache" 0 5 (fontified nil)) . -450) (450 . 455) (#("cac" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -450) (undo-tree-id169 . -3) (undo-tree-id170 . -3) 453) nil (25846 21948 605948 794000) 0 nil])
([nil nil ((455 . 457)) nil (25846 21948 605945 598000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -456) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 457) nil (25846 21948 605944 857000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -455) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 456) nil (25846 21948 605943 935000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -460) (460 . 461) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -460) (460 . 461) (455 . 461)) nil (25846 21948 605942 883000) 0 nil])
([nil nil ((460 . 463)) nil (25846 21948 605942 552000) 0 nil])
([nil nil ((apply yas--snippet-revive 460 463 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (460 . 463) (#("url" 0 3 (fontified nil)) . 460) (460 . 463) (#("url" 0 3 (fontified nil)) . 460) (460 . 463) (#("url" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -460) (undo-tree-id163 . -3) (undo-tree-id164 . -3) 463) nil (25846 21948 605941 510000) 0 nil])
([nil nil ((464 . 466)) nil (25846 21948 605939 617000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -469) (469 . 470) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -469) (469 . 470) (466 . 470)) nil (25846 21948 605939 46000) 0 nil])
([nil nil ((469 . 472)) nil (25846 21948 605938 445000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -475) (475 . 476) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -475) (475 . 476) (473 . 476)) nil (25846 21948 605938 44000) 0 nil])
([nil nil ((476 . 478) (477 . 478) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 476) (476 . 478) (475 . 477)) nil (25846 21948 605937 272000) 0 nil])
([nil nil ((#("	res, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	body, err := io.ReadAll(res.Body)
	res.Body.Close()
	if res.StatusCode > 299 {
		log.Fatalf(\"Response failed with status code: %d and\\nbody: %s\\n\", res.StatusCode, body)
	}
	if err != nil {
		log.Fatal(err)
	}
	resultBody := LocationResponseObject{}
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 6 (fontified t) 6 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 12 (face tree-sitter-hl-face:operator fontified t) 12 13 (fontified t) 13 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 21 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 30 (face tree-sitter-hl-face:keyword fontified t) 30 31 (fontified t) 31 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (fontified t) 35 37 (face tree-sitter-hl-face:operator fontified t) 37 38 (fontified t) 38 41 (face tree-sitter-hl-face:constant\.builtin fontified t) 41 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 46 (fontified t) 46 49 (face tree-sitter-hl-face:variable fontified t) 49 50 (fontified t) 50 55 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 59 (face tree-sitter-hl-face:variable fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 65 (fontified t) 65 69 (face tree-sitter-hl-face:variable fontified t) 69 71 (fontified t) 71 74 (face tree-sitter-hl-face:variable fontified t) 74 75 (fontified t) 75 77 (face tree-sitter-hl-face:operator fontified t) 77 78 (fontified t) 78 80 (face tree-sitter-hl-face:variable fontified t) 80 81 (fontified t) 81 88 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 92 (face tree-sitter-hl-face:variable fontified t) 92 93 (fontified t) 93 97 (face tree-sitter-hl-face:property fontified t) 97 98 (face (rainbow-delimiters-depth-2-face) fontified t) 98 100 (fontified t) 100 103 (face tree-sitter-hl-face:variable fontified t) 103 104 (fontified t) 104 108 (face tree-sitter-hl-face:property fontified t) 108 109 (fontified t) 109 114 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 116 (face (rainbow-delimiters-depth-2-face) fontified t) 116 118 (fontified t) 118 120 (face tree-sitter-hl-face:keyword fontified t) 120 121 (fontified t) 121 124 (face tree-sitter-hl-face:variable fontified t) 124 125 (fontified t) 125 135 (face tree-sitter-hl-face:property fontified t) 135 136 (fontified t) 136 137 (face tree-sitter-hl-face:operator fontified t) 137 138 (fontified t) 138 141 (face tree-sitter-hl-face:number fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-2-face) fontified t) 143 146 (fontified t) 146 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 156 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t) 157 198 (face tree-sitter-hl-face:string fontified t) 198 199 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 199 200 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 200 208 (face tree-sitter-hl-face:string fontified t) 208 209 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 209 210 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 210 211 (face tree-sitter-hl-face:string fontified t) 211 213 (fontified t) 213 216 (face tree-sitter-hl-face:variable fontified t) 216 217 (fontified t) 217 227 (face tree-sitter-hl-face:property fontified t) 227 229 (fontified t) 229 233 (face tree-sitter-hl-face:variable fontified t) 233 234 (face (rainbow-delimiters-depth-3-face) fontified t) 234 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-2-face) fontified t) 237 239 (fontified t) 239 241 (face tree-sitter-hl-face:keyword fontified t) 241 242 (fontified t) 242 245 (face tree-sitter-hl-face:variable fontified t) 245 246 (fontified t) 246 248 (face tree-sitter-hl-face:operator fontified t) 248 249 (fontified t) 249 252 (face tree-sitter-hl-face:constant\.builtin fontified t) 252 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-2-face) fontified t) 254 257 (fontified t) 257 260 (face tree-sitter-hl-face:variable fontified t) 260 261 (fontified t) 261 266 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 266 267 (face (rainbow-delimiters-depth-3-face) fontified t) 267 270 (face tree-sitter-hl-face:variable fontified t) 270 271 (face (rainbow-delimiters-depth-3-face) fontified t) 271 273 (fontified t) 273 274 (face (rainbow-delimiters-depth-2-face) fontified t) 274 276 (fontified t) 276 286 (face tree-sitter-hl-face:variable fontified t) 286 287 (fontified t) 287 289 (face tree-sitter-hl-face:operator fontified t) 289 290 (fontified t) 290 312 (face tree-sitter-hl-face:type fontified t) 312 313 (face (rainbow-delimiters-depth-2-face) fontified t) 313 314 (face (rainbow-delimiters-depth-2-face) fontified t) 314 315 (fontified t)) . 482) (undo-tree-id149 . -270) (undo-tree-id150 . -284) (undo-tree-id151 . -270) (undo-tree-id152 . -270) (undo-tree-id153 . -270) (undo-tree-id154 . -284) (undo-tree-id155 . -9) (undo-tree-id156 . -9) (undo-tree-id157 . -274) (undo-tree-id158 . -285) (undo-tree-id159 . 30) (undo-tree-id160 . -9) (undo-tree-id161 . -284) (undo-tree-id162 . -314) 491) nil (25846 21948 605936 260000) 0 nil])
([nil nil ((nil rear-nonsticky nil 479 . 480) (#("
" 0 1 (fontified nil)) . -793) (478 . 794) 477) nil (25846 21948 605929 638000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 476) (undo-tree-id147 . -1) (undo-tree-id148 . -2) 477) nil (25846 21948 605928 315000) 0 nil])
([nil nil ((29 . 30) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -29) 30 (31 . 32) (#("g\"
	\"i" 0 2 (face tree-sitter-hl-face:string fontified t) 2 4 (fontified t) 4 6 (face tree-sitter-hl-face:string fontified t)) . -31) 37 (38 . 39) (#("\"
	\"n" 0 1 (face tree-sitter-hl-face:string fontified t) 1 3 (fontified t) 3 5 (face tree-sitter-hl-face:string fontified t)) . -38) 43 (44 . 47) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . 44) (#("htt" 0 3 (face tree-sitter-hl-face:string fontified t)) . 46) (50 . 58) (71 . 72) (#("G" 0 1 (face tree-sitter-hl-face:string fontified t)) . 71) (73 . 78) (#("P" 0 1 (face tree-sitter-hl-face:string fontified t)) . 73) (75 . 81) (#("ked" 0 3 (face tree-sitter-hl-face:string fontified t)) . 75) (79 . 80) (#("x" 0 1 (face tree-sitter-hl-face:string fontified t)) . 79) (#("pokecac" 0 7 (face tree-sitter-hl-face:string fontified t)) . 81) (89 . 92) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . 89) (#(" " 0 1 (fontified t)) . 399) (468 . 469) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 468) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 472) (476 . 477) (503 . 504) (520 . 521) (537 . 538) (540 . 541) (575 . 576) (593 . 594) (620 . 621) (711 . 712) (714 . 715) (731 . 732) (748 . 749) (751 . 752) (794 . 795) (#("  " 0 2 (fontified t)) . 794) (undo-tree-id145 . 2) (undo-tree-id146 . 2)) nil (25846 21948 605925 219000) 0 nil])
([nil nil ((463 . 465)) nil (25846 21948 605916 603000) 0 nil])
([nil nil ((465 . 470)) nil (25846 21948 605916 272000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -468) (undo-tree-id143 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -469) (undo-tree-id144 . -1) 470) nil (25846 21948 605915 581000) 0 nil])
([nil nil ((468 . 476)) nil (25846 21948 605914 148000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -475) (undo-tree-id142 . -1) 476) nil (25846 21948 605913 206000) 0 nil])
([nil nil ((475 . 476)) nil (25846 21948 605912 354000) 0 nil])
([nil nil ((476 . 480)) nil (25846 21948 605911 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 476 498 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (476 . 498) (#("LocationResponseObject" 0 22 (fontified nil)) . 476) (476 . 498) (#("Loca" 0 4 (fontified nil)) . 476) (476 . 480) (#("LocationResponseObject" 0 22 (fontified nil)) . -476) (476 . 498) (#("Loca" 0 4 (face tree-sitter-hl-face:type fontified t)) . -476) (undo-tree-id140 . -4) (undo-tree-id141 . -4) 480) nil (25846 21948 605910 741000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -499) (499 . 500) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -499) (499 . 500) (498 . 500)) nil (25846 21948 605909 198000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -498) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . 1) (undo-tree-id136 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -499) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) 500) nil (25846 21948 605908 387000) 0 nil])
([nil nil ((836 . 839)) nil (25846 21948 605906 413000) 0 nil])
([nil nil ((839 . 851)) nil (25846 21948 605906 62000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -836) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("	" 0 1 (fontified t)) . -837) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("	" 0 1 (fontified t)) . -838) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -839) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -840) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -841) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -842) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -843) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -844) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#(" " 0 1 (fontified t)) . -845) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -846) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t)) . -847) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -848) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -849) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -850) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 851) nil (25846 21948 605903 297000) 0 nil])
([nil nil ((475 . 479)) nil (25846 21948 605891 344000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -813) (undo-tree-id102 . -1) 814) nil (25846 21948 605890 623000) 0 nil])
([nil nil ((#("		resultBody = LocationResponseObject{}
" 0 1 (fontified t) 1 2 (fontified t) 2 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 14 (face tree-sitter-hl-face:operator fontified t) 14 15 (fontified t) 15 37 (face tree-sitter-hl-face:type fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 40 (fontified t)) . 800) (undo-tree-id91 . -39) (undo-tree-id92 . -38) (undo-tree-id93 . 1) (undo-tree-id94 . -39) (undo-tree-id95 . -39) (undo-tree-id96 . -39) (undo-tree-id97 . -39) (undo-tree-id98 . 2) (undo-tree-id99 . -39) (undo-tree-id100 . 3) (undo-tree-id101 . -38) 838) nil (25846 21948 605888 719000) 0 nil])
([nil nil ((#("	json.Unmarshal(body, &resultBody)
	return resultBody
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 15 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 20 (face tree-sitter-hl-face:variable fontified t) 20 22 (fontified t) 22 23 (face tree-sitter-hl-face:operator fontified t) 23 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 42 (face tree-sitter-hl-face:keyword fontified t) 42 43 (fontified t) 43 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t)) . 803) (undo-tree-id83 . -53) (undo-tree-id84 . -24) (undo-tree-id85 . -53) (undo-tree-id86 . -53) (undo-tree-id87 . -19) (undo-tree-id88 . -53) (undo-tree-id89 . -24) (undo-tree-id90 . -53) 856) nil (25846 21948 605494 20000) 0 nil])
([nil nil ((nil rear-nonsticky nil 800 . 801) (#("
" 0 1 (fontified nil)) . -853) (799 . 854) 796) nil (25846 21948 605489 531000) 0 nil])
([nil nil ((800 . 801) (835 . 836) 801) nil (25846 21948 605489 220000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -865) (865 . 866) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -865) (865 . 866) (858 . 866)) nil (25846 21948 605488 399000) 0 nil])
([nil nil ((866 . 868) (867 . 868) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 866) (866 . 868) (865 . 867)) nil (25846 21948 605487 908000) 0 nil])
([nil nil ((868 . 869)) nil (25846 21948 605487 96000) 0 nil])
([nil nil ((869 . 872)) nil (25846 21948 605486 766000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id82 . -1) 872) nil (25846 21948 605486 265000) 0 nil])
([nil nil ((871 . 873)) nil (25846 21948 605485 834000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id80 . -1) (#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -872) (undo-tree-id81 . -1) 873) nil (25846 21948 605485 153000) 0 nil])
([nil nil ((871 . 876)) nil (25846 21948 605484 191000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -872) (undo-tree-id76 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -873) (undo-tree-id77 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -874) (undo-tree-id78 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -875) (undo-tree-id79 . -1) 876) nil (25846 21948 605483 409000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -871) (undo-tree-id75 . -1) 872) nil (25846 21948 605481 916000) 0 nil])
([nil nil ((871 . 878)) nil (25846 21948 605481 495000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -875) (undo-tree-id72 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -876) (undo-tree-id73 . -1) (#(" " 0 1 (fontified t)) . -877) (undo-tree-id74 . -1) 878) nil (25846 21948 605480 985000) 0 nil])
([nil nil ((868 . 872)) nil (25846 21948 605479 993000) 0 nil])
([nil nil ((872 . 873)) nil (25846 21948 605479 672000) 0 nil])
([nil nil ((873 . 877)) nil (25846 21948 605479 311000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) #s(yas--field 2 888 893 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) nil nil)) (873 . 902) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 873) (873 . 912) (#("Unmaval" 0 4 (fontified nil) 4 7 (face tree-sitter-hl-face:property fontified nil)) . 873) (873 . 877) (#("Unmarshal" 0 9 (fontified nil)) . -873) (873 . 882) (#("Unma" 0 4 (face tree-sitter-hl-face:property fontified t)) . -873) (undo-tree-id70 . -4) (undo-tree-id71 . -4) 877) nil (25846 21948 605478 359000) 0 nil])
([nil nil ((#("data []byte" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 11 (face tree-sitter-hl-face:type fontified t)) . 883)) nil (25846 21948 605477 147000) 0 nil])
([nil nil ((883 . 886)) nil (25846 21948 605476 847000) 0 nil])
([nil nil ((apply yas--snippet-revive 873 894 #s(yas--snippet nil (#s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) #s(yas--field 2 888 893 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 883 886 nil nil nil t #s(yas--field 2 888 893 nil nil nil nil nil)) nil nil))) nil (25846 21948 605476 175000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -888) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -889) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -890) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -891) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -892) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 893) nil (25846 21948 605474 141000) 0 nil])
([nil nil ((888 . 892)) nil (25846 21948 605469 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 889 899 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (889 . 899) (#("resultBody" 0 10 (fontified nil)) . 889) (889 . 899) (#("res" 0 3 (fontified nil)) . 889) (889 . 892) (#("resultBody" 0 10 (fontified nil)) . -889) (889 . 899) (#("res" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -889) (undo-tree-id58 . -3) (undo-tree-id59 . -3) 892) nil (25846 21948 605468 410000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -900) (undo-tree-id54 . -1) (#("v" 0 1 (face tree-sitter-hl-face:property fontified t)) . -901) (undo-tree-id55 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -902) (undo-tree-id56 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -903) (undo-tree-id57 . -1) 904) nil (25846 21948 605465 805000) 0 nil])
([nil nil ((900 . 903)) nil (25846 21948 605463 811000) 0 nil])
([nil nil ((903 . 910)) nil (25846 21948 605463 461000) 0 nil])
([nil nil ((910 . 913)) nil (25846 21948 605463 60000) 0 nil])
([nil nil ((apply yas--snippet-revive 910 920 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (910 . 920) (#("resultBody" 0 10 (fontified nil)) . 910) (910 . 920) (#("res" 0 3 (fontified nil)) . 910) (910 . 913) (#("resultBody" 0 10 (fontified nil)) . -910) (910 . 920) (#("res" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -910) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 913) nil (25846 21948 605462 78000) 0 nil])
([nil nil ((91 . 93)) nil (25846 21948 605460 24000) 0 nil])
([nil nil ((93 . 97)) nil (25846 21948 605459 513000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -93) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -94) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -95) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -96) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 97) nil (25846 21948 605457 339000) 0 nil])
([nil nil ((94 . 98) (93 . 95) (#("\"" 0 1 (fontified nil)) . -93) (93 . 94)) nil (25846 21948 605374 19000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -103) (undo-tree-id312 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -104) (undo-tree-id313 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -105) (undo-tree-id314 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -106) (undo-tree-id315 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -107) (undo-tree-id316 . -1) 108 (t 25846 21948 617114 480000)) nil (25846 22080 648647 382000) 0 nil])
([nil nil ((103 . 106)) nil (25846 22080 648642 764000) 0 nil])
([nil nil ((98 . 103)) nil (25846 22080 648641 572000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id307 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -99) (undo-tree-id308 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -100) (undo-tree-id309 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -101) (undo-tree-id310 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -102) (undo-tree-id311 . -1) 103) nil (25846 22080 648639 168000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -139) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -140) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -141) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -142) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -143) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -144) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -145) (undo-tree-id306 . -1) 146) nil (25846 22080 648633 628000) 0 nil])
([nil nil ((139 . 142)) nil (25846 22080 648618 161000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 145 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (139 . 145) (#("Second" 0 6 (fontified nil)) . 139) (139 . 145) (#("Sec" 0 3 (fontified nil)) . 139) (139 . 142) (#("Second" 0 6 (fontified nil)) . -139) (139 . 145) (#("Sec" 0 3 (face tree-sitter-hl-face:property fontified t)) . -139) (undo-tree-id277 . -3) (undo-tree-id278 . -3) 142) nil (25846 22080 648616 188000) 0 nil])
([nil nil ((891 . 895)) nil (25846 22080 648611 339000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:property fontified t)) . -892) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 893) nil (25846 22080 648609 416000) 0 nil])
([nil nil ((892 . 893)) nil (25846 22080 648587 808000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -891) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("V" 0 1 (face tree-sitter-hl-face:property fontified t)) . -892) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -893) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -894) (undo-tree-id371 . 1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 895 (t 25846 22080 660117 217000)) nil (25846 22129 5074 809000) 0 nil])
([nil nil ((441 . 443) (t 25846 22129 109095 585000)) nil (25846 23327 140024 391000) 0 nil])
([nil nil ((443 . 445)) nil (25846 23327 140023 309000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -443) (undo-tree-id18 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -444) (undo-tree-id19 . -1) 445) nil (25846 23327 140021 806000) 0 nil])
([nil nil ((443 . 449)) nil (25846 23327 140017 278000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -448) (undo-tree-id17 . -1) 449) nil (25846 23327 140016 406000) 0 nil])
([nil nil ((448 . 452)) nil (25846 23327 140014 693000) 0 nil])
([nil nil ((452 . 453)) nil (25846 23327 140013 561000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -448) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -449) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -450) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -451) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -452) (undo-tree-id16 . -1) 453) nil (25846 23327 140011 327000) 0 nil])
([nil nil ((448 . 449)) nil (25846 23327 140005 766000) 0 nil])
([nil nil ((449 . 469) (#("Get" 0 3 (fontified nil)) . -449) (449 . 452)) nil (25846 23327 140004 564000) 0 nil])
([nil nil ((#("	cache.Get(${1:key string})
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 10 (fontified t face tree-sitter-hl-face:type) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t face tree-sitter-hl-face:number) 14 15 (fontified t) 15 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 25 (fontified t face tree-sitter-hl-face:variable) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t)) . 442) (undo-tree-id0 . -7) (undo-tree-id1 . -26) (undo-tree-id2 . 2) (undo-tree-id3 . -27) (undo-tree-id4 . 18) (undo-tree-id5 . -11) (undo-tree-id6 . 1) (undo-tree-id7 . -27) 468) nil (25846 23327 140000 386000) 0 nil])
([nil nil ((804 . 807) (t 25846 23327 147350 484000)) nil (25850 2008 915900 762000) 0 nil])
([nil nil ((807 . 810)) nil (25850 2008 915899 770000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -808) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -809) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 810) nil (25850 2008 915897 946000) 0 nil])
([nil nil ((808 . 813)) nil (25850 2008 915892 366000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) #s(yas--field 2 822 826 nil nil nil t nil)) nil 3 nil #s(yas--field 2 822 826 nil nil nil t nil) nil nil)) (813 . 856) (#("Add(${1:key string}, ${2:entry pokecache.CacheEntry})" 0 53 (fontified nil)) . 813) (813 . 866) (#("Add" 0 3 (fontified nil)) . -813) (813 . 816)) nil (25850 2008 915889 691000) 0 nil])
([nil nil ((818 . 820) (#("key string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 818) (817 . 818)) nil (25850 2008 915885 954000) 0 nil])
([nil nil ((apply yas--snippet-revive 817 820 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) nil)) (817 . 820) (#("url" 0 3 (fontified nil)) . 817) (817 . 820) (#("url" 0 3 (fontified nil)) . 817) (817 . 820) (#("url" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -817) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 820) nil (25850 2008 915882 698000) 0 nil])
([nil nil ((823 . 826) (#("entry pokecache.CacheEntry" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 15 (face tree-sitter-hl-face:variable fontified nil) 15 16 (fontified nil) 16 26 (face tree-sitter-hl-face:property fontified nil)) . 823) (822 . 823)) nil (25850 2008 915877 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 826 #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 2 822 826 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 2 822 826 nil nil nil t nil) nil)) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -822) (undo-tree-id7 . -4) (undo-tree-id8 . -4) 826) nil (25850 2008 915876 115000) 0 nil])
([nil nil ((apply yas--snippet-revive 813 827 #s(yas--snippet nil (#s(yas--field 1 817 820 nil nil nil t #s(yas--field 2 822 826 nil nil nil t nil)) #s(yas--field 2 822 826 nil nil nil t nil)) nil 3 nil #s(yas--field 2 822 826 nil nil nil t nil) nil nil))) nil (25850 2008 915872 28000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -825) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 826) nil (25850 2008 915870 936000) 0 nil])
([nil nil ((825 . 826)) nil (25850 2008 915867 659000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 826 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (fontified nil)) . 822) (822 . 826) (#("body" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -822) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -3) (undo-tree-id3 . -4) 826) nil (25850 2008 915863 662000) 0 nil])
([nil nil ((953 . 955) (t 25850 2008 924924 892000)) nil (25850 3238 135503 451000) 0 nil])
([nil nil ((955 . 963)) nil (25850 3238 135502 749000) 0 nil])
([nil nil ((963 . 972)) nil (25850 3238 135502 529000) 0 nil])
([nil nil ((972 . 975)) nil (25850 3238 135502 138000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -976) (976 . 977) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -976) (976 . 977) (975 . 977)) nil (25850 3238 135501 627000) 0 nil])
([nil nil ((976 . 986)) nil (25850 3238 135500 595000) 0 nil])
([nil nil ((987 . 992)) nil (25850 3238 135500 225000) 0 nil])
([nil nil ((#("L" 0 1 (face tree-sitter-hl-face:type fontified t)) . -988) (undo-tree-id40 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -989) (undo-tree-id41 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -990) (undo-tree-id42 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -991) (undo-tree-id43 . -1) 992) nil (25850 3238 135499 684000) 0 nil])
([nil nil ((386 . 388)) nil (25850 3238 135497 530000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1899 . 1900) (nil fontified nil 388 . 1900) (388 . 1900)) nil (25850 3238 135497 199000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:type fontified t)) . -393) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -394) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -395) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -396) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("G" 0 1 (face tree-sitter-hl-face:type fontified t)) . -397) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -398) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -399) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -400) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -401) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -402) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -403) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -404) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -405) (undo-tree-id39 . -1) 406) nil (25850 3238 135495 175000) 0 nil])
([nil nil ((393 . 404)) nil (25850 3238 135481 310000) 0 nil])
([nil nil ((404 . 419)) nil (25850 3238 135478 284000) 0 nil])
([nil nil ((2515 . 2517) (t 25850 3238 238244 332000)) nil (25850 3396 40719 253000) 0 nil])
([nil nil ((2517 . 2518) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2517) (2517 . 2518) (2516 . 2518)) nil (25850 3396 40718 271000) 0 nil])
([nil nil ((2506 . 2510)) nil (25850 3396 40717 189000) 0 nil])
([nil nil ((#("u" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2503) (undo-tree-id111 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2504) (undo-tree-id112 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2505) (undo-tree-id113 . -1) (#("P" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2506) (undo-tree-id114 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2507) (undo-tree-id115 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2508) (undo-tree-id116 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2509) (undo-tree-id117 . -1) 2510) nil (25850 3396 40715 897000) 0 nil])
([nil nil ((2503 . 2515)) nil (25850 3396 40712 971000) 0 nil])
([nil nil ((2527 . 2530)) nil (25850 3396 40708 854000) 0 nil])
([nil nil ((2530 . 2531)) nil (25850 3396 40708 132000) 0 nil])
([nil nil ((2531 . 2534)) nil (25850 3396 40707 241000) 0 nil])
([nil nil ((2534 . 2538)) nil (25850 3396 40706 329000) 0 nil])
([nil nil ((65 . 72) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil)) #s(yas--field 3 2578 2586 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) nil nil)) (2538 . 2580) (#("Appendf(${1:b []byte}, ${2:format string}, ${3:a ...any})" 0 57 (fontified nil)) . 2538) (2538 . 2595) (#("Appendf" 0 7 (fontified nil)) . -2538) (2538 . 2545)) nil (25850 3396 40705 447000) 0 nil])
([nil nil ((apply yas--snippet-revive 2545 2587 #s(yas--snippet nil (#s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil)) #s(yas--field 3 2578 2586 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 2553 2561 nil nil nil nil #s(yas--field 2 2563 2576 nil nil nil nil #s(yas--field 3 2578 2586 nil nil nil nil nil))) nil nil))) nil (25850 3396 40703 684000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2593 . 2594) (nil fontified nil 2554 . 2594) (2554 . 2594) 2553) nil (25850 3396 40703 13000) 0 nil])
([nil nil ((#("https://pokeapi.co/api/v2/location-area/" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 39 (face tree-sitter-hl-face:comment fontified nil) 39 40 (face tree-sitter-hl-face:comment rear-nonsticky nil fontified nil)) . 2554) (undo-tree-id108 . -39) (undo-tree-id109 . -39) (undo-tree-id110 . -39) (nil rear-nonsticky t 2593 . 2594)) nil (25850 3396 40701 780000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2592 . 2593) (nil fontified nil 2553 . 2593) (2553 . 2593) 2552) nil (25850 3396 40700 187000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2594) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("[" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2595) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("]" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2596) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . 1) (undo-tree-id99 . -1) (#("b" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2597) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("y" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2598) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("t" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2599) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2600) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 2601) nil (25850 3396 40698 104000) 0 nil])
([nil nil ((2553 . 2555) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2553) (2553 . 2554)) nil (25850 3396 40502 970000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2554) (undo-tree-id91 . -1) 2555) nil (25850 3396 40501 938000) 0 nil])
([nil nil ((2595 . 2596) (#("\"" 0 1 (fontified nil)) . -2595) (2595 . 2596)) nil (25850 3396 40500 555000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2594) (undo-tree-id88 . 1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 2595) nil (25850 3396 40499 884000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2599) (undo-tree-id67 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2600) (undo-tree-id68 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2601) (undo-tree-id69 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2602) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -2603) (undo-tree-id71 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2604) (undo-tree-id72 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2605) (undo-tree-id73 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2606) (undo-tree-id74 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2607) (undo-tree-id75 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2608) (undo-tree-id76 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2609) (undo-tree-id77 . -1) (#("," 0 1 (fontified t)) . -2610) (undo-tree-id78 . -1) (#(" " 0 1 (fontified t)) . -2611) (undo-tree-id79 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2612) (undo-tree-id80 . -1) (#(" " 0 1 (fontified t)) . -2613) (undo-tree-id81 . -1) (#("." 0 1 (fontified t)) . -2614) (undo-tree-id82 . -1) (#("." 0 1 (fontified t)) . -2615) (undo-tree-id83 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2616) (undo-tree-id84 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2617) (undo-tree-id85 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2618) (undo-tree-id86 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2619) (undo-tree-id87 . -1) 2620) nil (25850 3396 40496 77000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2597) (undo-tree-id65 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2598) (undo-tree-id66 . -1) 2599) nil (25850 3396 40485 568000) 0 nil])
([nil nil ((2597 . 2605)) nil (25850 3396 40484 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 2597 2609 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (2597 . 2609) (#("locationArea" 0 12 (fontified nil)) . 2597) (2597 . 2609) (#("location" 0 8 (fontified nil)) . 2597) (2597 . 2605) (#("locationArea" 0 12 (fontified nil)) . -2597) (2597 . 2609) (#("location" 0 8 (face tree-sitter-hl-face:variable fontified t)) . -2597) (undo-tree-id63 . -8) (undo-tree-id64 . -8) 2605) nil (25850 3396 40483 243000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2544) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("A" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2545) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2546) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2547) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2548) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2549) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2550) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("f" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2551) (undo-tree-id62 . -1) 2552) nil (25850 3396 40480 498000) 0 nil])
([nil nil ((2544 . 2545)) nil (25850 3396 40473 535000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil)) (2545 . 2585) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 2545) (2545 . 2595) (#("FormatString" 0 12 (fontified nil)) . -2545) (2545 . 2557)) nil (25850 3396 40472 874000) 0 nil])
([nil nil ((apply yas--snippet-revive 2545 2585 #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40472 243000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40471 862000) 0 nil])
([nil nil ((#("FormatString" 0 12 (fontified nil)) . 2545) (2545 . 2557) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 2545) (2545 . 2595) (#("FormatString(state fmt.State, verb rune)" 0 12 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (fontified t) 19 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (fontified t) 23 28 (face tree-sitter-hl-face:property fontified t) 28 30 (fontified t) 30 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (fontified t) 35 39 (face tree-sitter-hl-face:variable fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2545) (undo-tree-id44 . 27) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (apply yas--snippet-revive 2545 2585 #s(yas--snippet nil (#s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 2558 2573 nil nil nil nil #s(yas--field 2 2575 2584 nil nil nil nil nil)) nil nil))) nil (25850 3396 40470 800000) 0 nil])
([nil nil ((2545 . 2552)) nil (25850 3396 40462 244000) 0 nil])
([nil nil ((2594 . 2596)) nil (25850 3396 40459 459000) 0 nil])
([nil nil ((2612 . 2614) (t 25850 3396 50315 798000)) nil (25850 3445 139648 299000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2615 . 2616) (#("
" 0 1 (fontified nil)) . -3097) (2614 . 3098) 2613) nil (25850 3445 139647 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2615 . 2616) (#("
" 0 1 (fontified nil)) . -2641) (2614 . 2642) 2613) nil (25850 3445 139646 275000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2613) (undo-tree-id120 . -1) (undo-tree-id121 . -1)) nil (25850 3445 139645 93000) 0 nil])
([nil nil ((2530 . 2535)) nil (25850 3445 139643 480000) 0 nil])
([nil nil ((apply yas--snippet-revive 2531 2557 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (2531 . 2557) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 2531) (2531 . 2557) (#("Loca" 0 4 (fontified nil)) . 2531) (2531 . 2535) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -2531) (2531 . 2557) (#("Loca" 0 4 (face tree-sitter-hl-face:type fontified t)) . -2531) (undo-tree-id118 . -4) (undo-tree-id119 . -4) 2535) nil (25850 3445 139642 97000) 0 nil])
([nil nil ((2691 . 2692)) nil (25850 3445 139633 631000) 0 nil])
([nil nil ((2692 . 2693)) nil (25850 3445 139632 850000) 0 nil])
([nil nil ((2693 . 2694)) nil (25850 3445 139631 888000) 0 nil])
([nil nil ((2694 . 2695)) nil (25850 3445 139628 682000) 0 nil])
([nil nil ((3155 . 3157) (t 25850 3445 148535 930000)) nil (25851 7386 282052 66000) 0 nil])
([nil nil ((3157 . 3162)) nil (25851 7386 282050 894000) 0 nil])
([nil nil ((3162 . 3167)) nil (25851 7386 282049 742000) 0 nil])
([nil nil ((3167 . 3172)) nil (25851 7386 282048 680000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3173) (3173 . 3174) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -3173) (3173 . 3174) (3172 . 3174)) nil (25851 7386 282047 47000) 0 nil])
([nil nil ((3173 . 3184)) nil (25851 7386 282044 903000) 0 nil])
([nil nil ((3184 . 3191)) nil (25851 7386 282043 740000) 0 nil])
([nil nil ((3192 . 3193)) nil (25851 7386 282042 668000) 0 nil])
([nil nil ((1921 . 1923)) nil (25851 7386 282041 446000) 0 nil])
([nil nil ((nil rear-nonsticky nil 10983 . 10984) (nil fontified nil 1922 . 10984) (1922 . 10984)) nil (25851 7386 282035 144000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1927) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1928) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1929) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1930) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1931) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1932) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1933) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1934) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1935) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1937) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1938) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1939) (undo-tree-id25 . -1) 1940 (t 25851 7386 386164 816000)) nil (25851 7446 917549 994000) 0 nil])
([nil nil ((1927 . 1932)) nil (25851 7446 917535 657000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1931) (undo-tree-id0 . -1) 1932) nil (25851 7446 917533 713000) 0 nil])
([nil nil ((1931 . 1934)) nil (25851 7446 917480 824000) 0 nil])
([nil nil ((1934 . 1948) (t 25851 7446 931635 679000)) nil (25851 7462 930026 50000) 0 nil])
([nil nil ((12265 . 12267) (t 25851 7462 939493 506000)) nil (25851 7516 326067 126000) 0 nil])
([nil nil ((12267 . 12269)) nil (25851 7516 326065 963000) 0 nil])
([nil nil ((apply yas--snippet-revive 12265 12286 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (12265 . 12286) (#("PokemonResponseObject" 0 21 (fontified nil)) . 12265) (12265 . 12286) (#("Poke" 0 4 (fontified nil)) . 12265) (12265 . 12269) (#("PokemonResponseObject" 0 21 (fontified nil)) . -12265) (12265 . 12286) (#("Poke" 0 4 (fontified t face tree-sitter-hl-face:type)) . -12265) (undo-tree-id136 . -4) (undo-tree-id137 . -4) 12269) nil (25851 7516 326064 411000) 0 nil])
([nil nil ((12287 . 12289) (#("}" 0 1 (fontified nil)) . -12287) (12286 . 12288)) nil (25851 7516 326060 163000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -12287) (undo-tree-id134 . -1) (#("<" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -12288) (undo-tree-id135 . -1) 12289) nil (25851 7516 326058 580000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -12288) (12288 . 12289) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -12288) (12288 . 12289) (12287 . 12289)) nil (25851 7516 326055 985000) 0 nil])
([nil nil ((12289 . 12290) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 12289) (12289 . 12290) (12288 . 12290)) nil (25851 7516 326054 252000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12291 . 12292) (#("
" 0 1 (fontified nil)) . -12884) (12290 . 12885) 12289) nil (25851 7516 326052 478000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 12289) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1)) nil (25851 7516 326050 955000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12355) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12356) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12357) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12358) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12359) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12360) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12361) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12362) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12363) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12364) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12365) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12366) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 12367) nil (25851 7516 326046 497000) 0 nil])
([nil nil ((12355 . 12366)) nil (25851 7516 326032 140000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12337) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12338) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12339) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12340) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12341) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12342) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12343) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("-" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12344) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12345) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12346) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12347) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12348) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12349) (undo-tree-id104 . -1) 12350) nil (25851 7516 326028 964000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12316) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12317) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12318) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12319) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12320) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12321) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12322) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12323) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12324) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -12325) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12326) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12327) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12328) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12329) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12330) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12331) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12332) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12333) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("2" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12334) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12335) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12336) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 12337) nil (25851 7516 325912 546000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12310) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12311) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12312) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12313) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12314) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#(":" 0 1 (fontified t face tree-sitter-hl-face:string)) . -12315) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 12316) nil (25851 7516 325887 389000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12343 . 12344) (nil fontified nil 12310 . 12344) (12310 . 12344) 12309) nil (25851 7516 325863 735000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12410) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12411) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12412) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12413) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12414) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12415) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12416) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12417) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12418) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12419) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("p" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12420) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12421) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12422) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12423) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12424) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12425) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12426) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12427) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12428) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12429) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12430) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 12431 (t 25851 7516 437012 47000)) nil (25851 7562 479802 215000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12404) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("L" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12405) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12406) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("c" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -12407) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12408) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12409) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 12410) nil (25851 7562 479777 639000) 0 nil])
([nil nil ((12404 . 12409)) nil (25851 7562 479600 468000) 0 nil])
([nil nil ((apply yas--snippet-revive 12405 12426 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (12405 . 12426) (#("PokemonResponseObject" 0 21 (fontified nil)) . 12405) (12405 . 12426) (#("Poke" 0 4 (fontified nil)) . 12405) (12405 . 12409) (#("PokemonResponseObject" 0 21 (fontified nil)) . -12405) (12405 . 12426) (#("Poke" 0 4 (fontified t face tree-sitter-hl-face:type)) . -12405) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) 12409) nil (25851 7562 479595 549000) 0 nil])
([nil nil ((10992 . 10994) (t 25851 7562 583589 468000)) nil (25851 7860 352921 952000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11014) (11014 . 11015) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11014) (11014 . 11015) (10994 . 11015)) nil (25851 7860 352920 499000) 0 nil])
([nil nil ((11014 . 11020)) nil (25851 7860 352919 197000) 0 nil])
([nil nil ((11014 . 11018)) nil (25851 7860 352918 886000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11027) (11027 . 11028) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11027) (11027 . 11028) (11025 . 11028)) nil (25851 7860 352917 874000) 0 nil])
([nil nil ((11028 . 11029) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 11028) (11028 . 11029) (11027 . 11029)) nil (25851 7860 352916 361000) 0 nil])
([nil nil ((159 . 160)) nil (25851 7860 352914 949000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -159) (undo-tree-id321 . -1) 160) nil (25851 7860 352913 937000) 0 nil])
([nil nil ((159 . 161)) nil (25851 7860 352912 594000) 0 nil])
([nil nil ((161 . 175)) nil (25851 7860 352911 412000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -174) (undo-tree-id320 . -1) 175) nil (25851 7860 352909 859000) 0 nil])
([nil nil ((174 . 175)) nil (25851 7860 352908 347000) 0 nil])
([nil nil ((161 . 165)) nil (25851 7860 352907 375000) 0 nil])
([nil nil ((165 . 166)) nil (25851 7860 352906 563000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -173) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -174) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -175) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -176) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -177) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -178) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -179) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 180) nil (25851 7860 352904 579000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -183) (183 . 184) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -183) (183 . 184) (173 . 184)) nil (25851 7860 352894 481000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -180) (undo-tree-id291 . -1) 181) nil (25851 7860 352893 328000) 0 nil])
([nil nil ((180 . 184)) nil (25851 7860 352891 916000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -183) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 184) nil (25851 7860 352891 74000) 0 nil])
([nil nil ((183 . 186)) nil (25851 7860 352889 141000) 0 nil])
([nil nil ((173 . 174)) nil (25851 7860 352888 119000) 0 nil])
([nil nil ((11056 . 11057)) nil (25851 7860 352887 477000) 0 nil])
([nil nil ((11057 . 11065)) nil (25851 7860 352886 806000) 0 nil])
([nil nil ((apply yas--snippet-revive 11057 11071 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (11057 . 11071) (#("ResponseObject" 0 14 (fontified nil)) . 11057) (11057 . 11071) (#("Response" 0 8 (fontified nil)) . 11057) (11057 . 11065) (#("ResponseObject" 0 14 (fontified nil)) . -11057) (11057 . 11071) (#("Response" 0 8 (fontified t face tree-sitter-hl-face:type)) . -11057) (undo-tree-id287 . -8) (undo-tree-id288 . -8) 11065) nil (25851 7860 352885 814000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11076 . 11077) (#("
" 0 1 (fontified nil)) . -11585) (11075 . 11586) 11074) nil (25851 7860 352883 99000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 11074) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) nil (25851 7860 352881 536000) 0 nil])
([nil nil ((11055 . 11060)) nil (25851 7860 352878 491000) 0 nil])
([nil nil ((11060 . 11069)) nil (25851 7860 352877 799000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11060) (undo-tree-id277 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11061) (undo-tree-id278 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11062) (undo-tree-id279 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11063) (undo-tree-id280 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11064) (undo-tree-id281 . -1) 11065) nil (25851 7860 352876 487000) 0 nil])
([nil nil ((11060 . 11063)) nil (25851 7860 352872 660000) 0 nil])
([nil nil ((11067 . 11068)) nil (25851 7860 352871 928000) 0 nil])
([nil nil ((11068 . 11071)) nil (25851 7860 352871 297000) 0 nil])
([nil nil ((apply yas--snippet-revive 11068 11082 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (11068 . 11082) (#("ResponseObject" 0 14 (fontified nil)) . 11068) (11068 . 11082) (#("Res" 0 3 (fontified nil)) . 11068) (11068 . 11071) (#("ResponseObject" 0 14 (fontified nil)) . -11068) (11068 . 11082) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -11068) (undo-tree-id275 . -3) (undo-tree-id276 . -3) 11071) nil (25851 7860 352870 265000) 0 nil])
([nil nil (11165) nil (25851 7860 352867 941000) 0 nil])
([nil nil ((11129 . 11132)) nil (25851 7860 352867 500000) 0 nil])
([nil nil ((11617 . 11619)) nil (25851 7860 352867 19000) 0 nil])
([nil nil ((11673 . 11674)) nil (25851 7860 352866 518000) 0 nil])
([nil nil ((11674 . 11675)) nil (25851 7860 352865 747000) 0 nil])
([nil nil ((11702 . 11703)) nil (25851 7860 352864 414000) 0 nil])
([nil nil ((11703 . 11704)) nil (25851 7860 352863 342000) 0 nil])
([nil nil ((11743 . 11744)) nil (25851 7860 352862 371000) 0 nil])
([nil nil ((11744 . 11745)) nil (25851 7860 352861 148000) 0 nil])
([nil nil ((11755 . 11756)) nil (25851 7860 352860 217000) 0 nil])
([nil nil ((11756 . 11757)) nil (25851 7860 352859 54000) 0 nil])
([nil nil ((11785 . 11786)) nil (25851 7860 352858 113000) 0 nil])
([nil nil ((11786 . 11787)) nil (25851 7860 352857 491000) 0 nil])
([nil nil ((11805 . 11806)) nil (25851 7860 352856 550000) 0 nil])
([nil nil ((11806 . 11807)) nil (25851 7860 352855 888000) 0 nil])
([nil nil ((11825 . 11826)) nil (25851 7860 352854 887000) 0 nil])
([nil nil ((11826 . 11827)) nil (25851 7860 352854 426000) 0 nil])
([nil nil ((11831 . 11832)) nil (25851 7860 352853 784000) 0 nil])
([nil nil ((11832 . 11833)) nil (25851 7860 352853 73000) 0 nil])
([nil nil ((11869 . 11870)) nil (25851 7860 352852 532000) 0 nil])
([nil nil ((11870 . 11871)) nil (25851 7860 352851 731000) 0 nil])
([nil nil ((11890 . 11891)) nil (25851 7860 352851 49000) 0 nil])
([nil nil ((11891 . 11892)) nil (25851 7860 352850 508000) 0 nil])
([nil nil ((11920 . 11921)) nil (25851 7860 352849 757000) 0 nil])
([nil nil ((11921 . 11922)) nil (25851 7860 352848 955000) 0 nil])
([nil nil ((12014 . 12015)) nil (25851 7860 352848 324000) 0 nil])
([nil nil ((12015 . 12016)) nil (25851 7860 352847 823000) 0 nil])
([nil nil ((12020 . 12021)) nil (25851 7860 352847 212000) 0 nil])
([nil nil ((12021 . 12022)) nil (25851 7860 352846 751000) 0 nil])
([nil nil ((12040 . 12041)) nil (25851 7860 352846 80000) 0 nil])
([nil nil ((12041 . 12042)) nil (25851 7860 352845 619000) 0 nil])
([nil nil ((12060 . 12061)) nil (25851 7860 352844 998000) 0 nil])
([nil nil ((12061 . 12062)) nil (25851 7860 352844 407000) 0 nil])
([nil nil ((12066 . 12067)) nil (25851 7860 352843 686000) 0 nil])
([nil nil ((12067 . 12068)) nil (25851 7860 352842 704000) 0 nil])
([nil nil ((12091 . 12092)) nil (25851 7860 352841 752000) 0 nil])
([nil nil ((12092 . 12093)) nil (25851 7860 352840 961000) 0 nil])
([nil nil ((12129 . 12130)) nil (25851 7860 352840 660000) 0 nil])
([nil nil ((12130 . 12131)) nil (25851 7860 352839 999000) 0 nil])
([nil nil ((12151 . 12152)) nil (25851 7860 352839 287000) 0 nil])
([nil nil ((12152 . 12153)) nil (25851 7860 352838 496000) 0 nil])
([nil nil ((12163 . 12164)) nil (25851 7860 352837 785000) 0 nil])
([nil nil ((12164 . 12165)) nil (25851 7860 352837 454000) 0 nil])
([nil nil ((12200 . 12201)) nil (25851 7860 352836 983000) 0 nil])
([nil nil ((12201 . 12202)) nil (25851 7860 352836 262000) 0 nil])
([nil nil ((12222 . 12223)) nil (25851 7860 352835 540000) 0 nil])
([nil nil ((12223 . 12224)) nil (25851 7860 352834 889000) 0 nil])
([nil nil ((12227 . 12228)) nil (25851 7860 352834 218000) 0 nil])
([nil nil ((12228 . 12229)) nil (25851 7860 352833 266000) 0 nil])
([nil nil ((11615 . 11617)) nil (25851 7860 352832 765000) 0 nil])
([nil nil ((11617 . 11623)) nil (25851 7860 352831 543000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11622) (undo-tree-id274 . -1) 11623) nil (25851 7860 352830 892000) 0 nil])
([nil nil ((11622 . 11633)) nil (25851 7860 352829 489000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11627) (undo-tree-id272 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11628) (undo-tree-id273 . -1) 11629) nil (25851 7860 352828 147000) 0 nil])
([nil nil ((11627 . 11630)) nil (25851 7860 352826 614000) 0 nil])
([nil nil ((#("ó" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11627) (undo-tree-id271 . -1) 11628) nil (25851 7860 352825 612000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11634) (11634 . 11635) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11634) (11634 . 11635) (11633 . 11635)) nil (25851 7860 352823 859000) 0 nil])
([nil nil ((11634 . 11644)) nil (25851 7860 352822 266000) 0 nil])
([nil nil ((11645 . 11651)) nil (25851 7860 352821 264000) 0 nil])
([nil nil ((apply yas--snippet-revive 11646 11668 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (11646 . 11668) (#("LocationResponseObject" 0 22 (fontified nil)) . 11646) (11646 . 11668) (#("Locat" 0 5 (fontified nil)) . 11646) (11646 . 11651) (#("LocationResponseObject" 0 22 (fontified nil)) . -11646) (11646 . 11668) (#("Locat" 0 5 (fontified t face tree-sitter-hl-face:type)) . -11646) (undo-tree-id269 . -5) (undo-tree-id270 . -5) 11651) nil (25851 7860 352820 202000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11670) (11670 . 11671) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11670) (11670 . 11671) (11668 . 11671)) nil (25851 7860 352817 376000) 0 nil])
([nil nil ((11671 . 11672) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 11671) (11671 . 11672) (11670 . 11672)) nil (25851 7860 352815 533000) 0 nil])
([nil nil ((11672 . 11678)) nil (25851 7860 352814 241000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil 5 nil #s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil nil)) (11672 . 11725) (#("handleRequests(${1:url string}, ${2:resultBody ResponseObject})" 0 63 (fontified nil)) . 11672) (11672 . 11735) (#("handle" 0 6 (fontified nil)) . 11672) (11672 . 11678) (#("handleRequests" 0 14 (fontified nil)) . -11672) (11672 . 11686) (#("handle" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -11672) (undo-tree-id267 . -6) (undo-tree-id268 . -6) 11678) nil (25851 7860 352812 577000) 0 nil])
([nil nil ((11688 . 11690) (#("url string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 11688) (11687 . 11688)) nil (25851 7860 352808 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 11687 11690 #s(yas--snippet nil nil nil 6 nil nil #s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil #s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil)) (11687 . 11690) (#("url" 0 3 (fontified nil)) . 11687) (11687 . 11690) (#("url" 0 3 (fontified nil)) . 11687) (11687 . 11690) (#("url" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -11687) (undo-tree-id265 . -3) (undo-tree-id266 . -3) 11690) nil (25851 7860 352806 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 11672 11718 #s(yas--snippet nil (#s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil 5 nil #s(yas--field 1 11687 11690 nil nil nil t #s(yas--field 2 11692 11717 nil nil nil nil nil)) nil nil))) nil (25851 7860 352803 531000) 0 nil])
([nil nil ((11703 . 11710)) nil (25851 7860 352802 208000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11707) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11708) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11709) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 11710) nil (25851 7860 352801 16000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11720) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 11721) nil (25851 7860 352796 628000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11699) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11700) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11701) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#(" " 0 1 (fontified t)) . -11702) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11703) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11704) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11705) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11706) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11707) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11708) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11709) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11710) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11711) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11712) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11713) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11714) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11715) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11716) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11717) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11718) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11719) (undo-tree-id255 . -1) (undo-tree-id256 . -1) 11720) nil (25851 7860 352791 939000) 0 nil])
([nil nil ((11699 . 11702)) nil (25851 7860 352683 526000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . 11671) (11671 . 11672) (11671 . 11672)) nil (25851 7860 352682 264000) 0 nil])
([nil nil ((11671 . 11674)) nil (25851 7860 352681 372000) 0 nil])
([nil nil ((11671 . 11675)) nil (25851 7860 352680 390000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11673) (undo-tree-id213 . -1) (#("ű" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11674) (undo-tree-id214 . -1) 11675) nil (25851 7860 352679 408000) 0 nil])
([nil nil ((11676 . 11678)) nil (25851 7860 352676 543000) 0 nil])
([nil nil ((11678 . 11680)) nil (25851 7860 352675 872000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11677) (undo-tree-id210 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11678) (undo-tree-id211 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11679) (undo-tree-id212 . -1) 11680) nil (25851 7860 352674 890000) 0 nil])
([nil nil ((11677 . 11692)) nil (25851 7860 352672 225000) 0 nil])
([nil nil ((apply yas--snippet-revive 11688 11710 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (11688 . 11710) (#("LocationResponseObject" 0 22 (fontified nil)) . 11688) (11688 . 11710) (#("Loca" 0 4 (fontified nil)) . 11688) (11688 . 11692) (#("LocationResponseObject" 0 22 (fontified nil)) . -11688) (11688 . 11710) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11688) (undo-tree-id208 . -4) (undo-tree-id209 . -4) 11692) nil (25851 7860 352670 732000) 0 nil])
([nil nil ((#("func GetLocation(url string) LocationResponseObject {
  var resultBody LocationResponseObject
	handleRequests(url, resultBody)
}

" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 16 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 20 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 20 21 (fontified t) 21 27 (fontified t face tree-sitter-hl-face:type) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 51 (fontified t face tree-sitter-hl-face:type) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-1-face)) 53 54 (fontified t) 54 56 (fontified t) 56 59 (fontified t face tree-sitter-hl-face:keyword) 59 60 (fontified t) 60 70 (fontified t face tree-sitter-hl-face:variable) 70 71 (fontified t) 71 93 (fontified t face tree-sitter-hl-face:type) 93 94 (fontified t) 94 95 (fontified t) 95 109 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 109 110 (fontified t face (rainbow-delimiters-depth-2-face)) 110 113 (fontified t face tree-sitter-hl-face:variable) 113 115 (fontified t) 115 125 (fontified t face tree-sitter-hl-face:variable) 125 126 (fontified t face (rainbow-delimiters-depth-2-face)) 126 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-1-face)) 128 129 (fontified t) 129 130 (fontified t)) . 11617) (undo-tree-id196 . -129) (undo-tree-id197 . -129) (undo-tree-id198 . 1) (undo-tree-id199 . -129) (undo-tree-id200 . -126) (undo-tree-id201 . -110) (undo-tree-id202 . -115) (undo-tree-id203 . -125) (undo-tree-id204 . -127) (undo-tree-id205 . -128) (undo-tree-id206 . -5) (undo-tree-id207 . -129)) nil (25851 7860 352664 260000) 0 nil])
([nil nil ((#("type ResponseObject struct {}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t) 20 26 (fontified t face tree-sitter-hl-face:keyword) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t face (rainbow-delimiters-depth-1-face)) 29 30 (fontified t)) . 161) (undo-tree-id324 . -29) (undo-tree-id325 . -29) (undo-tree-id326 . -29) (undo-tree-id327 . -29) (undo-tree-id328 . -29) (undo-tree-id329 . -12) (undo-tree-id330 . -12) (undo-tree-id331 . -11) (undo-tree-id332 . -5) (undo-tree-id333 . -28) (undo-tree-id334 . -29) (undo-tree-id335 . -29) (undo-tree-id336 . -29) (undo-tree-id337 . -29) (undo-tree-id338 . -29) (undo-tree-id339 . -29) (undo-tree-id340 . -29) (undo-tree-id341 . -29) (undo-tree-id342 . -29) (undo-tree-id343 . -29) (undo-tree-id344 . -28) (undo-tree-id345 . 2) (undo-tree-id346 . -29) (undo-tree-id347 . 3) (undo-tree-id348 . -28) (undo-tree-id349 . -28) (undo-tree-id350 . -28) (undo-tree-id351 . -28) (undo-tree-id352 . -30) 189 (t 25851 7860 361736 520000)) nil (25851 7879 145479 178000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 161) (undo-tree-id322 . 1) (undo-tree-id323 . -1)) nil (25851 7879 145078 629000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11044) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11045) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11046) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11047) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11048) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11049) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11050) (undo-tree-id396 . -1) (undo-tree-id397 . -1) 11051 (t 25851 7879 160550 631000)) nil (25851 7918 967561 261000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11037) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11038) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11039) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11040) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11041) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11042) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11043) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 11044) nil (25851 7918 967551 854000) 0 nil])
([nil nil ((11037 . 11038)) nil (25851 7918 967543 508000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -11014) (11014 . 11015) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11014) (11014 . 11015) (11013 . 11015)) nil (25851 7918 967542 155000) 0 nil])
([nil nil ((11014 . 11019)) nil (25851 7918 967540 262000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11016) (undo-tree-id367 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11017) (undo-tree-id368 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11018) (undo-tree-id369 . -1) 11019) nil (25851 7918 967538 689000) 0 nil])
([nil nil ((11016 . 11019)) nil (25851 7918 967535 603000) 0 nil])
([nil nil ((11019 . 11020)) nil (25851 7918 967534 531000) 0 nil])
([nil nil ((11020 . 11022)) nil (25851 7918 967533 700000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11050) (undo-tree-id353 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11051) (undo-tree-id354 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11052) (undo-tree-id355 . -1) (#("p" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11053) (undo-tree-id356 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11054) (undo-tree-id357 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11055) (undo-tree-id358 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11056) (undo-tree-id359 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11057) (undo-tree-id360 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11058) (undo-tree-id361 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11059) (undo-tree-id362 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11060) (undo-tree-id363 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11061) (undo-tree-id364 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11062) (undo-tree-id365 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11063) (undo-tree-id366 . -1) 11064) nil (25851 7918 967529 903000) 0 nil])
([nil nil ((11050 . 11051)) nil (25851 7918 967508 923000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11023) (11023 . 11024) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -11023) (11023 . 11024) (11022 . 11024)) nil (25851 7918 967502 281000) 0 nil])
([nil nil ((11570 . 11572) (t 25851 7918 980155 88000)) nil (25851 8004 314652 328000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11589) (11589 . 11590) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11589) (11589 . 11590) (11572 . 11590)) nil (25851 8004 314650 805000) 0 nil])
([nil nil ((11589 . 11599)) nil (25851 8004 314649 2000) 0 nil])
([nil nil ((11600 . 11609)) nil (25851 8004 314647 839000) 0 nil])
([nil nil ((apply yas--snippet-revive 11601 11623 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (11601 . 11623) (#("LocationResponseObject" 0 22 (fontified nil)) . 11601) (11601 . 11623) (#("Location" 0 8 (fontified nil)) . 11601) (11601 . 11609) (#("LocationResponseObject" 0 22 (fontified nil)) . -11601) (11601 . 11623) (#("Location" 0 8 (fontified t face tree-sitter-hl-face:type)) . -11601) (undo-tree-id1443 . -8) (undo-tree-id1444 . -8) 11609) nil (25851 8004 314646 246000) 0 nil])
([nil nil ((11623 . 11626)) nil (25851 8004 314642 459000) 0 nil])
([nil nil ((#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11624) (undo-tree-id1442 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 11625)) nil (25851 8004 314640 626000) 0 nil])
([nil nil ((11624 . 11626)) nil (25851 8004 314638 632000) 0 nil])
([nil nil ((11626 . 11627) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 11626) (11626 . 11627) (11625 . 11627)) nil (25851 8004 314637 180000) 0 nil])
([nil nil ((11627 . 11633)) nil (25851 8004 314635 486000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil)) #s(yas--field 3 11678 11690 nil nil nil nil nil)) nil 9 nil #s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) nil nil)) (11627 . 11679) (#("handleRequests[${1:T struct{\\}}](${2:url string}, ${3:resultBody T})" 0 68 (fontified nil)) . 11627) (11627 . 11695) (#("handle" 0 6 (fontified nil)) . 11627) (11627 . 11633) (#("handleRequests" 0 14 (fontified nil)) . -11627) (11627 . 11641) (#("handle" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -11627) (undo-tree-id1440 . -6) (undo-tree-id1441 . -6) 11633) nil (25851 8004 314633 723000) 0 nil])
([nil nil ((11643 . 11650) (#("T struct{}" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 7 (fontified nil face tree-sitter-hl-face:keyword) 7 8 (fontified nil face tree-sitter-hl-face:keyword) 8 9 (fontified nil face (rainbow-delimiters-depth-3-face)) 9 10 (fontified nil face (rainbow-delimiters-depth-3-face))) . 11643) (11642 . 11643)) nil (25851 8004 314631 870000) 0 nil])
([nil nil ((apply yas--snippet-revive 11642 11664 #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) nil)) (11642 . 11664) (#("LocationResponseObject" 0 22 (fontified nil)) . 11642) (11642 . 11664) (#("Location" 0 8 (fontified nil)) . 11642) (11642 . 11650) (#("LocationResponseObject" 0 22 (fontified nil)) . -11642) (11642 . 11664) (#("Location" 0 8 (fontified t face tree-sitter-hl-face:type)) . -11642) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) 11650) nil (25851 8004 314630 146000) 0 nil])
([nil nil ((11664 . 11667)) nil (25851 8004 314627 241000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -11664) (undo-tree-id1435 . -1) (#("	" 0 1 (fontified t)) . -11665) (undo-tree-id1436 . -1) (#("	" 0 1 (fontified t)) . -11666) (undo-tree-id1437 . -1) 11667) nil (25851 8004 314626 159000) 0 nil])
([nil nil ((apply yas--snippet-revive 11627 11691 #s(yas--snippet nil (#s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil)) #s(yas--field 3 11678 11690 nil nil nil nil nil)) nil 9 nil #s(yas--field 1 11642 11664 nil nil nil t #s(yas--field 2 11666 11676 nil nil nil nil #s(yas--field 3 11678 11690 nil nil nil nil nil))) nil nil))) nil (25851 8004 314623 424000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11689) (undo-tree-id1434 . -1) 11690) nil (25851 8004 314622 903000) 0 nil])
([nil nil ((11689 . 11697)) nil (25851 8004 314621 600000) 0 nil])
([nil nil ((apply yas--snippet-revive 11697 11721 #s(yas--snippet nil nil #s(yas--exit 11720 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11720 nil) 11 nil nil nil nil)) (11697 . 11721) (#("LocationResponseObject{$0\\}" 0 27 (fontified nil)) . 11697) (11689 . 11724) (#("LocationResponseObject{}" 0 24 (fontified nil)) . -11689) (11689 . 11713) (#("Location" 0 8 (fontified t face tree-sitter-hl-face:variable)) . -11689) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) 11697) nil (25851 8004 314620 488000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11668) (undo-tree-id1424 . -1) (#(" " 0 1 (fontified t)) . -11669) (undo-tree-id1425 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11670) (undo-tree-id1426 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11671) (undo-tree-id1427 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11672) (undo-tree-id1428 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11673) (undo-tree-id1429 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11674) (undo-tree-id1430 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11675) (undo-tree-id1431 . -1) 11676) nil (25851 8004 314615 940000) 0 nil])
([nil nil ((11668 . 11669)) nil (25851 8004 314612 253000) 0 nil])
([nil nil ((11625 . 11627)) nil (25851 8004 314611 982000) 0 nil])
([nil nil ((11627 . 11644)) nil (25851 8004 314611 602000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -11642) (undo-tree-id1422 . -1) (#(" " 0 1 (fontified t)) . -11643) (undo-tree-id1423 . -1) 11644) nil (25851 8004 314610 710000) 0 nil])
([nil nil ((11642 . 11649)) nil (25851 8004 314609 528000) 0 nil])
([nil nil ((apply yas--snippet-revive 11642 11668 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (11642 . 11668) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 11642) (11642 . 11668) (#("Locatio" 0 7 (fontified nil)) . 11642) (11642 . 11649) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -11642) (11642 . 11668) (#("Locatio" 0 7 (fontified t face tree-sitter-hl-face:type)) . -11642) (undo-tree-id1420 . -7) (undo-tree-id1421 . -7) 11649) nil (25851 8004 314608 85000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11669) (11669 . 11670) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -11669) (11669 . 11670) (11668 . 11670)) nil (25851 8004 314606 282000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11650) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11651) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11652) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11653) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) 11654) nil (25851 8004 314603 897000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11734) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11735) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11736) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11737) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11738) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11739) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11740) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11741) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("p" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11742) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11743) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11744) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11745) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11746) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11747) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11748) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11749) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11750) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11751) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11752) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11753) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11754) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . 1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) 11755) nil (25851 8004 314584 100000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11722) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11723) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11724) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11725) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11726) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11727) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11728) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11729) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11730) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11731) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11732) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11733) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) 11734) nil (25851 8004 314355 262000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11664) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . 1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11665) (undo-tree-id1459 . -1) (undo-tree-id1460 . 1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) 11666 (t 25851 8004 329299 866000)) nil (25851 8008 754991 676000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11683) (undo-tree-id1501 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11684) (undo-tree-id1502 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11685) (undo-tree-id1503 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11686) (undo-tree-id1504 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11687) (undo-tree-id1505 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11688) (undo-tree-id1506 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11689) (undo-tree-id1507 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11690) (undo-tree-id1508 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11691) (undo-tree-id1509 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11692) (undo-tree-id1510 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11693) (undo-tree-id1511 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11694) (undo-tree-id1512 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11695) (undo-tree-id1513 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11696) (undo-tree-id1514 . -1) (#("O" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11697) (undo-tree-id1515 . -1) (#("b" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11698) (undo-tree-id1516 . -1) (#("j" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11699) (undo-tree-id1517 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11700) (undo-tree-id1518 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11701) (undo-tree-id1519 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11702) (undo-tree-id1520 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11703) (undo-tree-id1521 . -1) (undo-tree-id1522 . 1) (undo-tree-id1523 . -1) 11704 (t 25851 8008 861254 194000)) nil (25851 8029 311362 44000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11680) (undo-tree-id1498 . -1) (#("L" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11681) (undo-tree-id1499 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11682) (undo-tree-id1500 . -1) 11683) nil (25851 8029 311341 415000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -11681) (11681 . 11682) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -11681) (11681 . 11682) (11680 . 11682)) nil (25851 8029 311336 997000) 0 nil])
([nil nil ((11681 . 11685)) nil (25851 8029 311335 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 11681 11703 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (11681 . 11703) (#("LocationResponseObject" 0 22 (fontified nil)) . 11681) (11681 . 11703) (#("Loca" 0 4 (fontified nil)) . 11681) (11681 . 11685) (#("LocationResponseObject" 0 22 (fontified nil)) . -11681) (11681 . 11703) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11681) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) 11685) nil (25851 8029 311333 811000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11016) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11017) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11018) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11019) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11020) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -11021) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11022) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . 1) (undo-tree-id1491 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11023) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . 1) (undo-tree-id1495 . -1) 11024) nil (25851 8029 311327 940000) 0 nil])
([nil nil ((11016 . 11019)) nil (25851 8029 311294 958000) 0 nil])
([nil nil ((11661 . 11668) (t 25851 8029 326047 648000)) nil (25851 8093 644108 537000) 0 nil])
([nil nil ((11700 . 11701)) nil (25851 8093 644107 175000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11686) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11687) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11688) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("o" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11689) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("n" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11690) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("R" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11691) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (#("e" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11692) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("s" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11693) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11694) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11695) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11696) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11697) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11698) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (#("O" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11699) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11700) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("b" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11701) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . 1) (#("j" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11702) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11703) (undo-tree-id1639 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11704) (undo-tree-id1640 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11705) (undo-tree-id1641 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11706) (undo-tree-id1642 . -1) (undo-tree-id1643 . 1) (undo-tree-id1644 . -1) 11707) nil (25851 8093 644102 947000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11682) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("L" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11683) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11684) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11685) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) 11686) nil (25851 8093 644053 925000) 0 nil])
([nil nil ((#("//func GetLocation(url string) LocationResponseObject {
//	val, ok := cache.Get(url)
//	var resultBody LocationResponseObject
//	if !ok {
//		res, err := http.Get(url)
//		if err != nil {
//			log.Fatal(err)
//		}
//		body, err := io.ReadAll(res.Body)
//		res.Body.Close()
//		if res.StatusCode > 299 {
//			log.Fatalf(\"Response failed with status code: %d and\\nbody: %s\\n\", res.StatusCode, body)
//		}
//		if err != nil {
//			log.Fatal(err)
//		}
//		cache.Add(url, body)
//		json.Unmarshal(body, &resultBody)
//		return resultBody
//	} else {
//		json.Unmarshal(val, &resultBody)
//		return resultBody
//	}
//}
" 0 2 (fontified t face tree-sitter-hl-face:comment) 2 6 (fontified t face tree-sitter-hl-face:comment) 6 7 (fontified t face tree-sitter-hl-face:comment) 7 18 (fontified t face tree-sitter-hl-face:comment) 18 19 (fontified t face tree-sitter-hl-face:comment) 19 22 (fontified t face tree-sitter-hl-face:comment) 22 23 (fontified t face tree-sitter-hl-face:comment) 23 29 (fontified t face tree-sitter-hl-face:comment) 29 30 (fontified t face tree-sitter-hl-face:comment) 30 31 (fontified t face tree-sitter-hl-face:comment) 31 53 (fontified t face tree-sitter-hl-face:comment) 53 54 (fontified t face tree-sitter-hl-face:comment) 54 55 (fontified t face tree-sitter-hl-face:comment) 55 56 (fontified t) 56 58 (fontified t face tree-sitter-hl-face:comment) 58 59 (fontified t face tree-sitter-hl-face:comment) 59 62 (fontified t face tree-sitter-hl-face:comment) 62 64 (fontified t face tree-sitter-hl-face:comment) 64 66 (fontified t face tree-sitter-hl-face:comment) 66 67 (fontified t face tree-sitter-hl-face:comment) 67 69 (fontified t face tree-sitter-hl-face:comment) 69 70 (fontified t face tree-sitter-hl-face:comment) 70 75 (fontified t face tree-sitter-hl-face:comment) 75 76 (fontified t face tree-sitter-hl-face:comment) 76 79 (fontified t face tree-sitter-hl-face:comment) 79 80 (fontified t face tree-sitter-hl-face:comment) 80 83 (fontified t face tree-sitter-hl-face:comment) 83 84 (fontified t face tree-sitter-hl-face:comment) 84 85 (fontified t) 85 87 (fontified t face tree-sitter-hl-face:comment) 87 88 (fontified t face tree-sitter-hl-face:comment) 88 91 (fontified t face tree-sitter-hl-face:comment) 91 92 (fontified t face tree-sitter-hl-face:comment) 92 102 (fontified t face tree-sitter-hl-face:comment) 102 103 (fontified t face tree-sitter-hl-face:comment) 103 125 (fontified t face tree-sitter-hl-face:comment) 125 126 (fontified t) 126 128 (fontified t face tree-sitter-hl-face:comment) 128 129 (fontified t face tree-sitter-hl-face:comment) 129 131 (fontified t face tree-sitter-hl-face:comment) 131 132 (fontified t face tree-sitter-hl-face:comment) 132 133 (fontified t face tree-sitter-hl-face:comment) 133 135 (fontified t face tree-sitter-hl-face:comment) 135 136 (fontified t face tree-sitter-hl-face:comment) 136 137 (fontified t face tree-sitter-hl-face:comment) 137 138 (fontified t) 138 140 (fontified t face tree-sitter-hl-face:comment) 140 142 (fontified t face tree-sitter-hl-face:comment) 142 145 (fontified t face tree-sitter-hl-face:comment) 145 147 (fontified t face tree-sitter-hl-face:comment) 147 150 (fontified t face tree-sitter-hl-face:comment) 150 151 (fontified t face tree-sitter-hl-face:comment) 151 153 (fontified t face tree-sitter-hl-face:comment) 153 154 (fontified t face tree-sitter-hl-face:comment) 154 158 (fontified t face tree-sitter-hl-face:comment) 158 159 (fontified t face tree-sitter-hl-face:comment) 159 162 (fontified t face tree-sitter-hl-face:comment) 162 163 (fontified t face tree-sitter-hl-face:comment) 163 166 (fontified t face tree-sitter-hl-face:comment) 166 167 (fontified t face tree-sitter-hl-face:comment) 167 168 (fontified t) 168 170 (fontified t face tree-sitter-hl-face:comment) 170 172 (fontified t face tree-sitter-hl-face:comment) 172 174 (fontified t face tree-sitter-hl-face:comment) 174 175 (fontified t face tree-sitter-hl-face:comment) 175 178 (fontified t face tree-sitter-hl-face:comment) 178 179 (fontified t face tree-sitter-hl-face:comment) 179 181 (fontified t face tree-sitter-hl-face:comment) 181 182 (fontified t face tree-sitter-hl-face:comment) 182 185 (fontified t face tree-sitter-hl-face:comment) 185 186 (fontified t face tree-sitter-hl-face:comment) 186 187 (fontified t face tree-sitter-hl-face:comment) 187 188 (fontified t) 188 190 (fontified t face tree-sitter-hl-face:comment) 190 193 (fontified t face tree-sitter-hl-face:comment) 193 196 (fontified t face tree-sitter-hl-face:comment) 196 197 (fontified t face tree-sitter-hl-face:comment) 197 202 (fontified t face tree-sitter-hl-face:comment) 202 203 (fontified t face tree-sitter-hl-face:comment) 203 206 (fontified t face tree-sitter-hl-face:comment) 206 207 (fontified t face tree-sitter-hl-face:comment) 207 208 (fontified t) 208 210 (fontified t face tree-sitter-hl-face:comment) 210 212 (fontified t face tree-sitter-hl-face:comment) 212 213 (fontified t face tree-sitter-hl-face:comment) 213 214 (fontified t) 214 216 (fontified t face tree-sitter-hl-face:comment) 216 218 (fontified t face tree-sitter-hl-face:comment) 218 222 (fontified t face tree-sitter-hl-face:comment) 222 224 (fontified t face tree-sitter-hl-face:comment) 224 227 (fontified t face tree-sitter-hl-face:comment) 227 228 (fontified t face tree-sitter-hl-face:comment) 228 230 (fontified t face tree-sitter-hl-face:comment) 230 231 (fontified t face tree-sitter-hl-face:comment) 231 233 (fontified t face tree-sitter-hl-face:comment) 233 234 (fontified t face tree-sitter-hl-face:comment) 234 241 (fontified t face tree-sitter-hl-face:comment) 241 242 (fontified t face tree-sitter-hl-face:comment) 242 245 (fontified t face tree-sitter-hl-face:comment) 245 246 (fontified t face tree-sitter-hl-face:comment) 246 250 (fontified t face tree-sitter-hl-face:comment) 250 251 (fontified t face tree-sitter-hl-face:comment) 251 252 (fontified t) 252 254 (fontified t face tree-sitter-hl-face:comment) 254 256 (fontified t face tree-sitter-hl-face:comment) 256 259 (fontified t face tree-sitter-hl-face:comment) 259 260 (fontified t face tree-sitter-hl-face:comment) 260 264 (fontified t face tree-sitter-hl-face:comment) 264 265 (fontified t face tree-sitter-hl-face:comment) 265 270 (fontified t face tree-sitter-hl-face:comment) 270 271 (fontified t face tree-sitter-hl-face:comment) 271 272 (fontified t face tree-sitter-hl-face:comment) 272 273 (fontified t) 273 275 (fontified t face tree-sitter-hl-face:comment) 275 277 (fontified t face tree-sitter-hl-face:comment) 277 279 (fontified t face tree-sitter-hl-face:comment) 279 280 (fontified t face tree-sitter-hl-face:comment) 280 283 (fontified t face tree-sitter-hl-face:comment) 283 284 (fontified t face tree-sitter-hl-face:comment) 284 294 (fontified t face tree-sitter-hl-face:comment) 294 295 (fontified t face tree-sitter-hl-face:comment) 295 296 (fontified t face tree-sitter-hl-face:comment) 296 297 (fontified t face tree-sitter-hl-face:comment) 297 300 (fontified t face tree-sitter-hl-face:comment) 300 301 (fontified t face tree-sitter-hl-face:comment) 301 302 (fontified t face tree-sitter-hl-face:comment) 302 303 (fontified t) 303 305 (fontified t face tree-sitter-hl-face:comment) 305 308 (fontified t face tree-sitter-hl-face:comment) 308 311 (fontified t face tree-sitter-hl-face:comment) 311 312 (fontified t face tree-sitter-hl-face:comment) 312 318 (fontified t face tree-sitter-hl-face:comment) 318 319 (fontified t face tree-sitter-hl-face:comment) 319 360 (fontified t face tree-sitter-hl-face:comment) 360 361 (syntax-table (9) fontified t face tree-sitter-hl-face:comment) 361 362 (fontified t face tree-sitter-hl-face:comment) 362 370 (fontified t face tree-sitter-hl-face:comment) 370 371 (syntax-table (9) fontified t face tree-sitter-hl-face:comment) 371 372 (fontified t face tree-sitter-hl-face:comment) 372 373 (fontified t face tree-sitter-hl-face:comment) 373 375 (fontified t face tree-sitter-hl-face:comment) 375 378 (fontified t face tree-sitter-hl-face:comment) 378 379 (fontified t face tree-sitter-hl-face:comment) 379 389 (fontified t face tree-sitter-hl-face:comment) 389 391 (fontified t face tree-sitter-hl-face:comment) 391 395 (fontified t face tree-sitter-hl-face:comment) 395 396 (fontified t face tree-sitter-hl-face:comment) 396 397 (fontified t) 397 399 (fontified t face tree-sitter-hl-face:comment) 399 401 (fontified t face tree-sitter-hl-face:comment) 401 402 (fontified t face tree-sitter-hl-face:comment) 402 403 (fontified t) 403 405 (fontified t face tree-sitter-hl-face:comment) 405 407 (fontified t face tree-sitter-hl-face:comment) 407 409 (fontified t face tree-sitter-hl-face:comment) 409 410 (fontified t face tree-sitter-hl-face:comment) 410 413 (fontified t face tree-sitter-hl-face:comment) 413 414 (fontified t face tree-sitter-hl-face:comment) 414 416 (fontified t face tree-sitter-hl-face:comment) 416 417 (fontified t face tree-sitter-hl-face:comment) 417 420 (fontified t face tree-sitter-hl-face:comment) 420 421 (fontified t face tree-sitter-hl-face:comment) 421 422 (fontified t face tree-sitter-hl-face:comment) 422 423 (fontified t) 423 425 (fontified t face tree-sitter-hl-face:comment) 425 428 (fontified t face tree-sitter-hl-face:comment) 428 431 (fontified t face tree-sitter-hl-face:comment) 431 432 (fontified t face tree-sitter-hl-face:comment) 432 437 (fontified t face tree-sitter-hl-face:comment) 437 438 (fontified t face tree-sitter-hl-face:comment) 438 441 (fontified t face tree-sitter-hl-face:comment) 441 442 (fontified t face tree-sitter-hl-face:comment) 442 443 (fontified t) 443 445 (fontified t face tree-sitter-hl-face:comment) 445 447 (fontified t face tree-sitter-hl-face:comment) 447 448 (fontified t face tree-sitter-hl-face:comment) 448 449 (fontified t) 449 451 (fontified t face tree-sitter-hl-face:comment) 451 453 (fontified t face tree-sitter-hl-face:comment) 453 458 (fontified t face tree-sitter-hl-face:comment) 458 459 (fontified t face tree-sitter-hl-face:comment) 459 462 (fontified t face tree-sitter-hl-face:comment) 462 463 (fontified t face tree-sitter-hl-face:comment) 463 466 (fontified t face tree-sitter-hl-face:comment) 466 468 (fontified t face tree-sitter-hl-face:comment) 468 472 (fontified t face tree-sitter-hl-face:comment) 472 473 (fontified t face tree-sitter-hl-face:comment) 473 474 (fontified t) 474 476 (fontified t face tree-sitter-hl-face:comment) 476 478 (fontified t face tree-sitter-hl-face:comment) 478 482 (fontified t face tree-sitter-hl-face:comment) 482 483 (fontified t face tree-sitter-hl-face:comment) 483 489 (fontified t face tree-sitter-hl-face:comment) 489 492 (fontified t face tree-sitter-hl-face:comment) 492 493 (fontified t face tree-sitter-hl-face:comment) 493 497 (fontified t face tree-sitter-hl-face:comment) 497 499 (fontified t face tree-sitter-hl-face:comment) 499 500 (fontified t face tree-sitter-hl-face:comment) 500 510 (fontified t face tree-sitter-hl-face:comment) 510 511 (fontified t face tree-sitter-hl-face:comment) 511 512 (fontified t) 512 514 (fontified t face tree-sitter-hl-face:comment) 514 516 (fontified t face tree-sitter-hl-face:comment) 516 522 (fontified t face tree-sitter-hl-face:comment) 522 523 (fontified t face tree-sitter-hl-face:comment) 523 533 (fontified t face tree-sitter-hl-face:comment) 533 534 (fontified t) 534 536 (fontified t face tree-sitter-hl-face:comment) 536 537 (fontified t face tree-sitter-hl-face:comment) 537 538 (fontified t face tree-sitter-hl-face:comment) 538 539 (fontified t face tree-sitter-hl-face:comment) 539 543 (fontified t face tree-sitter-hl-face:comment) 543 544 (fontified t face tree-sitter-hl-face:comment) 544 545 (fontified t face tree-sitter-hl-face:comment) 545 546 (fontified t) 546 548 (fontified t face tree-sitter-hl-face:comment) 548 550 (fontified t face tree-sitter-hl-face:comment) 550 554 (fontified t face tree-sitter-hl-face:comment) 554 555 (fontified t face tree-sitter-hl-face:comment) 555 564 (fontified t face tree-sitter-hl-face:comment) 564 565 (fontified t face tree-sitter-hl-face:comment) 565 568 (fontified t face tree-sitter-hl-face:comment) 568 570 (fontified t face tree-sitter-hl-face:comment) 570 571 (fontified t face tree-sitter-hl-face:comment) 571 581 (fontified t face tree-sitter-hl-face:comment) 581 582 (fontified t face tree-sitter-hl-face:comment) 582 583 (fontified t) 583 585 (fontified t face tree-sitter-hl-face:comment) 585 587 (fontified t face tree-sitter-hl-face:comment) 587 593 (fontified t face tree-sitter-hl-face:comment) 593 594 (fontified t face tree-sitter-hl-face:comment) 594 604 (fontified t face tree-sitter-hl-face:comment) 604 605 (fontified t) 605 607 (fontified t face tree-sitter-hl-face:comment) 607 608 (fontified t face tree-sitter-hl-face:comment) 608 609 (fontified t face tree-sitter-hl-face:comment) 609 610 (fontified t) 610 612 (fontified t face tree-sitter-hl-face:comment) 612 613 (fontified t face tree-sitter-hl-face:comment) 613 614 (fontified t)) . 11703) (undo-tree-id1686 . -612) (undo-tree-id1687 . -612) (undo-tree-id1688 . -2) (undo-tree-id1689 . -613) (undo-tree-id1690 . -613) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -612) 11705 (t 25851 8093 751394 353000)) nil (25851 8163 561892 942000) 0 nil])
([nil nil ((11702 . 11703)) nil (25851 8163 561887 852000) 0 nil])
([nil nil ((11703 . 11723)) nil (25851 8163 561887 522000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11724) (11724 . 11725) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11724) (11724 . 11725) (11723 . 11725)) nil (25851 8163 561886 860000) 0 nil])
([nil nil ((11724 . 11734)) nil (25851 8163 561885 989000) 0 nil])
([nil nil ((11735 . 11740)) nil (25851 8163 561885 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 11736 11762 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (11736 . 11762) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 11736) (11736 . 11762) (#("Loca" 0 4 (fontified nil)) . 11736) (11736 . 11740) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -11736) (11736 . 11762) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11736) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) 11740) nil (25851 8163 561883 975000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11764) (11764 . 11765) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11764) (11764 . 11765) (11762 . 11765)) nil (25851 8163 561881 280000) 0 nil])
([nil nil ((11765 . 11766) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 11765) (11765 . 11766) (11764 . 11766)) nil (25851 8163 561879 166000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11767 . 11768) (#("
" 0 1 (fontified nil)) . -11846) (11766 . 11847) 11765) nil (25851 8163 561877 814000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 11765) (undo-tree-id1683 . -1)) nil (25851 8163 561877 323000) 0 nil])
([nil nil ((11844 . 11846)) nil (25851 8163 561875 649000) 0 nil])
([nil nil ((11846 . 11859)) nil (25851 8163 561874 828000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11868 11868 nil nil nil t #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil))) #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil)) #s(yas--field 3 11882 11894 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 11868 11868 nil nil nil t #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil))) nil nil)) (11853 . 11900) (#("handleRequests[${1:T any}](${2:url string}, ${3:resultBody T})" 0 62 (fontified nil)) . 11853) (11853 . 11915) (#("handle" 0 6 (fontified nil)) . 11853) (11853 . 11859) (#("handleRequests" 0 14 (fontified nil)) . -11853) (11853 . 11867) (#("handle" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -11853) (undo-tree-id1681 . -6) (undo-tree-id1682 . -6) 11859) nil (25851 8163 561872 684000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11868) (undo-tree-id1676 . -1) (#(" " 0 1 (fontified t)) . -11869) (undo-tree-id1677 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11870) (undo-tree-id1678 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11871) (undo-tree-id1679 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11872) (undo-tree-id1680 . -1) 11873) nil (25851 8163 561869 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 11853 11895 #s(yas--snippet nil (#s(yas--field 1 11868 11868 nil nil nil t #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil))) #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil)) #s(yas--field 3 11882 11894 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 11868 11868 nil nil nil t #s(yas--field 2 11870 11880 nil nil nil nil #s(yas--field 3 11882 11894 nil nil nil nil nil))) nil nil))) nil (25851 8163 561866 993000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11892) (undo-tree-id1674 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11893) (undo-tree-id1675 . -1) 11894) nil (25851 8163 561866 252000) 0 nil])
([nil nil ((11844 . 11846)) nil (25851 8163 561864 789000) 0 nil])
([nil nil ((11846 . 11853)) nil (25851 8163 561864 419000) 0 nil])
([nil nil ((11853 . 11863)) nil (25851 8163 561864 18000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -11861) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#(" " 0 1 (fontified t)) . -11862) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) 11863) nil (25851 8163 561863 126000) 0 nil])
([nil nil ((11861 . 11865)) nil (25851 8163 561849 300000) 0 nil])
([nil nil ((apply yas--snippet-revive 11861 11887 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (11861 . 11887) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 11861) (11861 . 11887) (#("Loca" 0 4 (fontified nil)) . 11861) (11861 . 11865) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -11861) (11861 . 11887) (#("Loca" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11861) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -1) (undo-tree-id1648 . -2) (undo-tree-id1649 . -3) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) 11865) nil (25851 8163 561844 221000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11910) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . 1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11911) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . 1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) 11912 (t 25851 8163 635680 975000)) nil (25851 8170 457164 732000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11914) (undo-tree-id1729 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11915) (undo-tree-id1730 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11916) (undo-tree-id1731 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11917) (undo-tree-id1732 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11918) (undo-tree-id1733 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11919) (undo-tree-id1734 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11920) (undo-tree-id1735 . -1) 11921 (t 25851 8170 471610 948000)) nil (25851 8289 553083 408000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -11911) (11911 . 11912) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -11911) (11911 . 11912) (11910 . 11912)) nil (25851 8289 553077 126000) 0 nil])
([nil nil ((11911 . 11913)) nil (25851 8289 553075 824000) 0 nil])
([nil nil ((11913 . 11919)) nil (25851 8289 553075 363000) 0 nil])
([nil nil ((apply yas--snippet-revive 11911 11937 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (11911 . 11937) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . 11911) (11911 . 11937) (#("Location" 0 8 (fontified nil)) . 11911) (11911 . 11919) (#("LocationAreaResponseObject" 0 26 (fontified nil)) . -11911) (11911 . 11937) (#("Location" 0 8 (fontified t face tree-sitter-hl-face:type)) . -11911) (undo-tree-id1727 . -8) (undo-tree-id1728 . -8) 11919) nil (25851 8289 553073 740000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11724) (undo-tree-id1724 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11725) (undo-tree-id1725 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11726) (undo-tree-id1726 . -1) 11727) nil (25851 8289 553070 12000) 0 nil])
([nil nil ((11724 . 11736)) nil (25851 8289 553067 508000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11724) (undo-tree-id1712 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11725) (undo-tree-id1713 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11726) (undo-tree-id1714 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11727) (undo-tree-id1715 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11728) (undo-tree-id1716 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11729) (undo-tree-id1717 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11730) (undo-tree-id1718 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11731) (undo-tree-id1719 . -1) (#("N" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11732) (undo-tree-id1720 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11733) (undo-tree-id1721 . -1) (#("m" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11734) (undo-tree-id1722 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11735) (undo-tree-id1723 . -1) 11736) nil (25851 8289 553064 472000) 0 nil])
([nil nil ((11724 . 11727)) nil (25851 8289 553057 18000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11726) (undo-tree-id1711 . -1) 11727) nil (25851 8289 553055 435000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11725) (undo-tree-id1710 . -1) 11726) nil (25851 8289 553054 32000) 0 nil])
([nil nil ((11725 . 11731)) nil (25851 8289 553052 269000) 0 nil])
([nil nil ((11024 . 11028)) nil (25851 8289 553051 347000) 0 nil])
([nil nil ((11591 . 11592)) nil (25851 8289 553050 956000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11591) (undo-tree-id1709 . -1) 11592) nil (25851 8289 553049 854000) 0 nil])
([nil nil ((11591 . 11595)) nil (25851 8289 553039 124000) 0 nil])
([nil nil ((11080 . 11084)) nil (25851 8289 553038 442000) 0 nil])
([nil nil ((11164 . 11168)) nil (25851 8289 553032 541000) 0 nil])
([nil nil ((11702 . 11706) (t 25851 8289 660631 587000)) nil (25851 9050 540916 535000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11744) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11745) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11746) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#("P" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11747) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11748) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11749) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -11750) (undo-tree-id1820 . -1) 11751) nil (25851 9050 540915 443000) 0 nil])
([nil nil ((11744 . 11756)) nil (25851 9050 540908 811000) 0 nil])
([nil nil ((#("func GetLocationArea(locationArea string) LocationAreaResponseObject {
	url := fmt.Sprintf(\"https://pokeapi.co/api/v2/location-area/%s\", locationArea)
	val, ok := cache.Get(url)
	var resultBody LocationAreaResponseObject
	if !ok {
		res, err := http.Get(url)
		if err != nil {
			log.Fatal(err)
		}
		body, err := io.ReadAll(res.Body)
		res.Body.Close()
		if res.StatusCode > 299 {
			log.Fatalf(\"Response failed with status code: %d and\\nbody: %s\\n\", res.StatusCode, body)
		}
		if err != nil {
			log.Fatal(err)
		}
		cache.Add(url, body)
		json.Unmarshal(body, &resultBody)
		return resultBody
	} else {
		json.Unmarshal(val, &resultBody)
		return resultBody
	}
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 20 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 32 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 32 33 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 33 34 (fontified t) 34 40 (fontified t face tree-sitter-hl-face:type) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t) 42 68 (fontified t face tree-sitter-hl-face:type) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 72 (fontified t) 72 75 (fontified t face tree-sitter-hl-face:variable) 75 76 (fontified t) 76 78 (fontified t face tree-sitter-hl-face:operator) 78 79 (fontified t) 79 82 (fontified t face tree-sitter-hl-face:variable) 82 83 (fontified t) 83 90 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 92 (fontified t face tree-sitter-hl-face:string) 92 97 (fontified t face tree-sitter-hl-face:string) 97 98 (fontified t face tree-sitter-hl-face:string) 98 130 (fontified t face tree-sitter-hl-face:string) 130 135 (fontified t face tree-sitter-hl-face:string) 135 137 (fontified t) 137 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t face (rainbow-delimiters-depth-2-face)) 150 152 (fontified t) 152 155 (fontified t face tree-sitter-hl-face:variable) 155 157 (fontified t) 157 159 (fontified t face tree-sitter-hl-face:variable) 159 160 (fontified t) 160 162 (fontified t face tree-sitter-hl-face:operator) 162 163 (fontified t) 163 168 (fontified t face tree-sitter-hl-face:variable) 168 169 (fontified t) 169 172 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 172 173 (fontified t face (rainbow-delimiters-depth-2-face)) 173 176 (fontified t face tree-sitter-hl-face:variable) 176 177 (fontified t face (rainbow-delimiters-depth-2-face)) 177 179 (fontified t) 179 182 (fontified t face tree-sitter-hl-face:keyword) 182 183 (fontified t) 183 193 (fontified t face tree-sitter-hl-face:variable) 193 194 (fontified t) 194 220 (fontified t face tree-sitter-hl-face:type) 220 222 (fontified t) 222 224 (fontified t face tree-sitter-hl-face:keyword) 224 225 (fontified t) 225 226 (fontified t face tree-sitter-hl-face:operator) 226 228 (fontified t face tree-sitter-hl-face:variable) 228 229 (fontified t) 229 230 (fontified t face (rainbow-delimiters-depth-2-face)) 230 233 (fontified t) 233 236 (fontified t face tree-sitter-hl-face:variable) 236 238 (fontified t) 238 241 (fontified t face tree-sitter-hl-face:variable) 241 242 (fontified t) 242 244 (fontified t face tree-sitter-hl-face:operator) 244 245 (fontified t) 245 249 (fontified t face tree-sitter-hl-face:variable) 249 250 (fontified t) 250 253 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 253 254 (fontified t face (rainbow-delimiters-depth-3-face)) 254 257 (fontified t face tree-sitter-hl-face:variable) 257 258 (fontified t face (rainbow-delimiters-depth-3-face)) 258 261 (fontified t) 261 263 (fontified t face tree-sitter-hl-face:keyword) 263 264 (fontified t) 264 267 (fontified t face tree-sitter-hl-face:variable) 267 268 (fontified t) 268 270 (fontified t face tree-sitter-hl-face:operator) 270 271 (fontified t) 271 274 (fontified t face tree-sitter-hl-face:constant\.builtin) 274 275 (fontified t) 275 276 (fontified t face (rainbow-delimiters-depth-3-face)) 276 280 (fontified t) 280 283 (fontified t face tree-sitter-hl-face:variable) 283 284 (fontified t) 284 289 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 289 290 (fontified t face (rainbow-delimiters-depth-4-face)) 290 293 (fontified t face tree-sitter-hl-face:variable) 293 294 (fontified t face (rainbow-delimiters-depth-4-face)) 294 295 (fontified t) 295 296 (fontified t) 296 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-3-face)) 298 299 (fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 305 (fontified t face tree-sitter-hl-face:variable) 305 307 (fontified t) 307 310 (fontified t face tree-sitter-hl-face:variable) 310 311 (fontified t) 311 313 (fontified t face tree-sitter-hl-face:operator) 313 314 (fontified t) 314 316 (fontified t face tree-sitter-hl-face:variable) 316 317 (fontified t) 317 324 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 324 325 (fontified t face (rainbow-delimiters-depth-3-face)) 325 328 (fontified t face tree-sitter-hl-face:variable) 328 329 (fontified t) 329 333 (fontified t face tree-sitter-hl-face:property) 333 334 (fontified t face (rainbow-delimiters-depth-3-face)) 334 337 (fontified t) 337 340 (fontified t face tree-sitter-hl-face:variable) 340 341 (fontified t) 341 345 (fontified t face tree-sitter-hl-face:property) 345 346 (fontified t) 346 351 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 351 352 (fontified t face (rainbow-delimiters-depth-3-face)) 352 353 (fontified t face (rainbow-delimiters-depth-3-face)) 353 356 (fontified t) 356 358 (fontified t face tree-sitter-hl-face:keyword) 358 359 (fontified t) 359 362 (fontified t face tree-sitter-hl-face:variable) 362 363 (fontified t) 363 373 (fontified t face tree-sitter-hl-face:property) 373 374 (fontified t) 374 375 (fontified t face tree-sitter-hl-face:operator) 375 376 (fontified t) 376 379 (fontified t face tree-sitter-hl-face:number) 379 380 (fontified t) 380 381 (fontified t face (rainbow-delimiters-depth-3-face)) 381 385 (fontified t) 385 388 (fontified t face tree-sitter-hl-face:variable) 388 389 (fontified t) 389 395 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 395 396 (fontified t face (rainbow-delimiters-depth-4-face)) 396 435 (fontified t face tree-sitter-hl-face:string) 435 437 (fontified t face tree-sitter-hl-face:string) 437 438 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9)) 438 439 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 439 447 (fontified t face tree-sitter-hl-face:string) 447 448 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9)) 448 449 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 449 450 (fontified t face tree-sitter-hl-face:string) 450 452 (fontified t) 452 455 (fontified t face tree-sitter-hl-face:variable) 455 456 (fontified t) 456 466 (fontified t face tree-sitter-hl-face:property) 466 468 (fontified t) 468 472 (fontified t face tree-sitter-hl-face:variable) 472 473 (fontified t face (rainbow-delimiters-depth-4-face)) 473 476 (fontified t) 476 477 (fontified t face (rainbow-delimiters-depth-3-face)) 477 480 (fontified t) 480 482 (fontified t face tree-sitter-hl-face:keyword) 482 483 (fontified t) 483 486 (fontified t face tree-sitter-hl-face:variable) 486 487 (fontified t) 487 489 (fontified t face tree-sitter-hl-face:operator) 489 490 (fontified t) 490 493 (fontified t face tree-sitter-hl-face:constant\.builtin) 493 494 (fontified t) 494 495 (fontified t face (rainbow-delimiters-depth-3-face)) 495 499 (fontified t) 499 502 (fontified t face tree-sitter-hl-face:variable) 502 503 (fontified t) 503 508 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 508 509 (fontified t face (rainbow-delimiters-depth-4-face)) 509 512 (fontified t face tree-sitter-hl-face:variable) 512 513 (fontified t face (rainbow-delimiters-depth-4-face)) 513 516 (fontified t) 516 517 (fontified t face (rainbow-delimiters-depth-3-face)) 517 520 (fontified t) 520 525 (fontified t face tree-sitter-hl-face:variable) 525 526 (fontified t) 526 529 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 529 530 (fontified t face (rainbow-delimiters-depth-3-face)) 530 533 (fontified t face tree-sitter-hl-face:variable) 533 535 (fontified t) 535 539 (fontified t face tree-sitter-hl-face:variable) 539 540 (fontified t face (rainbow-delimiters-depth-3-face)) 540 543 (fontified t) 543 547 (fontified t face tree-sitter-hl-face:variable) 547 548 (fontified t) 548 557 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 557 558 (fontified t face (rainbow-delimiters-depth-3-face)) 558 562 (fontified t face tree-sitter-hl-face:variable) 562 564 (fontified t) 564 565 (fontified t face tree-sitter-hl-face:operator) 565 575 (fontified t face tree-sitter-hl-face:variable) 575 576 (fontified t face (rainbow-delimiters-depth-3-face)) 576 579 (fontified t) 579 585 (fontified t face tree-sitter-hl-face:keyword) 585 586 (fontified t) 586 596 (fontified t face tree-sitter-hl-face:variable) 596 598 (fontified t) 598 599 (fontified t face (rainbow-delimiters-depth-2-face)) 599 600 (fontified t) 600 604 (fontified t face tree-sitter-hl-face:keyword) 604 605 (fontified t) 605 606 (fontified t face (rainbow-delimiters-depth-2-face)) 606 609 (fontified t) 609 613 (fontified t face tree-sitter-hl-face:variable) 613 614 (fontified t) 614 623 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 623 624 (fontified t face (rainbow-delimiters-depth-3-face)) 624 627 (fontified t face tree-sitter-hl-face:variable) 627 629 (fontified t) 629 630 (fontified t face tree-sitter-hl-face:operator) 630 640 (fontified t face tree-sitter-hl-face:variable) 640 641 (fontified t face (rainbow-delimiters-depth-3-face)) 641 644 (fontified t) 644 650 (fontified t face tree-sitter-hl-face:keyword) 650 651 (fontified t) 651 661 (fontified t face tree-sitter-hl-face:variable) 661 663 (fontified t) 663 664 (fontified t face (rainbow-delimiters-depth-2-face)) 664 665 (fontified t) 665 666 (fontified t face (rainbow-delimiters-depth-1-face)) 666 667 (fontified t)) . 11988) (undo-tree-id1799 . -665) (undo-tree-id1800 . -665) (undo-tree-id1801 . 1) (undo-tree-id1802 . -666) (undo-tree-id1803 . -666) (undo-tree-id1804 . -664) (undo-tree-id1805 . -150) (undo-tree-id1806 . -666) (undo-tree-id1807 . -665)) nil (25851 9050 540908 89000) 0 nil])
([nil nil ((#("Part" 0 4 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . 11599) (undo-tree-id1793 . -4) (undo-tree-id1794 . -3) (undo-tree-id1795 . -4) (undo-tree-id1796 . -3) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) 11601 (#("Part" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 11702) 11699) nil (25851 9050 540904 753000) 0 nil])
([nil nil ((#("Part" 0 4 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . 11024) (undo-tree-id1790 . -3) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) 11027 (#("Part" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 11080) 11077 (#("Part" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 11164) 11161) nil (25851 9050 540901 227000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11926) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11927) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11928) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11929) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11930) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11931) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11932) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11933) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11934) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11935) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11936) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11937) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11938) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11939) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("O" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11940) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (#("b" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11941) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (#("j" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11942) (undo-tree-id1782 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11943) (undo-tree-id1783 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11944) (undo-tree-id1784 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11945) (undo-tree-id1785 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11946) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . 1) (undo-tree-id1789 . -1) 11947) nil (25851 9050 540895 957000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -11919) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("L" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11920) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11921) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11922) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11923) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11924) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -11925) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 11926) nil (25851 9050 540869 307000) 0 nil])
([nil nil ((11938 . 11940) (t 25851 9050 649509 635000)) nil (25851 9120 194836 906000) 0 nil])
([nil nil ((11940 . 11948)) nil (25851 9120 194836 465000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11956) (11956 . 11957) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11956) (11956 . 11957) (11948 . 11957)) nil (25851 9120 194835 934000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -11948) (undo-tree-id1855 . -1) 11949) nil (25851 9120 194835 433000) 0 nil])
([nil nil ((11948 . 11949)) nil (25851 9120 194834 842000) 0 nil])
([nil nil ((11956 . 11961)) nil (25851 9120 194834 371000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11960) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) 11961) nil (25851 9120 194834 1000) 0 nil])
([nil nil ((11960 . 11963)) nil (25851 9120 194833 9000) 0 nil])
([nil nil ((11963 . 11974)) nil (25851 9120 194832 448000) 0 nil])
([nil nil ((11975 . 11980)) nil (25851 9120 194832 77000) 0 nil])
([nil nil ((apply yas--snippet-revive 11976 11997 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (11976 . 11997) (#("PokemonResponseObject" 0 21 (fontified nil)) . 11976) (11976 . 11997) (#("Poke" 0 4 (fontified nil)) . 11976) (11976 . 11980) (#("PokemonResponseObject" 0 21 (fontified nil)) . -11976) (11976 . 11997) (#("Poke" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11976) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) 11980) nil (25851 9120 194831 376000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -11999) (11999 . 12000) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11999) (11999 . 12000) (11997 . 12000)) nil (25851 9120 194829 803000) 0 nil])
([nil nil ((12000 . 12001) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 12000) (12000 . 12001) (11999 . 12001)) nil (25851 9120 194829 162000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -12074) (12001 . 12075) 12000) nil (25851 9120 194828 450000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 12000) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1)) nil (25851 9120 194827 569000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12073 . 12074) (#("
" 0 1 (fontified nil)) . -12110) (12072 . 12111) 12060) nil (25851 9120 194824 623000) 0 nil])
([nil nil ((12110 . 12112)) nil (25851 9120 194824 102000) 0 nil])
([nil nil ((12112 . 12123)) nil (25851 9120 194823 701000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12133 12133 nil nil nil t #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil))) #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil)) #s(yas--field 3 12146 12158 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 12133 12133 nil nil nil t #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil))) nil nil)) (12119 . 12166) (#("handleRequests[${1:T any}](${2:url string}, ${3:resultBody T})" 0 62 (fontified nil)) . 12119) (12119 . 12181) (#("hand" 0 4 (fontified nil)) . 12119) (12119 . 12123) (#("handleRequests" 0 14 (fontified nil)) . -12119) (12119 . 12133) (#("hand" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -12119) (undo-tree-id1844 . -4) (undo-tree-id1845 . -4) 12123) nil (25851 9120 194822 509000) 0 nil])
([nil nil ((#("T any" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:type)) . 12134)) nil (25851 9120 194820 525000) 0 nil])
([nil nil ((#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -12133) (undo-tree-id1836 . -1) (undo-tree-id1837 . 1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 12134) (undo-tree-id1841 . 1) (undo-tree-id1842 . -1) (undo-tree-id1843 . 1)) nil (25851 9120 194819 794000) 0 nil])
([nil nil ((apply yas--snippet-revive 12119 12159 #s(yas--snippet nil (#s(yas--field 1 12133 12133 nil nil nil t #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil))) #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil)) #s(yas--field 3 12146 12158 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 12133 12133 nil nil nil t #s(yas--field 2 12134 12144 nil nil nil nil #s(yas--field 3 12146 12158 nil nil nil nil nil))) nil nil))) nil (25851 9120 194814 815000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t face tree-sitter-hl-face:variable)) . 12138) (undo-tree-id1834 . -5) (undo-tree-id1835 . -6) 12144) nil (25851 9120 194814 83000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12137) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 12138) nil (25851 9120 194812 490000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 12150) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1)) nil (25851 9120 194809 935000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 12149) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1)) nil (25851 9120 194804 235000) 0 nil])
([nil nil ((#("func GetPokemon(pokemonName string) PokemonResponseObject {
	url := fmt.Sprintf(\"https://pokeapi.co/api/v2/pokemon/%s\", pokemonName)
	val, ok := cache.Get(url)
	var resultBody PokemonResponseObject
	if !ok {
		res, err := http.Get(url)
		if err != nil {
			log.Fatal(err)
		}
		body, err := io.ReadAll(res.Body)
		res.Body.Close()
		if res.StatusCode > 299 {
			log.Fatalf(\"Response failed with status code: %d and\\nbody: %s\\n\", res.StatusCode, body)
		}
		if err != nil {
			log.Fatal(err)
		}
		cache.Add(url, body)
		json.Unmarshal(body, &resultBody)
		return resultBody
	} else {
		json.Unmarshal(val, &resultBody)
		return resultBody
	}
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 15 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 27 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 27 28 (fontified t) 28 34 (fontified t face tree-sitter-hl-face:type) 34 35 (fontified t face (rainbow-delimiters-depth-1-face)) 35 36 (fontified t) 36 57 (fontified t face tree-sitter-hl-face:type) 57 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-1-face)) 59 60 (fontified t) 60 61 (rear-nonsticky t fontified t) 61 62 (fontified t face tree-sitter-hl-face:variable) 62 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t) 65 67 (fontified t face tree-sitter-hl-face:operator) 67 68 (fontified t) 68 71 (fontified t face tree-sitter-hl-face:variable) 71 72 (fontified t) 72 79 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 79 80 (fontified t face (rainbow-delimiters-depth-2-face)) 80 81 (fontified t face tree-sitter-hl-face:string) 81 114 (fontified t face tree-sitter-hl-face:string) 114 115 (rear-nonsticky t fontified t face tree-sitter-hl-face:string) 115 118 (fontified t face tree-sitter-hl-face:string) 118 119 (fontified t) 119 120 (fontified t) 120 124 (fontified t face tree-sitter-hl-face:variable) 124 125 (fontified t face tree-sitter-hl-face:variable) 125 126 (fontified t face tree-sitter-hl-face:variable) 126 127 (fontified t face tree-sitter-hl-face:variable) 127 131 (fontified t face tree-sitter-hl-face:variable) 131 132 (fontified t face (rainbow-delimiters-depth-2-face)) 132 133 (fontified t) 133 134 (fontified t) 134 137 (fontified t face tree-sitter-hl-face:variable) 137 139 (fontified t) 139 141 (fontified t face tree-sitter-hl-face:variable) 141 142 (fontified t) 142 144 (fontified t face tree-sitter-hl-face:operator) 144 145 (fontified t) 145 150 (fontified t face tree-sitter-hl-face:variable) 150 151 (fontified t) 151 154 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 154 155 (fontified t face (rainbow-delimiters-depth-2-face)) 155 156 (fontified t face tree-sitter-hl-face:variable) 156 158 (fontified t face tree-sitter-hl-face:variable) 158 159 (fontified t face (rainbow-delimiters-depth-2-face)) 159 160 (fontified t) 160 161 (fontified t) 161 164 (fontified t face tree-sitter-hl-face:keyword) 164 165 (fontified t) 165 169 (fontified t face tree-sitter-hl-face:variable) 169 175 (fontified t face tree-sitter-hl-face:variable) 175 176 (fontified t) 176 197 (fontified t face tree-sitter-hl-face:type) 197 198 (fontified t) 198 199 (fontified t) 199 201 (fontified t face tree-sitter-hl-face:keyword) 201 202 (fontified t) 202 203 (fontified t face tree-sitter-hl-face:operator) 203 205 (fontified t face tree-sitter-hl-face:variable) 205 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-2-face)) 207 209 (fontified t) 209 210 (fontified t) 210 212 (fontified t face tree-sitter-hl-face:variable) 212 213 (fontified t face tree-sitter-hl-face:variable) 213 215 (fontified t) 215 216 (fontified t face tree-sitter-hl-face:variable) 216 217 (fontified t face tree-sitter-hl-face:variable) 217 218 (fontified t face tree-sitter-hl-face:variable) 218 219 (fontified t) 219 221 (fontified t face tree-sitter-hl-face:operator) 221 222 (fontified t) 222 226 (fontified t face tree-sitter-hl-face:variable) 226 227 (fontified t) 227 230 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 230 231 (fontified t face (rainbow-delimiters-depth-3-face)) 231 234 (fontified t face tree-sitter-hl-face:variable) 234 235 (fontified t face (rainbow-delimiters-depth-3-face)) 235 238 (fontified t) 238 240 (fontified t face tree-sitter-hl-face:keyword) 240 241 (fontified t) 241 242 (fontified t face tree-sitter-hl-face:variable) 242 244 (fontified t face tree-sitter-hl-face:variable) 244 245 (fontified t) 245 247 (fontified t face tree-sitter-hl-face:operator) 247 248 (fontified t) 248 251 (fontified t face tree-sitter-hl-face:constant\.builtin) 251 252 (fontified t) 252 253 (fontified t face (rainbow-delimiters-depth-3-face)) 253 257 (fontified t) 257 260 (fontified t face tree-sitter-hl-face:variable) 260 261 (fontified t) 261 263 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 263 264 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 264 265 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 265 266 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 266 267 (fontified t face (rainbow-delimiters-depth-4-face)) 267 270 (fontified t face tree-sitter-hl-face:variable) 270 271 (fontified t face (rainbow-delimiters-depth-4-face)) 271 272 (fontified t) 272 274 (fontified t) 274 275 (fontified t face (rainbow-delimiters-depth-3-face)) 275 278 (fontified t) 278 282 (fontified t face tree-sitter-hl-face:variable) 282 284 (fontified t) 284 287 (fontified t face tree-sitter-hl-face:variable) 287 288 (fontified t) 288 290 (fontified t face tree-sitter-hl-face:operator) 290 291 (fontified t) 291 293 (fontified t face tree-sitter-hl-face:variable) 293 294 (fontified t) 294 301 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 301 302 (fontified t face (rainbow-delimiters-depth-3-face)) 302 305 (fontified t face tree-sitter-hl-face:variable) 305 306 (fontified t) 306 310 (fontified t face tree-sitter-hl-face:property) 310 311 (fontified t face (rainbow-delimiters-depth-3-face)) 311 314 (fontified t) 314 317 (fontified t face tree-sitter-hl-face:variable) 317 318 (fontified t) 318 322 (fontified t face tree-sitter-hl-face:property) 322 323 (fontified t) 323 328 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 328 329 (fontified t face (rainbow-delimiters-depth-3-face)) 329 330 (fontified t face (rainbow-delimiters-depth-3-face)) 330 333 (fontified t) 333 335 (fontified t face tree-sitter-hl-face:keyword) 335 336 (fontified t) 336 339 (fontified t face tree-sitter-hl-face:variable) 339 340 (fontified t) 340 350 (fontified t face tree-sitter-hl-face:property) 350 351 (fontified t) 351 352 (fontified t face tree-sitter-hl-face:operator) 352 353 (fontified t) 353 356 (fontified t face tree-sitter-hl-face:number) 356 357 (fontified t) 357 358 (fontified t face (rainbow-delimiters-depth-3-face)) 358 362 (fontified t) 362 363 (fontified t face tree-sitter-hl-face:variable) 363 365 (fontified t face tree-sitter-hl-face:variable) 365 366 (fontified t) 366 372 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 372 373 (fontified t face (rainbow-delimiters-depth-4-face)) 373 412 (fontified t face tree-sitter-hl-face:string) 412 414 (fontified t face tree-sitter-hl-face:string) 414 415 (syntax-table (9) fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 415 416 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 416 424 (fontified t face tree-sitter-hl-face:string) 424 425 (syntax-table (9) fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 425 426 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 426 427 (fontified t face tree-sitter-hl-face:string) 427 429 (fontified t) 429 432 (fontified t face tree-sitter-hl-face:variable) 432 433 (fontified t) 433 434 (fontified t face tree-sitter-hl-face:property) 434 435 (fontified t face tree-sitter-hl-face:property) 435 443 (fontified t face tree-sitter-hl-face:property) 443 445 (fontified t) 445 449 (fontified t face tree-sitter-hl-face:variable) 449 450 (fontified t face (rainbow-delimiters-depth-4-face)) 450 453 (fontified t) 453 454 (fontified t face (rainbow-delimiters-depth-3-face)) 454 457 (fontified t) 457 459 (fontified t face tree-sitter-hl-face:keyword) 459 460 (fontified t) 460 463 (fontified t face tree-sitter-hl-face:variable) 463 464 (fontified t) 464 466 (fontified t face tree-sitter-hl-face:operator) 466 467 (fontified t) 467 470 (fontified t face tree-sitter-hl-face:constant\.builtin) 470 471 (fontified t) 471 472 (fontified t face (rainbow-delimiters-depth-3-face)) 472 476 (fontified t) 476 479 (fontified t face tree-sitter-hl-face:variable) 479 480 (fontified t) 480 485 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 485 486 (fontified t face (rainbow-delimiters-depth-4-face)) 486 489 (fontified t face tree-sitter-hl-face:variable) 489 490 (fontified t face (rainbow-delimiters-depth-4-face)) 490 493 (fontified t) 493 494 (fontified t face (rainbow-delimiters-depth-3-face)) 494 497 (fontified t) 497 502 (fontified t face tree-sitter-hl-face:variable) 502 503 (fontified t) 503 506 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 506 507 (fontified t face (rainbow-delimiters-depth-3-face)) 507 510 (fontified t face tree-sitter-hl-face:variable) 510 512 (fontified t) 512 516 (fontified t face tree-sitter-hl-face:variable) 516 517 (fontified t face (rainbow-delimiters-depth-3-face)) 517 520 (fontified t) 520 524 (fontified t face tree-sitter-hl-face:variable) 524 525 (fontified t) 525 528 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 528 534 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 534 535 (fontified t face (rainbow-delimiters-depth-3-face)) 535 539 (fontified t face tree-sitter-hl-face:variable) 539 541 (fontified t) 541 542 (fontified t face tree-sitter-hl-face:operator) 542 552 (fontified t face tree-sitter-hl-face:variable) 552 553 (fontified t face (rainbow-delimiters-depth-3-face)) 553 555 (fontified t) 555 556 (fontified t) 556 562 (fontified t face tree-sitter-hl-face:keyword) 562 563 (fontified t) 563 570 (fontified t face tree-sitter-hl-face:variable) 570 573 (fontified t face tree-sitter-hl-face:variable) 573 574 (fontified t) 574 575 (fontified t) 575 576 (fontified t face (rainbow-delimiters-depth-2-face)) 576 577 (fontified t) 577 581 (fontified t face tree-sitter-hl-face:keyword) 581 582 (fontified t) 582 583 (fontified t face (rainbow-delimiters-depth-2-face)) 583 586 (fontified t) 586 590 (fontified t face tree-sitter-hl-face:variable) 590 591 (fontified t) 591 600 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 600 601 (fontified t face (rainbow-delimiters-depth-3-face)) 601 604 (fontified t face tree-sitter-hl-face:variable) 604 606 (fontified t) 606 607 (fontified t face tree-sitter-hl-face:operator) 607 617 (fontified t face tree-sitter-hl-face:variable) 617 618 (fontified t face (rainbow-delimiters-depth-3-face)) 618 621 (fontified t) 621 627 (fontified t face tree-sitter-hl-face:keyword) 627 628 (fontified t) 628 638 (fontified t face tree-sitter-hl-face:variable) 638 640 (fontified t) 640 641 (fontified t face (rainbow-delimiters-depth-2-face)) 641 642 (fontified t) 642 643 (fontified t face (rainbow-delimiters-depth-1-face)) 643 644 (fontified t)) . 12155) (undo-tree-id1893 . -642) (undo-tree-id1894 . -642) (undo-tree-id1895 . -643) (undo-tree-id1896 . -81) (undo-tree-id1897 . -120) (undo-tree-id1898 . -638) (undo-tree-id1899 . -175) (undo-tree-id1900 . -91) (undo-tree-id1901 . -91) (undo-tree-id1902 . -5) (undo-tree-id1903 . -5) (undo-tree-id1904 . -15) (undo-tree-id1905 . -643) (undo-tree-id1906 . -643) (undo-tree-id1907 . -642) (undo-tree-id1908 . -642) (undo-tree-id1909 . -642) (undo-tree-id1910 . -642) (undo-tree-id1911 . -642) (undo-tree-id1912 . -642) (undo-tree-id1913 . -644) (undo-tree-id1914 . -642) (undo-tree-id1915 . -642) (undo-tree-id1916 . -642) (undo-tree-id1917 . -4) (undo-tree-id1918 . -556) (undo-tree-id1919 . -573) (undo-tree-id1920 . -621) (undo-tree-id1921 . -638) (undo-tree-id1922 . -644) (t 25851 9120 211489 754000)) nil (25851 9133 77491 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 12153) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1)) nil (25851 9133 77479 527000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 12153) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1)) nil (25851 9133 77472 554000) 0 nil])
nil

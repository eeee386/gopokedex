(undo-tree-save-format-version . 1)
"15e8ee6481f21c5b4d625882fec5d4877ff2b982"
[nil nil nil nil (25836 61395 855057 578000) 0 nil]
([nil nil ((1 . 5) (t 25836 53138 682389 208000)) nil (25836 61395 855056 456000) 0 nil])
([nil nil ((1 . 18) (#("pack" 0 4 (fontified nil)) . 1) (1 . 5) (#("package gopokedex" 0 17 (fontified nil)) . -1) (1 . 18) (#("pack" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1) (undo-tree-id53 . -4) (undo-tree-id54 . -4) 5) nil (25836 61395 855055 75000) 0 nil])
([nil nil ((18 . 20)) nil (25836 61395 855052 578000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -9) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("o" 0 1 (fontified t)) . -10) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("p" 0 1 (fontified t)) . -11) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (fontified t)) . -12) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("k" 0 1 (fontified t)) . -13) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("e" 0 1 (fontified t)) . -14) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("d" 0 1 (fontified t)) . -15) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("e" 0 1 (fontified t)) . -16) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("x" 0 1 (fontified t)) . -17) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 18) nil (25836 61395 855050 53000) 0 nil])
([nil nil ((9 . 13)) nil (25836 61395 855027 927000) 0 nil])
([nil nil ((9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified t)) . -9) (undo-tree-id15 . -4) (undo-tree-id16 . -4) 13) nil (25836 61395 855026 679000) 0 nil])
([nil nil ((13 . 15)) nil (25836 61395 855023 887000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -28) (28 . 29) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -28) (28 . 29) (26 . 29) (#(")" 0 1 (fontified nil)) . -25) (25 . 26) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -25) (25 . 26) (15 . 26)) nil (25836 61395 855022 546000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 29) (29 . 30) (28 . 30)) nil (25836 61395 855020 509000) 0 nil])
([nil nil ((30 . 37)) nil (25836 61395 855019 200000) 0 nil])
([nil nil ((34 . 41) (#("Pri" 0 3 (fontified nil)) . 34) (34 . 37) (#("Println" 0 7 (fontified nil)) . -34) (34 . 41) (#("Pri" 0 3 (fontified t face tree-sitter-hl-face:property)) . -34) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) 37) nil (25836 61395 855017 609000) 0 nil])
([nil nil ((14 . 16)) nil (25836 61395 854981 162000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -23) (23 . 24) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -23) (23 . 24) (15 . 24)) nil (25836 61395 854979 866000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 24) (24 . 25) (23 . 25)) nil (25836 61395 854977 881000) 0 nil])
([nil nil ((26 . 29) (25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25836 61395 854973 571000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -22) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 23 (t 25836 61395 865828 306000)) nil (25836 61421 726775 853000) 0 nil])
([nil nil ((22 . 24)) nil (25836 61421 726766 520000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -23) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . 1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 24) nil (25836 61421 726765 365000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -31) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . 1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 32) nil (25836 61421 726760 425000) 0 nil])
([nil nil ((31 . 32) (#("]" 0 1 (fontified nil)) . -31) (31 . 32)) nil (25836 61421 726745 870000) 0 nil])
([nil nil ((60 . 62) (t 25836 61421 737970 739000)) nil (25836 61432 938113 537000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -61) (61 . 62) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -61) (61 . 62)) nil (25836 61432 938111 919000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -30) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -31) (undo-tree-id115 . -1) (undo-tree-id116 . 1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 32) nil (25836 61432 938109 442000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -22) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("
" 0 1 (fontified t)) . -23) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("	" 0 1 (fontified t)) . -24) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 25) nil (25836 61432 937844 508000) 0 nil])
([nil nil ((56 . 58) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -56) (56 . 57) (t 25836 61432 948983 124000)) nil (25836 61478 453244 433000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -21) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 22) nil (25836 61478 453242 537000) 0 nil])
([nil nil ((21 . 23)) nil (25836 61478 453231 348000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -22) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . 1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 23) nil (25836 61478 453229 587000) 0 nil])
([nil nil ((22 . 24)) nil (25836 61478 453223 989000) 0 nil])
([nil nil ((29 . 31)) nil (25836 61478 453223 5000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -30) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (31 . 32) (#(")" 0 1 (fontified nil)) . -31) (31 . 32)) nil (25836 61478 453219 821000) 0 nil])
([nil nil ((61 . 69) (t 25836 61478 463549 391000)) nil (25836 61492 862565 705000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -68) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 69) nil (25836 61492 862564 530000) 0 nil])
([nil nil ((68 . 71)) nil (25836 61492 862557 156000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -70) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 71) nil (25836 61492 862555 779000) 0 nil])
([nil nil ((70 . 75)) nil (25836 61492 862542 704000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -56) (undo-tree-id38 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -57) (undo-tree-id39 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -58) (undo-tree-id40 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -59) (undo-tree-id41 . -1) (#("\"" 0 1 (fontified t)) . -60) (undo-tree-id42 . -1) (#("H" 0 1 (fontified t)) . -61) (undo-tree-id43 . -1) (#("e" 0 1 (fontified t)) . -62) (undo-tree-id44 . -1) (#("l" 0 1 (fontified t)) . -63) (undo-tree-id45 . -1) (#("l" 0 1 (fontified t)) . -64) (undo-tree-id46 . -1) (#("o" 0 1 (fontified t)) . -65) (undo-tree-id47 . -1) (#("," 0 1 (fontified t)) . -66) (undo-tree-id48 . -1) (#(" " 0 1 (fontified t)) . -67) (undo-tree-id49 . -1) (#("p" 0 1 (fontified t)) . -68) (undo-tree-id50 . -1) (#("o" 0 1 (fontified t)) . -69) (undo-tree-id51 . -1) (#("k" 0 1 (fontified t)) . -70) (undo-tree-id52 . -1) (#("e" 0 1 (fontified t)) . -71) (undo-tree-id53 . -1) (#("d" 0 1 (fontified t)) . -72) (undo-tree-id54 . -1) (#("e" 0 1 (fontified t)) . -73) (undo-tree-id55 . -1) (#("x" 0 1 (fontified t)) . -74) (undo-tree-id56 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -75) (undo-tree-id57 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -76) (undo-tree-id58 . -1) (undo-tree-id59 . 1) (undo-tree-id60 . -1) 77 (t 25836 61492 873157 776000)) nil (25836 62354 33329 952000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -48) (undo-tree-id30 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -49) (undo-tree-id31 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -50) (undo-tree-id32 . -1) (#("." 0 1 (fontified t)) . -51) (undo-tree-id33 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -52) (undo-tree-id34 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -53) (undo-tree-id35 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -54) (undo-tree-id36 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -55) (undo-tree-id37 . -1) 56) nil (25836 62354 33312 770000) 0 nil])
([nil nil ((48 . 51)) nil (25836 62354 33306 473000) 0 nil])
([nil nil ((51 . 52)) nil (25836 62354 33305 549000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -53) (53 . 54) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -53) (53 . 54) (52 . 54)) nil (25836 62354 33304 103000) 0 nil])
([nil nil ((54 . 56) (55 . 56) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 54) (54 . 56) (53 . 55)) nil (25836 62354 33302 393000) 0 nil])
([nil nil ((56 . 60)) nil (25836 62354 33301 530000) 0 nil])
([nil nil ((60 . 61)) nil (25836 62354 33300 870000) 0 nil])
([nil nil ((61 . 63)) nil (25836 62354 33300 118000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -62) (undo-tree-id29 . -1) 63) nil (25836 62354 33299 532000) 0 nil])
([nil nil ((62 . 63)) nil (25836 62354 33298 147000) 0 nil])
([nil nil ((60 . 80) (#("Pri" 0 3 (fontified nil)) . 60) (60 . 63) (#("Print" 0 5 (fontified nil)) . -60) (60 . 65) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -60) (undo-tree-id27 . -3) (undo-tree-id28 . -3) 63) nil (25836 62354 33296 894000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -66) (undo-tree-id12 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -67) (undo-tree-id13 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -68) (undo-tree-id14 . -1) (#(":" 0 1 (fontified t)) . -69) (undo-tree-id15 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -70) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -71) (undo-tree-id17 . -1) (#("." 0 1 (fontified t)) . -72) (undo-tree-id18 . -1) (#("." 0 1 (fontified t)) . -73) (undo-tree-id19 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -74) (undo-tree-id20 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -75) (undo-tree-id21 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -76) (undo-tree-id22 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -77) (undo-tree-id23 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -78) (undo-tree-id24 . -1) (undo-tree-id25 . 1) (undo-tree-id26 . -1) 79) nil (25836 62354 33292 521000) 0 nil])
([nil nil ((65 . 67)) nil (25836 62354 33281 826000) 0 nil])
([nil nil ((69 . 71) (68 . 70) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -68) (68 . 69)) nil (25836 62354 33281 137000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:string fontified t)) . -69) (undo-tree-id10 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -70) (undo-tree-id11 . -1) 71) nil (25836 62354 33279 754000) 0 nil])
([nil nil ((69 . 75)) nil (25836 62354 33277 273000) 0 nil])
([nil nil ((72 . 73)) nil (25836 62354 33276 563000) 0 nil])
([nil nil ((76 . 79)) nil (25836 62354 33275 824000) 0 nil])
([nil nil ((81 . 84)) nil (25836 62354 33275 159000) 0 nil])
([nil nil ((#("l" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -65) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -66) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 67) nil (25836 62354 33273 53000) 0 nil])
([nil nil ((65 . 66)) nil (25836 62354 33238 424000) 0 nil])
([nil nil ((29 . 31) (t 25836 62354 43611 517000)) nil (25836 62803 759786 550000) 0 nil])
([nil nil ((32 . 37) (31 . 33) (#("\"" 0 1 (fontified nil)) . -31) (31 . 32)) nil (25836 62803 759785 412000) 0 nil])
([nil nil ((92 . 95)) nil (25836 62803 759784 336000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -94) (undo-tree-id545 . -1) (undo-tree-id546 . -1) 95) nil (25836 62803 759782 995000) 0 nil])
([nil nil ((94 . 96)) nil (25836 62803 759780 996000) 0 nil])
([nil nil ((92 . 97) (#("bufi" 0 4 (fontified nil)) . 92) (92 . 96) (#("bufio" 0 5 (fontified nil)) . -92) (92 . 97) (#("bufi" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -92) (undo-tree-id543 . -4) (undo-tree-id544 . -4) 96) nil (25836 62803 759780 6000) 0 nil])
([nil nil ((97 . 98)) nil (25836 62803 759777 287000) 0 nil])
([nil nil ((98 . 100)) nil (25836 62803 759776 678000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -97) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -98) (undo-tree-id541 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -99) (undo-tree-id542 . -1) 100) nil (25836 62803 759775 621000) 0 nil])
([nil nil ((97 . 98)) nil (25836 62803 759772 550000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -97) (undo-tree-id537 . -1) (undo-tree-id538 . -1) 98) nil (25836 62803 759771 576000) 0 nil])
([nil nil ((97 . 101)) nil (25836 62803 759769 185000) 0 nil])
([nil nil ((98 . 126) (#("New" 0 3 (fontified nil)) . 98) (98 . 101) (#("NewScanner" 0 10 (fontified nil)) . -98) (98 . 108) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -98) (undo-tree-id535 . -3) (undo-tree-id536 . -3) 101) nil (25836 62803 759767 780000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -109) (undo-tree-id517 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -110) (undo-tree-id518 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -111) (undo-tree-id519 . -1) (#(":" 0 1 (fontified t)) . -112) (undo-tree-id520 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -113) (undo-tree-id521 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id522 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -115) (undo-tree-id523 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -116) (undo-tree-id524 . -1) (#("." 0 1 (fontified t)) . -117) (undo-tree-id525 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -118) (undo-tree-id526 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -119) (undo-tree-id527 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -120) (undo-tree-id528 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -121) (undo-tree-id529 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -122) (undo-tree-id530 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -123) (undo-tree-id531 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -124) (undo-tree-id532 . -1) (undo-tree-id533 . 1) (undo-tree-id534 . -1) 125) nil (25836 62803 759763 118000) 0 nil])
([nil nil ((110 . 111)) nil (25836 62803 759748 445000) 0 nil])
([nil nil ((38 . 40)) nil (25836 62803 759747 610000) 0 nil])
([nil nil ((40 . 42)) nil (25836 62803 759747 117000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -40) (undo-tree-id515 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -41) (undo-tree-id516 . -1) 42) nil (25836 62803 759746 156000) 0 nil])
([nil nil ((41 . 43) (40 . 42) (#("\"" 0 1 (fontified nil)) . -40) (40 . 41)) nil (25836 62803 759743 931000) 0 nil])
([nil nil ((115 . 121)) nil (25836 62803 759743 72000) 0 nil])
([nil nil ((118 . 123) (#("Std" 0 3 (fontified nil)) . 118) (118 . 121) (#("Stdin" 0 5 (fontified nil)) . -118) (118 . 123) (#("Std" 0 3 (face tree-sitter-hl-face:property fontified t)) . -118) (undo-tree-id513 . -3) (undo-tree-id514 . -3) 121) nil (25836 62803 759742 204000) 0 nil])
([nil nil ((125 . 128)) nil (25836 62803 759739 829000) 0 nil])
([nil nil ((98 . 101)) nil (25836 62803 759739 302000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -99) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -100) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 101) nil (25836 62803 759738 398000) 0 nil])
([nil nil ((99 . 104)) nil (25836 62803 759733 942000) 0 nil])
([nil nil ((134 . 137)) nil (25836 62803 759733 375000) 0 nil])
([nil nil ((137 . 143) (#("Scan" 0 4 (fontified nil)) . -137) (137 . 141)) nil (25836 62803 759732 568000) 0 nil])
([nil nil ((142 . 144) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -142) (142 . 143)) nil (25836 62803 759731 232000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -142) (undo-tree-id508 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 143)) nil (25836 62803 759729 698000) 0 nil])
([nil nil ((143 . 145) (142 . 144) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -142) (142 . 143)) nil (25836 62803 759728 6000) 0 nil])
([nil nil ((147 . 148)) nil (25836 62803 759726 625000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -142) (undo-tree-id507 . -1) 143) nil (25836 62803 759725 740000) 0 nil])
([nil nil ((142 . 144) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -142) (142 . 143)) nil (25836 62803 759724 239000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -143) (undo-tree-id506 . -1) 144) nil (25836 62803 759723 69000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -145) (undo-tree-id505 . -1) 146) nil (25836 62803 759721 447000) 0 nil])
([nil nil ((145 . 146) (#("'" 0 1 (fontified nil)) . -145) (145 . 146)) nil (25836 62803 759719 923000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -142) (undo-tree-id501 . -1) (#("\\" 0 1 (syntax-table (9) fontified t)) . -143) (undo-tree-id502 . -1) (#("n" 0 1 (fontified t)) . -144) (undo-tree-id503 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string fontified t)) . -145) (undo-tree-id504 . -1) 146) nil (25836 62803 759718 441000) 0 nil])
([nil nil ((#("." 0 1 (fontified nil)) . -123) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -124) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -125) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -126) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -127) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -128) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -129) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#(";" 0 1 (fontified t)) . -130) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("
" 0 1 (fontified t)) . -131) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("	" 0 1 (fontified t)) . -132) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("	" 0 1 (fontified t)) . -133) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -134) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -135) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("." 0 1 (fontified t)) . -136) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -137) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -138) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -139) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -140) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -141) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . 1) (undo-tree-id492 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -142) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . 1) (undo-tree-id497 . -1) (#(";" 0 1 (fontified t)) . -143) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) 144) nil (25836 62803 759710 101000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -104) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -105) (undo-tree-id306 . 1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -106) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -107) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -108) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("." 0 1 (fontified t)) . -109) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -110) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -111) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -112) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -113) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -114) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -115) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -116) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -117) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -118) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -119) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -120) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -121) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("s" 0 1 (fontified nil)) . -122) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) 123) nil (25836 62803 759622 628000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -98) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -99) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#(" " 0 1 (fontified t)) . -100) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#(":" 0 1 (fontified t)) . -101) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -102) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#(" " 0 1 (fontified t)) . -103) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) 104) nil (25836 62803 759546 922000) 0 nil])
([nil nil ((98 . 104)) nil (25836 62803 759533 506000) 0 nil])
([nil nil ((104 . 105)) nil (25836 62803 759532 798000) 0 nil])
([nil nil ((105 . 112)) nil (25836 62803 759531 749000) 0 nil])
([nil nil ((112 . 114)) nil (25836 62803 759531 249000) 0 nil])
([nil nil ((114 . 117)) nil (25836 62803 759530 768000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -116) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 117) nil (25836 62803 759530 66000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -114) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -115) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 116) nil (25836 62803 759527 843000) 0 nil])
([nil nil ((114 . 117)) nil (25836 62803 759523 147000) 0 nil])
([nil nil ((114 . 142) (#("New" 0 3 (fontified nil)) . 114) (114 . 117) (#("NewReader" 0 9 (fontified nil)) . -114) (114 . 123) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -114) (undo-tree-id277 . -3) (undo-tree-id278 . -3) 117) nil (25836 62803 759522 4000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -124) (undo-tree-id258 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -125) (undo-tree-id259 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -126) (undo-tree-id260 . -1) (#(":" 0 1 (fontified t)) . -127) (undo-tree-id261 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -128) (undo-tree-id262 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -129) (undo-tree-id263 . -1) (#(" " 0 1 (fontified t)) . -130) (undo-tree-id264 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -131) (undo-tree-id265 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -132) (undo-tree-id266 . -1) (#("." 0 1 (fontified t)) . -133) (undo-tree-id267 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -134) (undo-tree-id268 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -135) (undo-tree-id269 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -136) (undo-tree-id270 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -137) (undo-tree-id271 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -138) (undo-tree-id272 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -139) (undo-tree-id273 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -140) (undo-tree-id274 . -1) (undo-tree-id275 . 1) (undo-tree-id276 . -1) 141) nil (25836 62803 759517 392000) 0 nil])
([nil nil ((124 . 130)) nil (25836 62803 759501 856000) 0 nil])
([nil nil ((127 . 132) (#("Std" 0 3 (fontified nil)) . 127) (127 . 130) (#("Stdin" 0 5 (fontified nil)) . -127) (127 . 132) (#("Std" 0 3 (face tree-sitter-hl-face:property fontified t)) . -127) (undo-tree-id256 . -3) (undo-tree-id257 . -3) 130) nil (25836 62803 759486 284000) 0 nil])
([nil nil ((133 . 136)) nil (25836 62803 759483 741000) 0 nil])
([nil nil ((136 . 155)) nil (25836 62803 759483 161000) 0 nil])
([nil nil ((155 . 182) (#("ReadString" 0 10 (fontified nil)) . -155) (155 . 165)) nil (25836 62803 759482 305000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -166) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -167) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -168) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#(":" 0 1 (fontified t)) . -169) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -170) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -171) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -172) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -173) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -174) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -175) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -176) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -177) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -178) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -179) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -180) (undo-tree-id251 . -1) (undo-tree-id252 . 1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) 181) nil (25836 62803 759475 491000) 0 nil])
([nil nil ((167 . 169) (166 . 168) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -166) (166 . 167)) nil (25836 62803 758927 507000) 0 nil])
([nil nil ((171 . 172)) nil (25836 62803 758922 678000) 0 nil])
([nil nil ((172 . 175) (t 25836 62803 771292 258000)) nil (25836 62822 644681 136000) 0 nil])
([nil nil ((175 . 179)) nil (25836 62822 644680 137000) 0 nil])
([nil nil ((179 . 180)) nil (25836 62822 644679 440000) 0 nil])
([nil nil ((180 . 183)) nil (25836 62822 644678 754000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -181) (undo-tree-id565 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -182) (undo-tree-id566 . -1) 183) nil (25836 62822 644677 500000) 0 nil])
([nil nil ((181 . 183)) nil (25836 62822 644675 82000) 0 nil])
([nil nil ((179 . 201) (#("Prin" 0 4 (fontified nil)) . 179) (179 . 183) (#("Println" 0 7 (fontified nil)) . -179) (179 . 186) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -179) (undo-tree-id563 . -4) (undo-tree-id564 . -4) 183) nil (25836 62822 644673 481000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -190) (undo-tree-id551 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -191) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -192) (undo-tree-id553 . -1) (#("." 0 1 (fontified t)) . -193) (undo-tree-id554 . -1) (#("." 0 1 (fontified t)) . -194) (undo-tree-id555 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -195) (undo-tree-id556 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -196) (undo-tree-id557 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -197) (undo-tree-id558 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -198) (undo-tree-id559 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -199) (undo-tree-id560 . -1) (undo-tree-id561 . 1) (undo-tree-id562 . -1) 200) nil (25836 62822 644668 587000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -187) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -188) (undo-tree-id549 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -189) (undo-tree-id550 . -1) 190) nil (25836 62822 644656 930000) 0 nil])
([nil nil ((187 . 190)) nil (25836 62822 644643 218000) 0 nil])
([nil nil ((190 . 191)) nil (25836 62822 644642 218000) 0 nil])
([nil nil ((192 . 193)) nil (25836 62822 644637 512000) 0 nil])
([nil nil ((146 . 147) (t 25836 62822 657052 423000)) nil (25836 63006 850212 115000) 0 nil])
([nil nil ((173 . 176)) nil (25836 63006 850210 659000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -179) (179 . 180) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -179) (179 . 180) (176 . 180)) nil (25836 63006 850208 865000) 0 nil])
([nil nil ((179 . 182)) nil (25836 63006 850207 23000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -185) (185 . 186) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -185) (185 . 186) (183 . 186)) nil (25836 63006 850206 136000) 0 nil])
([nil nil ((186 . 189) (187 . 189) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 186) (186 . 189) (185 . 187)) nil (25836 63006 850204 881000) 0 nil])
([nil nil ((183 . 185) (#("'" 0 1 (fontified nil)) . -183) (182 . 184)) nil (25836 63006 850203 899000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -183) (undo-tree-id675 . -1) (#("'" 0 1 (fontified t)) . 184)) nil (25836 63006 850202 965000) 0 nil])
([nil nil ((183 . 189)) nil (25836 63006 850201 847000) 0 nil])
([nil nil ((196 . 200)) nil (25836 63006 850201 359000) 0 nil])
([nil nil ((200 . 241) (#("Errorf" 0 6 (fontified nil)) . -200) (200 . 206)) nil (25836 63006 850200 760000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -219) (undo-tree-id652 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -220) (undo-tree-id653 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -221) (undo-tree-id654 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -222) (undo-tree-id655 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -223) (undo-tree-id656 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -224) (undo-tree-id657 . -1) (#("," 0 1 (fontified t)) . -225) (undo-tree-id658 . -1) (#(" " 0 1 (fontified t)) . -226) (undo-tree-id659 . -1) (#("$" 0 1 (fontified t)) . -227) (undo-tree-id660 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -228) (undo-tree-id661 . -1) (#("2" 0 1 (face tree-sitter-hl-face:number fontified t)) . -229) (undo-tree-id662 . -1) (#(":" 0 1 (fontified t)) . -230) (undo-tree-id663 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -231) (undo-tree-id664 . -1) (#(" " 0 1 (fontified t)) . -232) (undo-tree-id665 . -1) (#("." 0 1 (fontified t)) . -233) (undo-tree-id666 . -1) (#("." 0 1 (fontified t)) . -234) (undo-tree-id667 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -235) (undo-tree-id668 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -236) (undo-tree-id669 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -237) (undo-tree-id670 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -238) (undo-tree-id671 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -239) (undo-tree-id672 . -1) (undo-tree-id673 . 1) (undo-tree-id674 . -1) 240) nil (25836 63006 850197 378000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -207) (undo-tree-id640 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -208) (undo-tree-id641 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -209) (undo-tree-id642 . -1) (#(":" 0 1 (fontified t)) . -210) (undo-tree-id643 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -211) (undo-tree-id644 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -212) (undo-tree-id645 . -1) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -213) (undo-tree-id646 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -214) (undo-tree-id647 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -215) (undo-tree-id648 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -216) (undo-tree-id649 . -1) (#(" " 0 1 (fontified t)) . -217) (undo-tree-id650 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -218) (undo-tree-id651 . -1) 219) nil (25836 63006 850179 215000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -206) (undo-tree-id639 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 207)) nil (25836 63006 850165 22000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -200) (undo-tree-id633 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -201) (undo-tree-id634 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -202) (undo-tree-id635 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -203) (undo-tree-id636 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -204) (undo-tree-id637 . -1) (#("f" 0 1 (face tree-sitter-hl-face:property fontified t)) . -205) (undo-tree-id638 . -1) 206) nil (25836 63006 850162 804000) 0 nil])
([nil nil ((200 . 206)) nil (25836 63006 850156 984000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -207) (207 . 208) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -207) (207 . 208) (206 . 208)) nil (25836 63006 850155 845000) 0 nil])
([nil nil ((207 . 210)) nil (25836 63006 850154 655000) 0 nil])
([nil nil ((211 . 212)) nil (25836 63006 850153 811000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -207) (undo-tree-id630 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -208) (undo-tree-id631 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -209) (undo-tree-id632 . -1) 210) nil (25836 63006 850152 820000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -206) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 207) (undo-tree-id629 . -1)) nil (25836 63006 850149 779000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -200) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -201) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -202) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -203) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -204) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#("f" 0 1 (face tree-sitter-hl-face:property fontified t)) . -205) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) 206) nil (25836 63006 850145 676000) 0 nil])
([nil nil ((200 . 203)) nil (25836 63006 850131 149000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -202) (undo-tree-id607 . -1) 203) nil (25836 63006 850130 375000) 0 nil])
([nil nil ((202 . 205)) nil (25836 63006 850129 103000) 0 nil])
([nil nil ((205 . 206)) nil (25836 63006 850127 951000) 0 nil])
([nil nil ((#("F" 0 1 (face tree-sitter-hl-face:property fontified t)) . -205) (undo-tree-id606 . -1) 206) nil (25836 63006 850127 51000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -207) (207 . 208) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -207) (207 . 208) (205 . 208)) nil (25836 63006 850125 209000) 0 nil])
([nil nil ((207 . 211)) nil (25836 63006 850123 826000) 0 nil])
([nil nil ((211 . 218) (#("Error" 0 5 (fontified nil)) . -211) (211 . 216)) nil (25836 63006 850122 845000) 0 nil])
([nil nil ((192 . 196)) nil (25836 63006 850121 916000) 0 nil])
([nil nil ((196 . 199)) nil (25836 63006 850121 442000) 0 nil])
([nil nil ((199 . 200)) nil (25836 63006 850120 741000) 0 nil])
([nil nil ((200 . 203)) nil (25836 63006 850120 48000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -202) (undo-tree-id605 . -1) 203) nil (25836 63006 850119 458000) 0 nil])
([nil nil ((202 . 204)) nil (25836 63006 850118 127000) 0 nil])
([nil nil ((204 . 208)) nil (25836 63006 850117 241000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -207) (207 . 208) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -207) (207 . 208)) nil (25836 63006 850116 140000) 0 nil])
([nil nil ((208 . 214) (207 . 209) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -207) (207 . 208)) nil (25836 63006 850114 823000) 0 nil])
([nil nil ((214 . 227)) nil (25836 63006 850113 286000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -224) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -225) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -226) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 227) nil (25836 63006 850110 702000) 0 nil])
([nil nil ((224 . 236)) nil (25836 63006 850077 69000) 0 nil])
([nil nil ((291 . 294) (t 25836 63006 864160 597000)) nil (25836 63041 432259 181000) 0 nil])
([nil nil ((266 . 270)) nil (25836 63041 432258 55000) 0 nil])
([nil nil ((270 . 276)) nil (25836 63041 432257 617000) 0 nil])
([nil nil ((280 . 283)) nil (25836 63041 432257 47000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -286) (286 . 287) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -286) (286 . 287) (283 . 287)) nil (25836 63041 432255 990000) 0 nil])
([nil nil ((286 . 294)) nil (25836 63041 432254 678000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -288) (undo-tree-id682 . -1) 289) nil (25836 63041 432253 684000) 0 nil])
([nil nil ((288 . 289)) nil (25836 63041 432251 926000) 0 nil])
([nil nil ((295 . 299) (294 . 296) (#("\"" 0 1 (fontified nil)) . -294) (294 . 295)) nil (25836 63041 432250 896000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -303) (303 . 304) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -303) (303 . 304) (301 . 304)) nil (25836 63041 432248 905000) 0 nil])
([nil nil ((304 . 307) (305 . 307) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 304) (304 . 307) (303 . 305)) nil (25836 63041 432246 980000) 0 nil])
([nil nil ((307 . 313)) nil (25836 63041 432245 137000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -312) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) 313) nil (25836 63041 432241 829000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 275) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (t 25836 63041 445217 770000)) nil (25836 63045 951576 549000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 265) (undo-tree-id683 . -1) (undo-tree-id684 . -1)) nil (25836 63045 951571 715000) 0 nil])
([nil nil ((46 . 48) (t 25836 63045 964367 252000)) nil (25836 63157 800156 420000) 0 nil])
([nil nil ((48 . 64)) nil (25836 63157 800155 733000) 0 nil])
([nil nil ((#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -59) (undo-tree-id704 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -60) (undo-tree-id705 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -61) (undo-tree-id706 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -62) (undo-tree-id707 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -63) (undo-tree-id708 . -1) 64) nil (25836 63157 800154 495000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -65) (65 . 66) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -65) (65 . 66) (59 . 66)) nil (25836 63157 800149 775000) 0 nil])
([nil nil ((65 . 70)) nil (25836 63157 800148 798000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -67) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -68) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -69) (undo-tree-id702 . -1) (undo-tree-id703 . -1) 70) nil (25836 63157 800147 657000) 0 nil])
([nil nil ((67 . 72)) nil (25836 63157 800142 466000) 0 nil])
([nil nil ((67 . 72) (#("Error" 0 5 (fontified nil)) . 67) (67 . 72) (#("error" 0 5 (fontified nil)) . -67) (67 . 72) (#("Error" 0 5 (face tree-sitter-hl-face:type fontified t)) . -67) (undo-tree-id696 . -5) (undo-tree-id697 . -5) 72) nil (25836 63157 800141 332000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -75) (75 . 76) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -75) (75 . 76) (73 . 76)) nil (25836 63157 800138 557000) 0 nil])
([nil nil ((76 . 77) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 76) (76 . 77) (75 . 77)) nil (25836 63157 800137 1000) 0 nil])
([nil nil ((#("func handleError(e error) {
	
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 16 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 18 19 (fontified t) 19 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t)) . 48) (undo-tree-id687 . -30) (undo-tree-id688 . 1) (undo-tree-id689 . -31) (undo-tree-id690 . -29) (undo-tree-id691 . -5) (undo-tree-id692 . -30) (undo-tree-id693 . -32) (undo-tree-id694 . -30) (undo-tree-id695 . -32)) nil (25836 63157 800133 344000) 0 nil])
([nil nil ((237 . 238) (t 25836 63157 813756 670000)) nil (25836 63162 351366 568000) 0 nil])
([nil nil ((316 . 319) (t 25836 63162 363959 207000)) nil (25836 63224 797821 389000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -322) (322 . 323) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -322) (322 . 323) (319 . 323)) nil (25836 63224 797820 562000) 0 nil])
([nil nil ((331 . 335) (330 . 332) (#("\"" 0 1 (fontified nil)) . -330) (322 . 331)) nil (25836 63224 797819 671000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -339) (339 . 340) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -339) (339 . 340) (337 . 340)) nil (25836 63224 797818 566000) 0 nil])
([nil nil ((340 . 343) (341 . 343) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 340) (340 . 343) (339 . 341)) nil (25836 63224 797817 572000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -316) (undo-tree-id777 . -1) (#("	" 0 1 (fontified t)) . -317) (undo-tree-id778 . -1) (#("	" 0 1 (fontified t)) . -318) (undo-tree-id779 . -1) 319) nil (25836 63224 797816 208000) 0 nil])
([nil nil ((316 . 321)) nil (25836 63224 797813 138000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -280) (undo-tree-id774 . -1) (#("	" 0 1 (fontified t)) . -281) (undo-tree-id775 . -1) (#("	" 0 1 (fontified t)) . -282) (undo-tree-id776 . -1) 283) nil (25836 63224 797812 122000) 0 nil])
([nil nil ((280 . 285)) nil (25836 63224 797806 394000) 0 nil])
([nil nil ((351 . 359)) nil (25836 63224 797805 747000) 0 nil])
([nil nil ((359 . 362) (360 . 362) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 359) (359 . 362) (358 . 360)) nil (25836 63224 797804 937000) 0 nil])
([nil nil ((#("		fmt.Println(text);
" 0 2 (fontified t) 2 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 13 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (fontified t) 20 21 (fontified t)) . 367) (undo-tree-id770 . 17) (undo-tree-id771 . -20) (undo-tree-id772 . -20) (undo-tree-id773 . -3) 370) nil (25836 63224 797803 940000) 0 nil])
([nil nil ((nil rear-nonsticky nil 360 . 361) (#("
" 0 1 (fontified nil)) . -379) (358 . 380) 349) nil (25836 63224 797800 195000) 0 nil])
([nil nil ((#("			
" 0 4 (fontified t)) . 380) (undo-tree-id768 . -3) (undo-tree-id769 . -2) 382) nil (25836 63224 797798 638000) 0 nil])
([nil nil ((361 . 363)) nil (25836 63224 797796 370000) 0 nil])
([nil nil ((347 . 352)) nil (25836 63224 797795 645000) 0 nil])
([nil nil ((352 . 354)) nil (25836 63224 797795 214000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -353) (undo-tree-id767 . -1) 354) nil (25836 63224 797794 568000) 0 nil])
([nil nil ((353 . 356)) nil (25836 63224 797793 168000) 0 nil])
([nil nil ((351 . 373) (#("Print" 0 5 (fontified nil)) . 351) (351 . 356) (#("Println" 0 7 (fontified nil)) . -351) (351 . 358) (#("Print" 0 5 (face tree-sitter-hl-face:property fontified t)) . -351) (undo-tree-id765 . -5) (undo-tree-id766 . -5) 356) nil (25836 63224 797792 200000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -371) (undo-tree-id762 . -1) (undo-tree-id763 . 1) (undo-tree-id764 . -1) 372) nil (25836 63224 797789 251000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -359) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -360) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -361) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#(":" 0 1 (fontified t)) . -362) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -363) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (#(" " 0 1 (fontified t)) . -364) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified nil)) . -365) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified nil)) . -366) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -367) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -368) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -369) (undo-tree-id760 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -370) (undo-tree-id761 . -1) 371) nil (25836 63224 797781 359000) 0 nil])
([nil nil ((359 . 367) (t 25836 63224 812888 168000)) nil (25836 63392 761429 836000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -359) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#(" " 0 1 (fontified t)) . -360) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -361) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -362) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -363) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -364) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -365) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -366) (undo-tree-id794 . -1) (undo-tree-id795 . -1) 367) nil (25836 63392 761425 474000) 0 nil])
([nil nil ((401 . 403) (t 25840 41537 934649 657000)) nil (25840 41659 619642 972000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -398) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("	" 0 1 (fontified t)) . -399) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("	" 0 1 (fontified t)) . -400) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -401) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -402) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 403) nil (25840 41659 619639 305000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -360) (360 . 361) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -360) (360 . 361) (359 . 361) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -359) (359 . 360) (t 25840 41659 721386 34000)) nil (25840 42158 372849 497000) 0 nil])
([nil nil ((46 . 48)) nil (25840 42158 372846 621000) 0 nil])
([nil nil ((48 . 67)) nil (25840 42158 372845 359000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -72) (72 . 73) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -72) (72 . 73) (67 . 73)) nil (25840 42158 372843 826000) 0 nil])
([nil nil ((73 . 74) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 73) (73 . 74) (72 . 74)) nil (25840 42158 372841 622000) 0 nil])
([nil nil ((74 . 85)) nil (25840 42158 372840 349000) 0 nil])
([nil nil ((79 . 85) (#("string" 0 6 (fontified nil)) . 79) (79 . 85) (#("string" 0 6 (fontified t face tree-sitter-hl-face:type)) . -79) (undo-tree-id99 . -6) (undo-tree-id100 . -6) 85) nil (25840 42158 372839 888000) 0 nil])
([nil nil ((85 . 87)) nil (25840 42158 372837 965000) 0 nil])
([nil nil ((87 . 101)) nil (25840 42158 372837 384000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -100) (undo-tree-id98 . -1) 101) nil (25840 42158 372836 512000) 0 nil])
([nil nil ((100 . 105)) nil (25840 42158 372835 200000) 0 nil])
([nil nil ((99 . 105) (#("string" 0 6 (fontified nil)) . 99) (99 . 105) (#("string" 0 6 (fontified t face tree-sitter-hl-face:type)) . -99) (undo-tree-id96 . -6) (undo-tree-id97 . -6) 105) nil (25840 42158 372833 607000) 0 nil])
([nil nil ((105 . 107)) nil (25840 42158 372756 943000) 0 nil])
([nil nil ((107 . 111)) nil (25840 42158 372756 41000) 0 nil])
([nil nil ((122 . 128) (#(")" 0 1 (fontified nil)) . -121) (121 . 122) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -121) (121 . 122) (111 . 122)) nil (25840 42158 372749 619000) 0 nil])
([nil nil ((131 . 132) (t 25840 42158 475126 647000)) nil (25840 44283 770989 913000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -143) (143 . 144) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -143) (143 . 144) (132 . 144)) nil (25840 44283 770988 981000) 0 nil])
([nil nil ((143 . 149)) nil (25840 44283 770988 219000) 0 nil])
([nil nil ((150 . 151)) nil (25840 44283 770987 648000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -150) (undo-tree-id248 . -1) 151) nil (25840 44283 770986 837000) 0 nil])
([nil nil ((150 . 153)) nil (25840 44283 770985 965000) 0 nil])
([nil nil ((153 . 160)) nil (25840 44283 770985 494000) 0 nil])
([nil nil ((150 . 151)) nil (25840 44283 770984 873000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -163) (163 . 164) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -163) (163 . 164) (161 . 164)) nil (25840 44283 770984 52000) 0 nil])
([nil nil ((164 . 165) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 164) (164 . 165) (163 . 165)) nil (25840 44283 770983 170000) 0 nil])
([nil nil ((47 . 48)) nil (25840 44283 770982 388000) 0 nil])
([nil nil ((47 . 48)) nil (25840 44283 770981 928000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -134) (undo-tree-id242 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -135) (undo-tree-id243 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -136) (undo-tree-id244 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -137) (undo-tree-id245 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -138) (undo-tree-id246 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -139) (undo-tree-id247 . -1) 140) nil (25840 44283 770981 46000) 0 nil])
([nil nil ((134 . 137)) nil (25840 44283 770978 471000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -134) (undo-tree-id239 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -135) (undo-tree-id240 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -136) (undo-tree-id241 . -1) 137) nil (25840 44283 770977 319000) 0 nil])
([nil nil ((134 . 147)) nil (25840 44283 770975 215000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -146) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 147) nil (25840 44283 770973 512000) 0 nil])
([nil nil ((146 . 148)) nil (25840 44283 770971 268000) 0 nil])
([nil nil ((146 . 147)) nil (25840 44283 770970 787000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -134) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -135) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -136) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -137) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -138) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -139) (undo-tree-id236 . -1) 140) nil (25840 44283 770968 663000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -141) (undo-tree-id225 . -1) 142) nil (25840 44283 770953 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -133) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -134) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -135) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -136) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -137) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -138) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -139) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#(" " 0 1 (fontified t)) . -140) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -141) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -142) (undo-tree-id224 . -1) 143) nil (25840 44283 770951 60000) 0 nil])
([nil nil ((133 . 134)) nil (25840 44283 770936 573000) 0 nil])
([nil nil ((134 . 138)) nil (25840 44283 770936 132000) 0 nil])
([nil nil ((138 . 139)) nil (25840 44283 770935 641000) 0 nil])
([nil nil ((139 . 140)) nil (25840 44283 770935 30000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -151) (undo-tree-id186 . -1) 152) nil (25840 44283 770934 589000) 0 nil])
([nil nil ((139 . 146)) nil (25840 44283 770931 473000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -145) (undo-tree-id185 . -1) 146) nil (25840 44283 770930 952000) 0 nil])
([nil nil ((145 . 148)) nil (25840 44283 770930 231000) 0 nil])
([nil nil ((175 . 179) (174 . 176) (#("\"" 0 1 (fontified nil)) . -174) (174 . 175)) nil (25840 44283 770929 860000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -183) (183 . 184) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -183) (183 . 184) (180 . 184)) nil (25840 44283 770929 139000) 0 nil])
([nil nil ((184 . 186) (185 . 186) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 184) (184 . 186) (183 . 185)) nil (25840 44283 770928 487000) 0 nil])
([nil nil ((186 . 190)) nil (25840 44283 770927 786000) 0 nil])
([nil nil ((190 . 191)) nil (25840 44283 770927 425000) 0 nil])
([nil nil ((192 . 194) (#("\"" 0 1 (fontified nil)) . -192) (191 . 193)) nil (25840 44283 770926 894000) 0 nil])
([nil nil ((193 . 197)) nil (25840 44283 770926 454000) 0 nil])
([nil nil ((198 . 199)) nil (25840 44283 770926 43000) 0 nil])
([nil nil ((199 . 202)) nil (25840 44283 770925 642000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:string)) . -193) (undo-tree-id184 . -1) 194) nil (25840 44283 770925 41000) 0 nil])
([nil nil ((193 . 194)) nil (25840 44283 770922 606000) 0 nil])
([nil nil ((202 . 206)) nil (25840 44283 770921 524000) 0 nil])
([nil nil ((202 . 227) (#("des" 0 3 (fontified nil)) . 202) (202 . 205) (#("description" 0 11 (fontified nil)) . -202) (202 . 213) (#("desc" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -202) (undo-tree-id182 . -4) (undo-tree-id183 . -4) 206) nil (25840 44283 770918 779000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -216) (undo-tree-id170 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -217) (undo-tree-id171 . -1) (#(":" 0 1 (fontified t)) . -218) (undo-tree-id172 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -219) (undo-tree-id173 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -220) (undo-tree-id174 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -221) (undo-tree-id175 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -222) (undo-tree-id176 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -223) (undo-tree-id177 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -224) (undo-tree-id178 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -225) (undo-tree-id179 . -1) (undo-tree-id180 . 1) (undo-tree-id181 . -1) 226) nil (25840 44283 770910 153000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -215) (undo-tree-id169 . -1) 216) nil (25840 44283 770902 799000) 0 nil])
([nil nil ((216 . 236) (215 . 217) (#("\"" 0 1 (fontified nil)) . -215) (215 . 216)) nil (25840 44283 770901 948000) 0 nil])
([nil nil ((236 . 239)) nil (25840 44283 770901 517000) 0 nil])
([nil nil ((241 . 244)) nil (25840 44283 770901 96000) 0 nil])
([nil nil ((244 . 251)) nil (25840 44283 770900 806000) 0 nil])
([nil nil ((251 . 252)) nil (25840 44283 770900 275000) 0 nil])
([nil nil ((244 . 272) (#("callback" 0 8 (fontified nil)) . 244) (244 . 252) (#("callback" 0 8 (fontified t face tree-sitter-hl-face:variable)) . -244) (undo-tree-id167 . -8) (undo-tree-id168 . -8) 252) nil (25840 44283 770899 734000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -254) (undo-tree-id148 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -255) (undo-tree-id149 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -256) (undo-tree-id150 . -1) (#(":" 0 1 (fontified t)) . -257) (undo-tree-id151 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id152 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -259) (undo-tree-id153 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -260) (undo-tree-id154 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -261) (undo-tree-id155 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -262) (undo-tree-id156 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -263) (undo-tree-id157 . -1) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id158 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -265) (undo-tree-id159 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -266) (undo-tree-id160 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -267) (undo-tree-id161 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -268) (undo-tree-id162 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -269) (undo-tree-id163 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -270) (undo-tree-id164 . -1) (undo-tree-id165 . 1) (undo-tree-id166 . -1) 271) nil (25840 44283 770896 678000) 0 nil])
([nil nil ((254 . 265)) nil (25840 44283 770890 45000) 0 nil])
([nil nil ((269 . 270)) nil (25840 44283 770889 795000) 0 nil])
([nil nil ((270 . 273)) nil (25840 44283 770889 194000) 0 nil])
([nil nil ((273 . 275) (#("\"" 0 1 (fontified nil)) . -273) (273 . 274)) nil (25840 44283 770888 623000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -272) (undo-tree-id147 . -1) 273) nil (25840 44283 770887 841000) 0 nil])
([nil nil ((273 . 277)) nil (25840 44283 770887 60000) 0 nil])
([nil nil ((271 . 273) (#("	" 0 1 (fontified nil)) . -271) (278 . 279)) nil (25840 44283 770886 409000) 0 nil])
([nil nil ((280 . 282)) nil (25840 44283 770885 236000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -282) (282 . 283) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -282) (282 . 283) (280 . 283)) nil (25840 44283 770884 565000) 0 nil])
([nil nil ((283 . 285) (284 . 285) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 283) (283 . 285) (282 . 284)) nil (25840 44283 770883 142000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -272) (undo-tree-id146 . -1) 273) nil (25840 44283 770882 60000) 0 nil])
([nil nil ((291 . 295) (290 . 292) (#("\"" 0 1 (fontified nil)) . -290) (284 . 291)) nil (25840 44283 770881 49000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -294) (undo-tree-id145 . -1) 295) nil (25840 44283 770880 477000) 0 nil])
([nil nil ((294 . 295)) nil (25840 44283 770879 836000) 0 nil])
([nil nil ((296 . 297)) nil (25840 44283 770879 426000) 0 nil])
([nil nil ((297 . 300)) nil (25840 44283 770879 25000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -296) (undo-tree-id141 . -1) (#("
" 0 1 (fontified t)) . -297) (undo-tree-id142 . -1) (#("	" 0 1 (fontified t)) . -298) (undo-tree-id143 . -1) (#("	" 0 1 (fontified t)) . -299) (undo-tree-id144 . -1) 300) nil (25840 44283 770878 133000) 0 nil])
([nil nil ((296 . 299)) nil (25840 44283 770875 358000) 0 nil])
([nil nil ((299 . 303)) nil (25840 44283 770874 887000) 0 nil])
([nil nil ((299 . 324) (#("desc" 0 4 (fontified nil)) . 299) (299 . 303) (#("description" 0 11 (fontified nil)) . -299) (299 . 310) (#("desc" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -299) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 303) nil (25840 44283 770873 985000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -312) (undo-tree-id126 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -313) (undo-tree-id127 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -314) (undo-tree-id128 . -1) (#(":" 0 1 (fontified t)) . -315) (undo-tree-id129 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -316) (undo-tree-id130 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -317) (undo-tree-id131 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -318) (undo-tree-id132 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -319) (undo-tree-id133 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -320) (undo-tree-id134 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -321) (undo-tree-id135 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -322) (undo-tree-id136 . -1) (undo-tree-id137 . 1) (undo-tree-id138 . -1) 323) nil (25840 44283 770869 777000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -295) (undo-tree-id125 . -1) 296) nil (25840 44283 770864 107000) 0 nil])
([nil nil ((295 . 296) (#("\"" 0 1 (fontified nil)) . -295) (295 . 296)) nil (25840 44283 770862 965000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -310) (undo-tree-id123 . -1) (#(" " 0 1 (fontified t)) . -311) (undo-tree-id124 . -1) 312) nil (25840 44283 770861 532000) 0 nil])
([nil nil ((312 . 314) (#("\"" 0 1 (fontified nil)) . -312) (310 . 313)) nil (25840 44283 770859 819000) 0 nil])
([nil nil ((296 . 297)) nil (25840 44283 770858 837000) 0 nil])
([nil nil ((316 . 319)) nil (25840 44283 770858 356000) 0 nil])
([nil nil ((319 . 323)) nil (25840 44283 770857 915000) 0 nil])
([nil nil ((319 . 347) (#("call" 0 4 (fontified nil)) . 319) (319 . 323) (#("callback" 0 8 (fontified nil)) . -319) (319 . 327) (#("call" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -319) (undo-tree-id121 . -4) (undo-tree-id122 . -4) 323) nil (25840 44283 770856 913000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -328) (undo-tree-id101 . -1) (#("$" 0 1 (fontified t)) . -329) (undo-tree-id102 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -330) (undo-tree-id103 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -331) (undo-tree-id104 . -1) (#(":" 0 1 (fontified t)) . -332) (undo-tree-id105 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -333) (undo-tree-id106 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -334) (undo-tree-id107 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -335) (undo-tree-id108 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -336) (undo-tree-id109 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -337) (undo-tree-id110 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -338) (undo-tree-id111 . -1) (#(" " 0 1 (fontified t)) . -339) (undo-tree-id112 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -340) (undo-tree-id113 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -341) (undo-tree-id114 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -342) (undo-tree-id115 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -343) (undo-tree-id116 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -344) (undo-tree-id117 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -345) (undo-tree-id118 . -1) (undo-tree-id119 . 1) (undo-tree-id120 . -1) 346) nil (25840 44283 770852 74000) 0 nil])
([nil nil ((328 . 329)) nil (25840 44283 770829 672000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -328) (undo-tree-id271 . -1) 329 (t 25840 44283 778269 545000)) nil (25840 44491 458880 710000) 0 nil])
([nil nil ((328 . 329)) nil (25840 44491 458878 636000) 0 nil])
([nil nil ((328 . 329)) nil (25840 44491 458877 845000) 0 nil])
([nil nil ((330 . 331)) nil (25840 44491 458876 713000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -329) (undo-tree-id269 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -330) (undo-tree-id270 . -1) 331) nil (25840 44491 458875 330000) 0 nil])
([nil nil ((329 . 330)) nil (25840 44491 458872 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -328) (undo-tree-id267 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -329) (undo-tree-id268 . -1) 330) nil (25840 44491 458871 633000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -311) (undo-tree-id263 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id264 . -1) (#("\"" 0 1 (fontified t)) . -313) (undo-tree-id265 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -314) (undo-tree-id266 . -1) 315) nil (25840 44491 458866 373000) 0 nil])
([nil nil ((311 . 313)) nil (25840 44491 458862 576000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -308) (undo-tree-id258 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -309) (undo-tree-id259 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id260 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id262 . -1) 313) nil (25840 44491 458860 392000) 0 nil])
([nil nil ((308 . 309)) nil (25840 44491 458856 415000) 0 nil])
([nil nil ((300 . 325) (#("descripti" 0 9 (fontified nil)) . 300) (300 . 309) (#("description" 0 11 (fontified nil)) . -300) (300 . 311) (#("descripti" 0 9 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id256 . -9) (undo-tree-id257 . -9) 309) nil (25840 44491 458855 122000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -312) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("$" 0 1 (fontified t)) . -313) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . 1) (undo-tree-id235 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -315) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -317) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -318) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -319) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -320) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id252 . -1) (undo-tree-id253 . 1) (undo-tree-id254 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id255 . -1) 325) nil (25840 44491 458849 602000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -311) (undo-tree-id225 . -1) 312) nil (25840 44491 458831 37000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -309) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 311) nil (25840 44491 458826 268000) 0 nil])
([nil nil ((309 . 310)) nil (25840 44491 458811 380000) 0 nil])
([nil nil ((300 . 325) (#("descriptio" 0 10 (fontified nil)) . 300) (300 . 310) (#("description" 0 11 (fontified nil)) . -300) (300 . 311) (#("descriptio" 0 10 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -10) (undo-tree-id214 . -10) 310) nil (25840 44491 458809 306000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -308) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -309) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("$" 0 1 (fontified t)) . -313) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -315) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -317) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -318) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -319) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -320) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . 1) (undo-tree-id207 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 325) nil (25840 44491 458802 704000) 0 nil])
([nil nil ((308 . 309)) nil (25840 44491 458779 761000) 0 nil])
([nil nil ((300 . 325) (#("descripti" 0 9 (fontified nil)) . 300) (300 . 309) (#("description" 0 11 (fontified nil)) . -300) (300 . 311) (#("descripti" 0 9 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id172 . -9) (undo-tree-id173 . -9) 309) nil (25840 44491 458777 777000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("$" 0 1 (fontified t)) . -313) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . 1) (undo-tree-id151 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -315) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -317) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -318) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -319) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -320) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id168 . -1) (undo-tree-id169 . 1) (undo-tree-id170 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id171 . -1) 325) nil (25840 44491 458772 568000) 0 nil])
([nil nil ((310 . 311)) nil (25840 44491 458741 379000) 0 nil])
([nil nil ((300 . 325) (#("description" 0 11 (fontified nil)) . 300) (300 . 311) (#("description" 0 11 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id134 . -11) (undo-tree-id135 . -11) 311) nil (25840 44491 458739 586000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -306) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -307) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -308) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -309) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("$" 0 1 (fontified t)) . -313) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . 1) (undo-tree-id113 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -315) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -317) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -318) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -319) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -320) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -321) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id130 . -1) (undo-tree-id131 . 1) (undo-tree-id132 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id133 . -1) 325) nil (25840 44491 458734 647000) 0 nil])
([nil nil ((306 . 307)) nil (25840 44491 458554 188000) 0 nil])
([nil nil ((300 . 325) (#("descrip" 0 7 (fontified nil)) . 300) (300 . 307) (#("description" 0 11 (fontified nil)) . -300) (300 . 311) (#("descrip" 0 7 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id84 . -7) (undo-tree-id85 . -7) 307) nil (25840 44491 458552 896000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t)) . -312) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("$" 0 1 (fontified nil)) . -313) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . 1) (undo-tree-id53 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -315) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -317) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -318) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -319) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -320) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . 1) (undo-tree-id81 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 325) nil (25840 44491 458547 726000) 0 nil])
([nil nil ((310 . 311)) nil (25840 44491 458521 26000) 0 nil])
([nil nil ((300 . 325) (#("description" 0 11 (fontified nil)) . 300) (300 . 311) (#("description" 0 11 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id35 . -11) (undo-tree-id36 . -11) 311) nil (25840 44491 458519 583000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -312) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("$" 0 1 (fontified t)) . -313) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -314) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified nil)) . -315) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#(":" 0 1 (fontified nil)) . -316) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -317) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -318) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -319) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -320) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -322) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -323) (undo-tree-id31 . -1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) (#("," 0 1 (fontified t)) . -324) (undo-tree-id34 . -1) 325) nil (25840 44491 458515 596000) 0 nil])
([nil nil ((312 . 313)) nil (25840 44491 458437 499000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -308) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -309) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -310) (undo-tree-id347 . -1) (#(":" 0 1 (fontified t)) . -311) (undo-tree-id348 . -1) 312 (t 25840 44491 469307 319000)) nil (25840 44633 471489 413000) 0 nil])
([nil nil ((308 . 309)) nil (25840 44633 471484 494000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 313 332 nil nil nil t nil)) nil 0 nil #s(yas--field 1 313 332 nil nil nil t nil) nil nil)) (300 . 320) (#("description: ${1:string}," 0 25 (fontified nil)) . 300) (300 . 325) (#("descripti" 0 9 (fontified nil)) . 300) (300 . 309) (#("description" 0 11 (fontified nil)) . -300) (300 . 311) (#("descripti" 0 9 (face tree-sitter-hl-face:variable fontified t)) . -300) (undo-tree-id340 . -8) (undo-tree-id341 . -9) (undo-tree-id342 . -9) 309) nil (25840 44633 471482 991000) 0 nil])
([nil nil ((314 . 331) (313 . 315) (#("\"" 0 1 (fontified nil)) . -313) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified nil)) . 314) (313 . 314)) nil (25840 44633 471264 772000) 0 nil])
([nil nil ((apply yas--snippet-revive 300 333 #s(yas--snippet nil (#s(yas--field 1 313 332 nil nil nil t nil)) nil 0 nil #s(yas--field 1 313 332 nil nil nil t nil) nil nil))) nil (25840 44633 471263 369000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -333) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("," 0 1 (fontified t)) . -334) (undo-tree-id334 . 1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) 335) nil (25840 44633 471261 576000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -324) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -325) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -326) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -327) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -328) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -329) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -330) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 331) nil (25840 44633 471250 665000) 0 nil])
([nil nil ((324 . 331)) nil (25840 44633 471241 448000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -318) (undo-tree-id314 . -1) 319) nil (25840 44633 471240 45000) 0 nil])
([nil nil ((344 . 351)) nil (25840 44633 471238 31000) 0 nil])
([nil nil ((351 . 356)) nil (25840 44633 471237 240000) 0 nil])
([nil nil ((360 . 361)) nil (25840 44633 471236 68000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -360) (undo-tree-id311 . -1) (#("
" 0 1 (fontified t)) . -361) (undo-tree-id312 . -1) (#("	" 0 1 (fontified t)) . -362) (undo-tree-id313 . -1) 363) nil (25840 44633 471234 725000) 0 nil])
([nil nil ((360 . 361)) nil (25840 44633 471231 780000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -134) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -135) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -136) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -137) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -138) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#(" " 0 1 (fontified t)) . -139) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 140) nil (25840 44633 471229 425000) 0 nil])
([nil nil ((141 . 142)) nil (25840 44633 471218 375000) 0 nil])
([nil nil ((375 . 376) (#("	" 0 1 (fontified nil)) . 374) (undo-tree-id292 . -1) (373 . 376)) nil (25840 44633 471217 272000) 0 nil])
([nil nil ((375 . 376) (#("	" 0 1 (fontified nil)) . 374) (374 . 375) (374 . 375)) nil (25840 44633 471213 876000) 0 nil])
([nil nil ((nil rear-nonsticky nil 599 . 600) (nil fontified nil 376 . 600) (376 . 600) 375) nil (25840 44633 471212 93000) 0 nil])
([nil nil ((599 . 601)) nil (25840 44633 471210 530000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -599) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#(" " 0 1 (fontified t)) . -600) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 601) nil (25840 44633 471204 839000) 0 nil])
([nil nil ((#("cliMap := map[string]cliCommand {
	\"help\": {
		name: \"help\",
		description: \"Displays a help message\",
		callback: commandHelp,
	},
	\"exit\": {
		name: \"exit\",
		description: \"Exit the Pokedex\",
		callback: commandExit,
	},
}
" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:operator fontified t) 8 9 (face tree-sitter-hl-face:operator fontified t) 9 10 (fontified t) 10 13 (face tree-sitter-hl-face:keyword fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (face tree-sitter-hl-face:type fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 31 (face tree-sitter-hl-face:type fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 41 (face tree-sitter-hl-face:string fontified t) 41 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 47 (fontified t) 47 51 (face tree-sitter-hl-face:variable fontified t) 51 53 (fontified t) 53 59 (face tree-sitter-hl-face:string fontified t) 59 63 (fontified t) 63 74 (face tree-sitter-hl-face:variable fontified t) 74 76 (fontified t) 76 101 (face tree-sitter-hl-face:string fontified t) 101 105 (fontified t) 105 113 (face tree-sitter-hl-face:variable fontified t) 113 115 (fontified t) 115 126 (face tree-sitter-hl-face:variable fontified t) 126 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-2-face) fontified t) 130 133 (fontified t) 133 139 (face tree-sitter-hl-face:string fontified t) 139 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 145 (fontified t) 145 149 (face tree-sitter-hl-face:variable fontified t) 149 151 (fontified t) 151 157 (face tree-sitter-hl-face:string fontified t) 157 158 (fontified t) 158 159 (fontified t) 159 161 (fontified t) 161 172 (face tree-sitter-hl-face:variable fontified t) 172 174 (fontified t) 174 192 (face tree-sitter-hl-face:string fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 196 (fontified t) 196 204 (face tree-sitter-hl-face:variable fontified t) 204 206 (fontified t) 206 217 (face tree-sitter-hl-face:variable fontified t) 217 219 (fontified t) 219 220 (fontified t) 220 221 (face (rainbow-delimiters-depth-2-face) fontified t) 221 222 (fontified t) 222 223 (fontified t) 223 224 (face (rainbow-delimiters-depth-1-face) fontified t) 224 225 (fontified t)) . 134) (undo-tree-id398 . -223) (undo-tree-id399 . -218) (undo-tree-id400 . -161) (undo-tree-id401 . -161) (undo-tree-id402 . -193) (undo-tree-id403 . -224) (undo-tree-id404 . -193) (undo-tree-id405 . -193) (undo-tree-id406 . -184) (undo-tree-id407 . -218) (undo-tree-id408 . -193) (undo-tree-id409 . -224) (undo-tree-id410 . -161) (undo-tree-id411 . -223) (undo-tree-id412 . -223) (t 25840 44633 481719 449000)) nil (25840 44797 448167 659000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 134) (undo-tree-id397 . 1)) nil (25840 44797 448154 494000) 0 nil])
([nil nil ((150 . 151) (#("	" 0 1 (fontified nil)) . 149) (undo-tree-id396 . -1) (149 . 151) (#("	" 0 1 (fontified nil)) . 148) (148 . 149) (148 . 149)) nil (25840 44797 448152 931000) 0 nil])
([nil nil ((149 . 150)) nil (25840 44797 448151 348000) 0 nil])
([nil nil ((150 . 151)) nil (25840 44797 448150 507000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -150) (undo-tree-id395 . -1) 151) nil (25840 44797 448149 595000) 0 nil])
([nil nil ((150 . 161)) nil (25840 44797 448147 451000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -150) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -151) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -152) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -153) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -154) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -155) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -156) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -157) (undo-tree-id391 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -158) (undo-tree-id392 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -159) (undo-tree-id393 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -160) (undo-tree-id394 . -1) 161) nil (25840 44797 448144 515000) 0 nil])
([nil nil ((150 . 162)) nil (25840 44797 448131 90000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -170) (170 . 171) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -170) (170 . 171) (168 . 171) (#(")" 0 1 (fontified nil)) . -167) (167 . 168) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -167) (167 . 168) (162 . 168)) nil (25840 44797 448129 137000) 0 nil])
([nil nil ((171 . 173) (172 . 173) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 171) (171 . 173) (170 . 172)) nil (25840 44797 448125 590000) 0 nil])
([nil nil ((168 . 174)) nil (25840 44797 448123 586000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -156) (156 . 157) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -156) (156 . 157) (155 . 157)) nil (25840 44797 448122 234000) 0 nil])
([nil nil ((156 . 159)) nil (25840 44797 448120 811000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -156) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -157) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -158) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 159) nil (25840 44797 448118 817000) 0 nil])
([nil nil ((156 . 161)) nil (25840 44797 448114 679000) 0 nil])
([nil nil ((apply yas--snippet-revive 158 168 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (158 . 168) (#("cliCommand" 0 10 (fontified nil)) . 158) (158 . 168) (#("cli" 0 3 (fontified nil)) . 158) (158 . 161) (#("cliCommand" 0 10 (fontified nil)) . -158) (158 . 168) (#("cli" 0 3 (face tree-sitter-hl-face:type fontified t)) . -158) (undo-tree-id369 . -3) (undo-tree-id370 . -3) 161) nil (25840 44797 448112 876000) 0 nil])
([nil nil ((183 . 184)) nil (25840 44797 448108 488000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -183) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 184) nil (25840 44797 448107 175000) 0 nil])
([nil nil ((181 . 182)) nil (25840 44797 448099 341000) 0 nil])
([nil nil ((#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -181) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 182) nil (25840 44797 448097 998000) 0 nil])
([nil nil ((181 . 182)) nil (25840 44797 448070 737000) 0 nil])
([nil nil ((194 . 204) (t 25840 44797 460091 146000)) nil (25842 18733 931706 681000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -201) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -202) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -203) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 204) nil (25842 18733 931705 118000) 0 nil])
([nil nil ((201 . 204)) nil (25842 18733 931700 299000) 0 nil])
([nil nil ((204 . 205)) nil (25842 18733 931699 317000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -201) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -202) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -203) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("." 0 1 (fontified t)) . -204) (undo-tree-id242 . -1) 205) nil (25842 18733 931697 694000) 0 nil])
([nil nil ((201 . 210)) nil (25842 18733 931692 895000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -201) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -202) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -203) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -204) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -205) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("." 0 1 (fontified t)) . -206) (undo-tree-id232 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -207) (undo-tree-id233 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -208) (undo-tree-id234 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -209) (undo-tree-id235 . -1) 210) nil (25842 18733 931690 230000) 0 nil])
([nil nil ((201 . 207)) nil (25842 18733 931682 366000) 0 nil])
([nil nil ((207 . 214) (#("Error" 0 5 (fontified nil)) . -207) (207 . 212)) nil (25842 18733 931681 304000) 0 nil])
([nil nil ((169 . 170)) nil (25842 18733 931679 801000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -182) (undo-tree-id221 . -1) 183) nil (25842 18733 931679 240000) 0 nil])
([nil nil ((#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -198) (undo-tree-id203 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -199) (undo-tree-id204 . -1) (#(" " 0 1 (fontified t)) . -200) (undo-tree-id205 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -201) (undo-tree-id206 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -202) (undo-tree-id207 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -203) (undo-tree-id208 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -204) (undo-tree-id209 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -205) (undo-tree-id210 . -1) (#("." 0 1 (fontified t)) . -206) (undo-tree-id211 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -207) (undo-tree-id212 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -208) (undo-tree-id213 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -209) (undo-tree-id214 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -210) (undo-tree-id215 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -211) (undo-tree-id216 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -212) (undo-tree-id217 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -213) (undo-tree-id218 . -1) (undo-tree-id219 . 1) (undo-tree-id220 . -1) 214) nil (25842 18733 931675 503000) 0 nil])
([nil nil ((198 . 201)) nil (25842 18733 931659 203000) 0 nil])
([nil nil ((44 . 46)) nil (25842 18733 931658 61000) 0 nil])
([nil nil ((47 . 52) (46 . 48) (#("\"" 0 1 (fontified nil)) . -46) (46 . 47)) nil (25842 18733 931656 718000) 0 nil])
([nil nil ((47 . 53) (#("error" 0 5 (fontified nil)) . 47) (47 . 52) (#("errors" 0 6 (fontified nil)) . -47) (47 . 53) (#("error" 0 5 (fontified t face tree-sitter-hl-face:string)) . -47) (undo-tree-id201 . -5) (undo-tree-id202 . -5) 52) nil (25842 18733 931654 745000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -52) (undo-tree-id200 . -1) 53) nil (25842 18733 931651 399000) 0 nil])
([nil nil ((210 . 217)) nil (25842 18733 931650 146000) 0 nil])
([nil nil ((52 . 53)) nil (25842 18733 931648 724000) 0 nil])
([nil nil ((216 . 217)) nil (25842 18733 931647 582000) 0 nil])
([nil nil ((219 . 220)) nil (25842 18733 931646 860000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -219) (undo-tree-id199 . -1) 220) nil (25842 18733 931646 469000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -217) (undo-tree-id197 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -218) (undo-tree-id198 . -1) 219) nil (25842 18733 931644 877000) 0 nil])
([nil nil ((217 . 218)) nil (25842 18733 931643 294000) 0 nil])
([nil nil ((218 . 239) (#("New" 0 3 (fontified nil)) . -218) (218 . 221)) nil (25842 18733 931642 212000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -222) (undo-tree-id179 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -223) (undo-tree-id180 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -224) (undo-tree-id181 . -1) (#(":" 0 1 (fontified t)) . -225) (undo-tree-id182 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -226) (undo-tree-id183 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -227) (undo-tree-id184 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -228) (undo-tree-id185 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -229) (undo-tree-id186 . -1) (#(" " 0 1 (fontified t)) . -230) (undo-tree-id187 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -231) (undo-tree-id188 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -232) (undo-tree-id189 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -233) (undo-tree-id190 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -234) (undo-tree-id191 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -235) (undo-tree-id192 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -236) (undo-tree-id193 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -237) (undo-tree-id194 . -1) (undo-tree-id195 . 1) (undo-tree-id196 . -1) 238) nil (25842 18733 931638 525000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -218) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -219) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -220) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -221) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . 1) (undo-tree-id175 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -222) (undo-tree-id176 . -1) (undo-tree-id177 . 1) (undo-tree-id178 . -1) 223) nil (25842 18733 931626 733000) 0 nil])
([nil nil ((218 . 220)) nil (25842 18733 931616 354000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -217) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -218) (undo-tree-id163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -219) (undo-tree-id164 . -1) 220) nil (25842 18733 931615 61000) 0 nil])
([nil nil ((217 . 218)) nil (25842 18733 931611 976000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 222 229 nil nil nil t nil)) nil 0 nil #s(yas--field 1 222 229 nil nil nil t nil) nil nil)) (218 . 234) (#("New(${1:text string})" 0 21 (fontified nil)) . 218) (218 . 239) (#("New" 0 3 (fontified nil)) . -218) (218 . 221)) nil (25842 18733 931611 24000) 0 nil])
([nil nil ((223 . 228) (222 . 224) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -222) (#("text string" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:variable)) . 223) (222 . 223)) nil (25842 18733 931608 980000) 0 nil])
([nil nil ((apply yas--snippet-revive 218 230 #s(yas--snippet nil (#s(yas--field 1 222 229 nil nil nil t nil)) nil 0 nil #s(yas--field 1 222 229 nil nil nil t nil) nil nil))) nil (25842 18733 931606 946000) 0 nil])
([nil nil ((230 . 231)) nil (25842 18733 931606 85000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -230) (undo-tree-id160 . -1) 231) nil (25842 18733 931604 953000) 0 nil])
([nil nil ((128 . 130)) nil (25842 18733 931603 961000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -128) (undo-tree-id158 . -1) (#("ó" 0 1 (fontified t face tree-sitter-hl-face:type)) . -129) (undo-tree-id159 . -1) 130) nil (25842 18733 931602 548000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -119) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -120) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -121) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -122) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -123) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -124) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -125) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:type)) . -126) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -127) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -128) (undo-tree-id99 . -1) (undo-tree-id100 . 1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -129) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -130) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -131) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -132) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -133) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t)) . -134) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -135) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -136) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -137) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -138) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -139) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 140) nil (25842 18733 931595 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -117) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("	" 0 1 (fontified t)) . -118) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 119) nil (25842 18733 931284 89000) 0 nil])
([nil nil ((117 . 119)) nil (25842 18733 931219 420000) 0 nil])
([nil nil ((119 . 140)) nil (25842 18733 931214 180000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -194) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -195) (undo-tree-id323 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -196) (undo-tree-id324 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -197) (undo-tree-id325 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -198) (undo-tree-id326 . -1) 199 (t 25842 18733 943266 816000)) nil (25842 19106 193170 186000) 0 nil])
([nil nil ((194 . 197)) nil (25842 19106 192877 19000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -194) (undo-tree-id318 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -195) (undo-tree-id319 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -196) (undo-tree-id320 . -1) 197) nil (25842 19106 192875 697000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -206) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -207) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -208) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -209) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -210) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -211) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("." 0 1 (fontified t)) . -212) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -213) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -214) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -215) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -216) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("\"" 0 1 (fontified t)) . -217) (undo-tree-id308 . -1) (#("E" 0 1 (fontified t)) . -218) (undo-tree-id309 . -1) (#("r" 0 1 (fontified t)) . -219) (undo-tree-id310 . -1) (#("r" 0 1 (fontified t)) . -220) (undo-tree-id311 . -1) (#("o" 0 1 (fontified t)) . -221) (undo-tree-id312 . -1) (#("r" 0 1 (fontified t)) . -222) (undo-tree-id313 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -223) (undo-tree-id314 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -224) (undo-tree-id315 . -1) (undo-tree-id316 . 1) (undo-tree-id317 . -1) 225) nil (25842 19106 192869 836000) 0 nil])
([nil nil ((194 . 198)) nil (25842 19106 192848 76000) 0 nil])
([nil nil ((198 . 199)) nil (25842 19106 192847 114000) 0 nil])
([nil nil ((60 . 61)) nil (25842 19117 627608 898000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 60) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1)) ((60 . 61)) (25842 19118 155295 776000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -204) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -205) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -206) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -207) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -208) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -209) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#(" " 0 1 (fontified t)) . -210) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) 211 (t 25842 19121 376116 195000)) nil (25842 19388 402357 481000) 0 nil] [nil nil ((#("type cliCommand struct {
	name string
	description string
	callback func() error
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 15 (fontified t face tree-sitter-hl-face:type) 15 16 (fontified t) 16 22 (fontified t face tree-sitter-hl-face:keyword) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t) 25 26 (fontified t) 26 30 (fontified t face tree-sitter-hl-face:property) 30 31 (fontified t) 31 37 (fontified t face tree-sitter-hl-face:type) 37 38 (fontified t) 38 39 (fontified t) 39 50 (fontified t face tree-sitter-hl-face:property) 50 51 (fontified t) 51 57 (fontified t face tree-sitter-hl-face:type) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t face tree-sitter-hl-face:property) 60 61 (fontified t face tree-sitter-hl-face:property) 61 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t face tree-sitter-hl-face:property) 63 64 (fontified t face tree-sitter-hl-face:property) 64 65 (fontified t face tree-sitter-hl-face:property) 65 66 (fontified t face tree-sitter-hl-face:property) 66 67 (fontified t face tree-sitter-hl-face:property) 67 68 (fontified t) 68 69 (fontified t face tree-sitter-hl-face:keyword) 69 70 (fontified t face tree-sitter-hl-face:keyword) 70 71 (fontified t face tree-sitter-hl-face:keyword) 71 72 (fontified t face tree-sitter-hl-face:keyword) 72 73 (fontified t face (rainbow-delimiters-depth-2-face)) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t) 75 76 (fontified t face tree-sitter-hl-face:type) 76 77 (fontified t face tree-sitter-hl-face:type) 77 78 (fontified t face tree-sitter-hl-face:type) 78 79 (fontified t face tree-sitter-hl-face:type) 79 80 (fontified t face tree-sitter-hl-face:type) 80 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-1-face)) 82 83 (fontified t)) . 60) (undo-tree-id249 . -81) (undo-tree-id250 . 83) (undo-tree-id251 . -80) (undo-tree-id252 . -81) (undo-tree-id253 . -82) (undo-tree-id254 . -82) (undo-tree-id255 . -80) (undo-tree-id256 . -81) (undo-tree-id257 . -5) (undo-tree-id258 . -26) (undo-tree-id259 . -39) (undo-tree-id260 . -59) (undo-tree-id261 . -83) (undo-tree-id262 . -81) (undo-tree-id263 . -81) (undo-tree-id264 . 2) (undo-tree-id265 . -82) (undo-tree-id266 . 60) (undo-tree-id267 . -24) (undo-tree-id268 . -81) (undo-tree-id269 . -83) 141) ((60 . 143)) (25842 19116 808517 433000) 0 nil])
([nil nil ((204 . 208)) nil (25842 19388 402343 615000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75 . 76) (#("
" 0 1 (fontified nil)) . -158) (75 . 159)) ((#("
type cliCommand struct {
	name string
	description string
	callback func() error
}
" 0 1 (fontified nil rear-nonsticky nil) 1 5 (fontified nil face tree-sitter-hl-face:keyword) 5 6 (fontified nil) 6 16 (fontified nil face tree-sitter-hl-face:type) 16 17 (fontified nil) 17 23 (fontified nil face tree-sitter-hl-face:keyword) 23 24 (fontified nil) 24 25 (fontified nil face (rainbow-delimiters-depth-2-face)) 25 26 (fontified nil) 26 27 (fontified t) 27 31 (fontified t face tree-sitter-hl-face:property) 31 32 (fontified t) 32 38 (fontified t face tree-sitter-hl-face:type) 38 39 (fontified t) 39 40 (fontified t) 40 51 (fontified t face tree-sitter-hl-face:property) 51 52 (fontified t) 52 58 (fontified t face tree-sitter-hl-face:type) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t face tree-sitter-hl-face:property) 61 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t face tree-sitter-hl-face:property) 63 64 (fontified t face tree-sitter-hl-face:property) 64 65 (fontified t face tree-sitter-hl-face:property) 65 66 (fontified t face tree-sitter-hl-face:property) 66 67 (fontified t face tree-sitter-hl-face:property) 67 68 (fontified t face tree-sitter-hl-face:property) 68 69 (fontified t) 69 70 (fontified t face tree-sitter-hl-face:keyword) 70 71 (fontified t face tree-sitter-hl-face:keyword) 71 72 (fontified t face tree-sitter-hl-face:keyword) 72 73 (fontified t face tree-sitter-hl-face:keyword) 73 74 (fontified t face (rainbow-delimiters-depth-3-face)) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t) 76 77 (fontified t face tree-sitter-hl-face:type) 77 78 (fontified t face tree-sitter-hl-face:type) 78 79 (fontified t face tree-sitter-hl-face:type) 79 80 (fontified t face tree-sitter-hl-face:type) 80 81 (fontified t face tree-sitter-hl-face:type) 81 82 (fontified t) 82 83 (fontified nil face (rainbow-delimiters-depth-2-face)) 83 84 (fontified nil)) . 75) (undo-tree-id327 . -59) (undo-tree-id328 . -59) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -59) (undo-tree-id332 . -59) (undo-tree-id333 . -59) (undo-tree-id334 . -59) (undo-tree-id335 . -59) (undo-tree-id336 . -59) (undo-tree-id337 . -59) (undo-tree-id338 . -59) (undo-tree-id339 . -59) (undo-tree-id340 . -59) (undo-tree-id341 . -59) (undo-tree-id342 . -59) (undo-tree-id343 . -59) (undo-tree-id344 . -59) (undo-tree-id345 . -59) (undo-tree-id346 . -59) (undo-tree-id347 . -59) (undo-tree-id348 . -59) (undo-tree-id349 . -59) (undo-tree-id350 . -59) (undo-tree-id351 . -59) (undo-tree-id352 . -59) (undo-tree-id353 . -59) (undo-tree-id354 . -59) (undo-tree-id355 . -59) (158 . 159) (nil rear-nonsticky t 75 . 76) (t 25842 19106 297346 372000)) (25842 19106 192806 648000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -204) (undo-tree-id475 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -205) (undo-tree-id476 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -206) (undo-tree-id477 . -1) (#(" " 0 1 (fontified t)) . -207) (undo-tree-id478 . -1) 208) nil (25842 19388 402341 892000) 0 nil])
nil
([nil nil ((204 . 213)) nil (25842 19388 402337 604000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -212) (undo-tree-id473 . -1) (undo-tree-id474 . -1) 213) nil (25842 19388 402336 472000) 0 nil])
([nil nil ((212 . 223)) nil (25842 19388 402334 288000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -224) (224 . 225) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -224) (224 . 225) (223 . 225)) nil (25842 19388 402333 65000) 0 nil])
([nil nil ((225 . 228) (226 . 228) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 225) (225 . 228) (224 . 226)) nil (25842 19388 402331 92000) 0 nil])
([nil nil ((#("	func (c cliCommand) commandHelp() error {
		for k,v := range m {
			
		}
	}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 8 9 (fontified t) 9 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 32 (fontified t face tree-sitter-hl-face:type) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t) 35 40 (fontified t face tree-sitter-hl-face:type) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 43 (fontified t) 43 45 (fontified t) 45 48 (fontified t face tree-sitter-hl-face:variable) 48 49 (fontified t) 49 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 52 (fontified t face tree-sitter-hl-face:variable) 52 53 (fontified t) 53 55 (fontified t face tree-sitter-hl-face:operator) 55 56 (fontified t) 56 61 (fontified t face tree-sitter-hl-face:keyword) 61 62 (fontified t) 62 63 (fontified t face tree-sitter-hl-face:type) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-3-face)) 65 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-3-face)) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t)) . 159) (undo-tree-id450 . -75) (undo-tree-id451 . 1) (undo-tree-id452 . -20) (undo-tree-id453 . -20) (undo-tree-id454 . -45) (undo-tree-id455 . -45) (undo-tree-id456 . -35) (undo-tree-id457 . -33) (undo-tree-id458 . -35) (undo-tree-id459 . -75) (undo-tree-id460 . -1) (undo-tree-id461 . -76) (undo-tree-id462 . -35) (undo-tree-id463 . -35) (undo-tree-id464 . -45) (undo-tree-id465 . -53) (undo-tree-id466 . -1) (undo-tree-id467 . -45) (undo-tree-id468 . -45) (undo-tree-id469 . -45) (undo-tree-id470 . -76) (undo-tree-id471 . -1) (undo-tree-id472 . -75) 160) nil (25842 19388 402328 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 389 . 390) (#("
" 0 1 (fontified nil)) . -465) (388 . 466) 387) nil (25842 19388 402315 533000) 0 nil])
([nil nil ((#("	func (c cliCommand) commandHelp() error {
		for k,v := range m {
			
		}
	}
" 0 1 (fontified t rear-nonsticky t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 8 9 (fontified t) 9 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 32 (fontified t face tree-sitter-hl-face:type) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t) 35 40 (fontified t face tree-sitter-hl-face:type) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 43 (fontified t) 43 45 (fontified t) 45 48 (fontified t face tree-sitter-hl-face:variable) 48 49 (fontified t) 49 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 52 (fontified t face tree-sitter-hl-face:variable) 52 53 (fontified t) 53 55 (fontified t face tree-sitter-hl-face:operator) 55 56 (fontified t) 56 61 (fontified t face tree-sitter-hl-face:keyword) 61 62 (fontified t) 62 63 (fontified t face tree-sitter-hl-face:type) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-3-face)) 65 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-3-face)) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t)) . 389) (undo-tree-id443 . -75) (undo-tree-id444 . -75) (undo-tree-id445 . -1) (undo-tree-id446 . -76) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -75) 390) nil (25842 19388 402313 669000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -235) (158 . 236)) nil (25842 19388 402309 521000) 0 nil])
([nil nil ((#("	func (c cliCommand) commandHelp() error {
		for k,v := range m {
			
		}
	}
" 0 1 (rear-nonsticky t fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 8 9 (fontified t) 9 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t) 21 32 (fontified t face tree-sitter-hl-face:type) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t) 35 40 (fontified t face tree-sitter-hl-face:type) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 43 (fontified t) 43 45 (fontified t) 45 48 (fontified t face tree-sitter-hl-face:variable) 48 49 (fontified t) 49 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 52 (fontified t face tree-sitter-hl-face:variable) 52 53 (fontified t) 53 55 (fontified t face tree-sitter-hl-face:operator) 55 56 (fontified t) 56 61 (fontified t face tree-sitter-hl-face:keyword) 61 62 (fontified t) 62 63 (fontified t face tree-sitter-hl-face:type) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-3-face)) 65 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-3-face)) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t)) . 159) (undo-tree-id421 . -75) (undo-tree-id422 . -77) (undo-tree-id423 . -77) (undo-tree-id424 . -77) (undo-tree-id425 . -77) (undo-tree-id426 . -77) (undo-tree-id427 . -77) (undo-tree-id428 . -77) (undo-tree-id429 . -75) (undo-tree-id430 . -1) (undo-tree-id431 . -76) (undo-tree-id432 . -77) (undo-tree-id433 . -77) (undo-tree-id434 . -77) (undo-tree-id435 . -77) (undo-tree-id436 . -1) (undo-tree-id437 . -77) (undo-tree-id438 . -77) (undo-tree-id439 . -77) (undo-tree-id440 . -77) (undo-tree-id441 . -1) (undo-tree-id442 . -75) 160) nil (25842 19388 402308 169000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -465) (388 . 466) 387) nil (25842 19388 402294 2000) 0 nil])
([nil nil ((162 . 167)) nil (25842 19388 402292 770000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -166) (undo-tree-id420 . -1) 167) nil (25842 19388 402291 658000) 0 nil])
([nil nil ((166 . 168)) nil (25842 19388 402289 865000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -175) (undo-tree-id419 . -1) 176) nil (25842 19388 402288 733000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -456) (undo-tree-id418 . -1) 457) nil (25842 19388 402287 300000) 0 nil])
([nil nil ((456 . 462)) nil (25842 19388 402285 847000) 0 nil])
([nil nil ((apply yas--snippet-revive 456 462 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (456 . 462) (#("cliMap" 0 6 (fontified nil)) . 456) (456 . 462) (#("cliMap" 0 6 (fontified nil)) . 456) (456 . 462) (#("cliMap" 0 6 (fontified t face tree-sitter-hl-face:type)) . -456) (undo-tree-id416 . -6) (undo-tree-id417 . -6) 462) nil (25842 19388 402284 304000) 0 nil])
([nil nil ((468 . 471)) nil (25842 19388 402280 467000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -468) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -470) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 471) nil (25842 19388 402278 654000) 0 nil])
([nil nil ((468 . 475)) nil (25842 19388 402273 414000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -474) (undo-tree-id409 . -1) 475) nil (25842 19388 402271 821000) 0 nil])
([nil nil ((474 . 476)) nil (25842 19388 402270 208000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 480 482 nil nil nil t nil)) nil 2 nil #s(yas--field 1 480 482 nil nil nil t nil) nil nil)) (472 . 489) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 472) (472 . 494) (#("Prin" 0 4 (fontified nil)) . 472) (472 . 476) (#("Println" 0 7 (fontified nil)) . -472) (472 . 479) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -472) (undo-tree-id407 . -4) (undo-tree-id408 . -4) 476) nil (25842 19388 402268 435000) 0 nil])
([nil nil ((#("a ...any" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:operator) 5 8 (fontified t face tree-sitter-hl-face:variable)) . 480)) nil (25842 19388 402264 868000) 0 nil])
([nil nil ((480 . 482) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -480) (480 . 481)) nil (25842 19388 402264 26000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -480) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 481)) nil (25842 19388 402263 125000) 0 nil])
([nil nil ((480 . 484)) nil (25842 19388 402261 552000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -480) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("," 0 1 (fontified t)) . -481) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#(" " 0 1 (fontified t)) . -482) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#(":" 0 1 (fontified t)) . -483) (undo-tree-id403 . -1) (undo-tree-id404 . -1) 484) nil (25842 19388 402260 79000) 0 nil])
([nil nil ((480 . 482) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -480) (480 . 481)) nil (25842 19388 402254 288000) 0 nil])
([nil nil ((apply yas--snippet-revive 472 483 #s(yas--snippet nil (#s(yas--field 1 480 482 nil nil nil t nil)) nil 2 nil #s(yas--field 1 480 482 nil nil nil t nil) nil nil))) nil (25842 19388 402253 26000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -477) (undo-tree-id395 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -478) (undo-tree-id396 . -1) 479) nil (25842 19388 402251 774000) 0 nil])
([nil nil ((477 . 478)) nil (25842 19388 402250 241000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -477) (undo-tree-id394 . -1) 478) nil (25842 19388 402249 509000) 0 nil])
([nil nil ((477 . 478)) nil (25842 19388 402247 676000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -476) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("f" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -477) (undo-tree-id392 . -1) (undo-tree-id393 . -1) 478) nil (25842 19388 402246 644000) 0 nil])
([nil nil ((476 . 477)) nil (25842 19388 402243 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 472 478 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (472 . 478) (#("Printf" 0 6 (fontified nil)) . 472) (472 . 478) (#("Print" 0 5 (fontified nil)) . 472) (472 . 477) (#("Printf" 0 6 (fontified nil)) . -472) (472 . 478) (#("Print" 0 5 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -472) (undo-tree-id388 . -5) (undo-tree-id389 . -5) 477) nil (25842 19388 402241 454000) 0 nil])
([nil nil ((481 . 483)) nil (25842 19388 402237 196000) 0 nil])
([nil nil ((480 . 482)) nil (25842 19388 402236 385000) 0 nil])
([nil nil ((485 . 488)) nil (25842 19388 402235 543000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -485) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("," 0 1 (fontified t)) . -486) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(" " 0 1 (fontified t)) . -487) (undo-tree-id386 . -1) (undo-tree-id387 . -1) 488) nil (25842 19388 402233 820000) 0 nil])
([nil nil ((485 . 489)) nil (25842 19388 402227 458000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -488) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 489) nil (25842 19388 402226 466000) 0 nil])
([nil nil ((488 . 490)) nil (25842 19388 402224 232000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -489) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 490) nil (25842 19388 402223 50000) 0 nil])
([nil nil ((489 . 490)) nil (25842 19388 402221 126000) 0 nil])
([nil nil ((490 . 492)) nil (25842 19388 402220 14000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -489) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -490) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -491) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 492) nil (25842 19388 402218 311000) 0 nil])
([nil nil ((489 . 501)) nil (25842 19388 402213 332000) 0 nil])
([nil nil ((482 . 485)) nil (25842 19388 402212 440000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -482) (undo-tree-id367 . -1) (#(":" 0 1 (fontified t face tree-sitter-hl-face:string)) . -483) (undo-tree-id368 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -484) (undo-tree-id369 . -1) 485) nil (25842 19388 402210 907000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -484) (484 . 485) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -484) (482 . 485)) nil (25842 19388 402196 300000) 0 nil])
([nil nil ((484 . 486)) nil (25842 19388 402194 627000) 0 nil])
([nil nil ((484 . 486)) nil (25842 19388 402189 918000) 0 nil])
([nil nil ((436 . 439) (t 25842 19388 508519 108000)) nil (25842 19443 768094 386000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -442) (442 . 443) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -442) (442 . 443) (439 . 443)) nil (25842 19443 768093 164000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -436) (undo-tree-id521 . -1) (#("	" 0 1 (fontified t)) . -437) (undo-tree-id522 . -1) (#("	" 0 1 (fontified t)) . -438) (undo-tree-id523 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -439) (undo-tree-id524 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -440) (undo-tree-id525 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -441) (undo-tree-id526 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -442) (undo-tree-id527 . -1) (undo-tree-id528 . 1) (undo-tree-id529 . -1) 443) nil (25842 19443 768090 449000) 0 nil])
([nil nil ((436 . 439)) nil (25842 19443 768082 554000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -442) (442 . 443) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -442) (442 . 443) (439 . 443)) nil (25842 19443 768081 61000) 0 nil])
([nil nil ((449 . 451) (#("'" 0 1 (fontified nil)) . -449) (442 . 450)) nil (25842 19443 768079 198000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -449) (undo-tree-id520 . -1) (#("'" 0 1 (fontified t)) . 450)) nil (25842 19443 768077 434000) 0 nil])
([nil nil ((449 . 451)) nil (25842 19443 768075 681000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t face tree-sitter-hl-face:number)) . -449) (undo-tree-id518 . -1) (#("7" 0 1 (fontified t face tree-sitter-hl-face:number)) . -450) (undo-tree-id519 . -1) 451) nil (25842 19443 768074 188000) 0 nil])
([nil nil ((449 . 452)) nil (25842 19443 768072 285000) 0 nil])
([nil nil ((452 . 455)) nil (25842 19443 768071 102000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -458) (458 . 459) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -458) (458 . 459) (456 . 459)) nil (25842 19443 768070 121000) 0 nil])
([nil nil ((459 . 462) (460 . 462) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 459) (459 . 462) (458 . 460)) nil (25842 19443 768068 718000) 0 nil])
([nil nil ((462 . 472)) nil (25842 19443 768068 97000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -470) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -471) (undo-tree-id516 . -1) (undo-tree-id517 . -1) 472) nil (25842 19443 768067 215000) 0 nil])
([nil nil ((469 . 477)) nil (25842 19443 768062 186000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -475) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -476) (undo-tree-id511 . -1) 477) nil (25842 19443 768060 933000) 0 nil])
([nil nil ((475 . 476)) nil (25842 19443 768056 615000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 480 501 nil nil nil t nil)) nil 4 nil #s(yas--field 1 480 501 nil nil nil t nil) nil nil)) (476 . 492) (#("New(${1:text string})" 0 21 (fontified nil)) . 476) (476 . 497) (#("New" 0 3 (fontified nil)) . -476) (476 . 479)) nil (25842 19443 768055 453000) 0 nil])
([nil nil ((#("text string" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 11 (fontified t face tree-sitter-hl-face:variable)) . 480)) nil (25842 19443 768053 339000) 0 nil])
([nil nil ((481 . 500) (480 . 482) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -480) (480 . 481)) nil (25842 19443 768052 277000) 0 nil])
([nil nil ((500 . 501)) nil (25842 19443 768050 644000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -500) (undo-tree-id508 . -1) 501) nil (25842 19443 768050 53000) 0 nil])
([nil nil ((500 . 501)) nil (25842 19443 768047 839000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -500) (undo-tree-id507 . -1) 501) nil (25842 19443 768046 456000) 0 nil])
([nil nil ((apply yas--snippet-revive 476 502 #s(yas--snippet nil (#s(yas--field 1 480 501 nil nil nil t nil)) nil 4 nil #s(yas--field 1 480 501 nil nil nil t nil) nil nil))) nil (25842 19443 768028 303000) 0 nil])
([nil nil ((429 . 431) (t 25842 19443 873847 532000)) nil (25842 19501 138756 233000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -430) (undo-tree-id544 . -1) (undo-tree-id545 . 1) (undo-tree-id546 . -1) 431) nil (25842 19501 138754 921000) 0 nil])
([nil nil ((430 . 433)) nil (25842 19501 138752 55000) 0 nil])
([nil nil ((433 . 434)) nil (25842 19501 138751 394000) 0 nil])
([nil nil ((439 . 440) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -439) (439 . 440)) nil (25842 19501 138750 242000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -433) (undo-tree-id543 . -1) 434) nil (25842 19501 138748 849000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -429) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -430) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -431) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -432) (undo-tree-id541 . -1) (undo-tree-id542 . -1) 433) nil (25842 19501 138746 284000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -434) (undo-tree-id532 . -1) (undo-tree-id533 . 1) (undo-tree-id534 . -1) 435) nil (25842 19501 138739 201000) 0 nil])
([nil nil ((434 . 435)) nil (25842 19501 138735 204000) 0 nil])
([nil nil ((#("ű" 0 1 (fontified t face tree-sitter-hl-face:type)) . -434) (undo-tree-id530 . -1) (undo-tree-id531 . -1) 435) nil (25842 19501 138733 501000) 0 nil])
([nil nil ((582 . 585)) nil (25842 19501 138720 66000) 0 nil])
([nil nil ((585 . 595)) nil (25842 19501 138713 433000) 0 nil])
([nil nil ((598 . 600) (t 25842 19501 244167 390000)) nil (25842 19506 520838 670000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -599) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) 600) nil (25842 19506 520833 941000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -428) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -429) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -430) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -431) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -432) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -433) (undo-tree-id562 . -1) 434 (t 25842 19506 530105 413000)) nil (25842 19594 799113 412000) 0 nil])
([nil nil ((428 . 434)) nil (25842 19594 799086 781000) 0 nil])
([nil nil ((390 . 392) (t 25842 19594 904118 105000)) nil (25842 19609 334347 874000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -388) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) 389) nil (25842 19609 334346 442000) 0 nil])
([nil nil ((388 . 389)) nil (25842 19609 334178 892000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -431) (undo-tree-id597 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -432) (undo-tree-id598 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -433) (undo-tree-id599 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -434) (undo-tree-id600 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -435) (undo-tree-id601 . -1) 436 (t 25842 19609 439562 913000)) nil (25842 19722 880558 651000) 0 nil])
([nil nil ((431 . 434)) nil (25842 19722 880554 975000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -430) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -431) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -432) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -433) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 434) nil (25842 19722 880553 612000) 0 nil])
([nil nil ((430 . 436)) nil (25842 19722 880548 282000) 0 nil])
([nil nil ((#("	
	const cliMap = map[string]cliCommand {
	\"help\": {
		name: \"help\",
		description: \"Displays a help message\",
		callback: commandHelp,
	},
	\"exit\": {
		name: \"exit\",
		description: \"Exit the Pokedex\",
		callback: commandExit,
	},
  }
	
	func (c cliCommand) commandHelp() error {
		if(cliMap == nil) {
			return errors.New(\"No commands to show\")
		}
		for k,v := range cliMap {
			fmt.Printf(\"%s: %s\\n\", k, v.description)
		}
		return nil
	}
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t) 9 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:operator) 17 18 (fontified t) 18 21 (fontified t face tree-sitter-hl-face:keyword) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 28 (fontified t face tree-sitter-hl-face:type) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 39 (fontified t face tree-sitter-hl-face:type) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t face tree-sitter-hl-face:string) 44 48 (fontified t face tree-sitter-hl-face:string) 48 49 (fontified t face tree-sitter-hl-face:string) 49 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 55 (fontified t) 55 59 (fontified t face tree-sitter-hl-face:variable) 59 61 (fontified t) 61 67 (fontified t face tree-sitter-hl-face:string) 67 71 (fontified t) 71 82 (fontified t face tree-sitter-hl-face:variable) 82 84 (fontified t) 84 109 (fontified t face tree-sitter-hl-face:string) 109 113 (fontified t) 113 121 (fontified t face tree-sitter-hl-face:variable) 121 123 (fontified t) 123 134 (fontified t face tree-sitter-hl-face:variable) 134 137 (fontified t) 137 138 (fontified t face (rainbow-delimiters-depth-3-face)) 138 141 (fontified t) 141 147 (fontified t face tree-sitter-hl-face:string) 147 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-3-face)) 150 153 (fontified t) 153 157 (fontified t face tree-sitter-hl-face:variable) 157 159 (fontified t) 159 165 (fontified t face tree-sitter-hl-face:string) 165 169 (fontified t) 169 180 (fontified t face tree-sitter-hl-face:variable) 180 182 (fontified t) 182 200 (fontified t face tree-sitter-hl-face:string) 200 204 (fontified t) 204 212 (fontified t face tree-sitter-hl-face:variable) 212 214 (fontified t) 214 225 (fontified t face tree-sitter-hl-face:variable) 225 227 (fontified t) 227 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-3-face)) 229 230 (fontified t) 230 231 (fontified t) 231 233 (fontified t) 233 234 (fontified t face (rainbow-delimiters-depth-2-face)) 234 235 (fontified t) 235 236 (fontified t) 236 237 (fontified t) 237 238 (rear-nonsticky t fontified t) 238 242 (fontified t face tree-sitter-hl-face:keyword) 242 243 (fontified t) 243 244 (fontified t face (rainbow-delimiters-depth-2-face)) 244 245 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 245 246 (fontified t) 246 256 (fontified t face tree-sitter-hl-face:type) 256 257 (fontified t face (rainbow-delimiters-depth-2-face)) 257 258 (fontified t) 258 269 (fontified t face tree-sitter-hl-face:type) 269 270 (fontified t face (rainbow-delimiters-depth-2-face)) 270 271 (fontified t face (rainbow-delimiters-depth-2-face)) 271 272 (fontified t) 272 277 (fontified t face tree-sitter-hl-face:type) 277 278 (fontified t) 278 279 (fontified t face (rainbow-delimiters-depth-2-face)) 279 280 (fontified t) 280 282 (fontified t) 282 284 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 284 285 (fontified t face (rainbow-delimiters-depth-3-face)) 285 291 (fontified t face tree-sitter-hl-face:variable) 291 292 (fontified t) 292 294 (fontified t face tree-sitter-hl-face:operator) 294 295 (fontified t) 295 298 (fontified t face tree-sitter-hl-face:constant\.builtin) 298 299 (fontified t face (rainbow-delimiters-depth-3-face)) 299 300 (fontified t) 300 301 (fontified t face (rainbow-delimiters-depth-3-face)) 301 302 (fontified t) 302 305 (fontified t) 305 311 (fontified t face tree-sitter-hl-face:variable) 311 312 (fontified t) 312 318 (fontified t face tree-sitter-hl-face:variable) 318 319 (fontified t) 319 322 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 322 323 (fontified t face (rainbow-delimiters-depth-4-face)) 323 344 (fontified t face tree-sitter-hl-face:string) 344 345 (fontified t face (rainbow-delimiters-depth-4-face)) 345 346 (fontified t) 346 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-3-face)) 349 350 (fontified t) 350 352 (fontified t) 352 355 (fontified t face tree-sitter-hl-face:keyword) 355 356 (fontified t) 356 357 (fontified t face tree-sitter-hl-face:variable) 357 358 (fontified t) 358 359 (fontified t face tree-sitter-hl-face:variable) 359 360 (fontified t) 360 362 (fontified t face tree-sitter-hl-face:operator) 362 363 (fontified t) 363 368 (fontified t face tree-sitter-hl-face:keyword) 368 369 (fontified t) 369 375 (fontified t face tree-sitter-hl-face:type) 375 376 (fontified t) 376 377 (fontified t face (rainbow-delimiters-depth-3-face)) 377 378 (fontified t) 378 381 (fontified t) 381 384 (fontified t face tree-sitter-hl-face:variable) 384 385 (fontified t) 385 391 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 391 392 (fontified t face (rainbow-delimiters-depth-4-face)) 392 399 (fontified t face tree-sitter-hl-face:string) 399 400 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 400 401 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 401 402 (fontified t face tree-sitter-hl-face:string) 402 404 (fontified t) 404 405 (fontified t face tree-sitter-hl-face:variable) 405 407 (fontified t) 407 408 (fontified t face tree-sitter-hl-face:variable) 408 409 (fontified t) 409 420 (fontified t face tree-sitter-hl-face:property) 420 421 (fontified t face (rainbow-delimiters-depth-4-face)) 421 422 (fontified t) 422 424 (fontified t) 424 425 (fontified t face (rainbow-delimiters-depth-3-face)) 425 426 (fontified t) 426 428 (fontified t) 428 434 (fontified t face tree-sitter-hl-face:keyword) 434 435 (fontified t) 435 438 (fontified t face tree-sitter-hl-face:constant\.builtin) 438 439 (fontified t) 439 440 (fontified t) 440 441 (fontified t face (rainbow-delimiters-depth-2-face)) 441 442 (fontified t)) . 159) (undo-tree-id574 . -440) (undo-tree-id575 . 1) (undo-tree-id576 . -440) (undo-tree-id577 . -1) (undo-tree-id578 . -441) (undo-tree-id579 . -323) (undo-tree-id580 . -271) (undo-tree-id581 . -237) (undo-tree-id582 . -2) (undo-tree-id583 . -1) (undo-tree-id584 . 167) (undo-tree-id585 . -234) (undo-tree-id586 . -441) (undo-tree-id587 . -1) (undo-tree-id588 . -440) 160) nil (25842 19722 880547 600000) 0 nil])
([nil nil ((143 . 145)) nil (25842 19722 880538 984000) 0 nil])
([nil nil ((nil rear-nonsticky nil 145 . 146) (#("
" 0 1 (fontified nil)) . -586) (144 . 587)) nil (25842 19722 880538 263000) 0 nil])
([nil nil ((#("	func (c cliCommand) commandHelp() error {
		if(cliMap == nil) {
			return errors.New(\"No commands to show\")
		}
		for k,v := range cliMap {
			fmt.Printf(\"%s: %s\\n\", k, v.description)
		}
		return nil
	}
" 0 1 (rear-nonsticky t fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 8 9 (fontified t) 9 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (fontified t) 21 32 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 32 33 (fontified t face (rainbow-delimiters-depth-1-face)) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 40 (fontified t face tree-sitter-hl-face:type) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-1-face)) 42 43 (fontified t) 43 45 (fontified t) 45 47 (fontified t face tree-sitter-hl-face:keyword) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 54 (fontified t face tree-sitter-hl-face:variable) 54 55 (fontified t) 55 57 (fontified t face tree-sitter-hl-face:operator) 57 58 (fontified t) 58 61 (fontified t face tree-sitter-hl-face:constant\.builtin) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-2-face)) 64 65 (fontified t) 65 68 (fontified t) 68 74 (fontified t face tree-sitter-hl-face:keyword) 74 75 (fontified t) 75 81 (fontified t face tree-sitter-hl-face:variable) 81 82 (fontified t) 82 85 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 85 86 (fontified t face (rainbow-delimiters-depth-3-face)) 86 107 (fontified t face tree-sitter-hl-face:string) 107 108 (fontified t face (rainbow-delimiters-depth-3-face)) 108 109 (fontified t) 109 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-2-face)) 112 113 (fontified t) 113 115 (fontified t) 115 118 (fontified t face tree-sitter-hl-face:keyword) 118 119 (fontified t) 119 120 (fontified t face tree-sitter-hl-face:variable) 120 121 (fontified t) 121 122 (fontified t face tree-sitter-hl-face:variable) 122 123 (fontified t) 123 125 (fontified t face tree-sitter-hl-face:operator) 125 126 (fontified t) 126 131 (fontified t face tree-sitter-hl-face:keyword) 131 132 (fontified t) 132 138 (fontified t face tree-sitter-hl-face:variable) 138 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-2-face)) 140 141 (fontified t) 141 144 (fontified t) 144 147 (fontified t face tree-sitter-hl-face:variable) 147 148 (fontified t) 148 154 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 154 155 (fontified t face (rainbow-delimiters-depth-3-face)) 155 162 (fontified t face tree-sitter-hl-face:string) 162 163 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9)) 163 164 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 164 165 (fontified t face tree-sitter-hl-face:string) 165 167 (fontified t) 167 168 (fontified t face tree-sitter-hl-face:variable) 168 170 (fontified t) 170 171 (fontified t face tree-sitter-hl-face:variable) 171 172 (fontified t) 172 183 (fontified t face tree-sitter-hl-face:property) 183 184 (fontified t face (rainbow-delimiters-depth-3-face)) 184 185 (fontified t) 185 187 (fontified t) 187 188 (fontified t face (rainbow-delimiters-depth-2-face)) 188 189 (fontified t) 189 191 (fontified t) 191 197 (fontified t face tree-sitter-hl-face:keyword) 197 198 (fontified t) 198 201 (fontified t face tree-sitter-hl-face:constant\.builtin) 201 202 (fontified t) 202 203 (fontified t) 203 204 (fontified t face (rainbow-delimiters-depth-1-face)) 204 205 (fontified t)) . 382) (undo-tree-id566 . -203) (undo-tree-id567 . 1) (undo-tree-id568 . -203) (undo-tree-id569 . -1) (undo-tree-id570 . -204) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -203) 383) nil (25842 19722 880536 119000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -349) (144 . 350)) nil (25842 19722 880513 305000) 0 nil])
([nil nil ((349 . 350) (#("	" 0 1 (fontified nil)) . -347) (349 . 350) (t 25842 19722 986559 798000)) nil (25842 20091 223999 358000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -152) (undo-tree-id633 . -1) (#(" " 0 1 (fontified t)) . -153) (undo-tree-id634 . -1) (#("c" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -154) (undo-tree-id635 . -1) (#("l" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -155) (undo-tree-id636 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -156) (undo-tree-id637 . -1) (#("C" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -157) (undo-tree-id638 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -158) (undo-tree-id639 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -159) (undo-tree-id640 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -160) (undo-tree-id641 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -161) (undo-tree-id642 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -162) (undo-tree-id643 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -163) (undo-tree-id644 . -1) 164) nil (25842 20091 223996 243000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -151) (undo-tree-id632 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 152)) nil (25842 20091 223990 592000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -149) (undo-tree-id630 . -1) (#(" " 0 1 (fontified t)) . -150) (undo-tree-id631 . -1) 151) nil (25842 20091 223988 688000) 0 nil])
([nil nil ((149 . 150)) nil (25842 20091 223987 266000) 0 nil])
([nil nil ((#("	func commandHelp() error {
		if(cliMap == nil) {
			return errors.New(\"No commands to show\")
		}
		for k,v := range cliMap {
			fmt.Printf(\"%s: %s\\n\", k, v.description)
		}
		return nil
}
" 0 1 (rear-nonsticky t fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 17 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t) 20 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 30 (fontified t) 30 32 (fontified t face tree-sitter-hl-face:keyword) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 39 (fontified t face tree-sitter-hl-face:variable) 39 40 (fontified t) 40 42 (fontified t face tree-sitter-hl-face:operator) 42 43 (fontified t) 43 46 (fontified t face tree-sitter-hl-face:constant\.builtin) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 53 (fontified t) 53 59 (fontified t face tree-sitter-hl-face:keyword) 59 60 (fontified t) 60 66 (fontified t face tree-sitter-hl-face:variable) 66 67 (fontified t) 67 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-3-face)) 71 92 (fontified t face tree-sitter-hl-face:string) 92 93 (fontified t face (rainbow-delimiters-depth-3-face)) 93 94 (fontified t) 94 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-2-face)) 97 98 (fontified t) 98 100 (fontified t) 100 103 (fontified t face tree-sitter-hl-face:keyword) 103 104 (fontified t) 104 105 (fontified t face tree-sitter-hl-face:variable) 105 106 (fontified t) 106 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:operator) 110 111 (fontified t) 111 116 (fontified t face tree-sitter-hl-face:keyword) 116 117 (fontified t) 117 123 (fontified t face tree-sitter-hl-face:variable) 123 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-2-face)) 125 126 (fontified t) 126 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:variable) 132 133 (fontified t) 133 139 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 139 140 (fontified t face (rainbow-delimiters-depth-3-face)) 140 147 (fontified t face tree-sitter-hl-face:string) 147 148 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 148 149 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 149 150 (fontified t face tree-sitter-hl-face:string) 150 152 (fontified t) 152 153 (fontified t face tree-sitter-hl-face:variable) 153 155 (fontified t) 155 156 (fontified t face tree-sitter-hl-face:variable) 156 157 (fontified t) 157 168 (fontified t face tree-sitter-hl-face:property) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 170 (fontified t) 170 172 (fontified t) 172 173 (fontified t face (rainbow-delimiters-depth-2-face)) 173 174 (fontified t) 174 176 (fontified t) 176 182 (fontified t face tree-sitter-hl-face:keyword) 182 183 (fontified t) 183 186 (fontified t face tree-sitter-hl-face:constant\.builtin) 186 187 (fontified t) 187 188 (fontified t face (rainbow-delimiters-depth-1-face)) 188 189 (fontified t)) . 145) (undo-tree-id624 . -187) (undo-tree-id625 . 1) (undo-tree-id626 . -187) (undo-tree-id627 . -188) (undo-tree-id628 . -33) (undo-tree-id629 . -187)) nil (25842 20091 223986 614000) 0 nil])
([nil nil ((380 . 381) (#("  " 0 2 (fontified nil)) . -378) (381 . 382)) nil (25842 20091 223983 468000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -570) (381 . 571)) nil (25842 20091 223982 887000) 0 nil])
([nil nil ((#("	func commandHelp() error {
		if(cliMap == nil) {
			return errors.New(\"No commands to show\")
		}
		for k,v := range cliMap {
			fmt.Printf(\"%s: %s\\n\", k, v.description)
		}
		return nil
}
" 0 1 (rear-nonsticky t fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 17 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t) 20 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 30 (fontified t) 30 32 (fontified t face tree-sitter-hl-face:keyword) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 39 (fontified t face tree-sitter-hl-face:variable) 39 40 (fontified t) 40 42 (fontified t face tree-sitter-hl-face:operator) 42 43 (fontified t) 43 46 (fontified t face tree-sitter-hl-face:constant\.builtin) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 53 (fontified t) 53 59 (fontified t face tree-sitter-hl-face:keyword) 59 60 (fontified t) 60 66 (fontified t face tree-sitter-hl-face:variable) 66 67 (fontified t) 67 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-3-face)) 71 92 (fontified t face tree-sitter-hl-face:string) 92 93 (fontified t face (rainbow-delimiters-depth-3-face)) 93 94 (fontified t) 94 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-2-face)) 97 98 (fontified t) 98 100 (fontified t) 100 103 (fontified t face tree-sitter-hl-face:keyword) 103 104 (fontified t) 104 105 (fontified t face tree-sitter-hl-face:variable) 105 106 (fontified t) 106 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:operator) 110 111 (fontified t) 111 116 (fontified t face tree-sitter-hl-face:keyword) 116 117 (fontified t) 117 123 (fontified t face tree-sitter-hl-face:variable) 123 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-2-face)) 125 126 (fontified t) 126 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:variable) 132 133 (fontified t) 133 139 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 139 140 (fontified t face (rainbow-delimiters-depth-3-face)) 140 147 (fontified t face tree-sitter-hl-face:string) 147 148 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 148 149 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 149 150 (fontified t face tree-sitter-hl-face:string) 150 152 (fontified t) 152 153 (fontified t face tree-sitter-hl-face:variable) 153 155 (fontified t) 155 156 (fontified t face tree-sitter-hl-face:variable) 156 157 (fontified t) 157 168 (fontified t face tree-sitter-hl-face:property) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 170 (fontified t) 170 172 (fontified t) 172 173 (fontified t face (rainbow-delimiters-depth-2-face)) 173 174 (fontified t) 174 176 (fontified t) 176 182 (fontified t face tree-sitter-hl-face:keyword) 182 183 (fontified t) 183 186 (fontified t face tree-sitter-hl-face:constant\.builtin) 186 187 (fontified t) 187 188 (fontified t face (rainbow-delimiters-depth-1-face)) 188 189 (fontified t)) . 382) (undo-tree-id616 . -188) (undo-tree-id617 . 1) (undo-tree-id618 . -1) (undo-tree-id619 . -188) (undo-tree-id620 . -188) (undo-tree-id621 . -188) (undo-tree-id622 . -1) (undo-tree-id623 . -188) 570) nil (25842 20091 223981 956000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -335) (146 . 336)) nil (25842 20091 223977 457000) 0 nil])
([nil nil ((165 . 169)) nil (25842 20091 223977 66000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -167) (undo-tree-id614 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -168) (undo-tree-id615 . -1) 169) nil (25842 20091 223976 485000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -169) (169 . 170) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -169) (169 . 170) (167 . 170)) nil (25842 20091 223974 542000) 0 nil])
([nil nil ((169 . 170)) nil (25842 20091 223973 910000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -169) (undo-tree-id613 . -1) 170) nil (25842 20091 223973 349000) 0 nil])
([nil nil ((#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -168) (undo-tree-id612 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 169)) nil (25842 20091 223972 27000) 0 nil])
([nil nil ((168 . 169)) nil (25842 20091 223971 145000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -168) (undo-tree-id611 . -1) 169) nil (25842 20091 223970 825000) 0 nil])
([nil nil ((168 . 169)) nil (25842 20091 223970 244000) 0 nil])
([nil nil ((#("Đ" 0 1 (fontified t face tree-sitter-hl-face:type)) . -168) (undo-tree-id610 . -1) 169) nil (25842 20091 223970 23000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -169) (169 . 170) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -169) (169 . 170) (168 . 170)) nil (25842 20091 223968 711000) 0 nil])
([nil nil ((169 . 175)) nil (25842 20091 223968 89000) 0 nil])
([nil nil ((176 . 178)) nil (25842 20091 223967 779000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -177) (undo-tree-id609 . -1) 178) nil (25842 20091 223967 288000) 0 nil])
([nil nil ((177 . 186)) nil (25842 20091 223966 577000) 0 nil])
([nil nil ((168 . 170)) nil (25842 20091 223966 256000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -287) (undo-tree-id603 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -288) (undo-tree-id604 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -289) (undo-tree-id605 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -290) (undo-tree-id606 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -291) (undo-tree-id607 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -292) (undo-tree-id608 . -1) 293) nil (25842 20091 223964 332000) 0 nil])
([nil nil ((287 . 288)) nil (25842 20091 223960 615000) 0 nil])
([nil nil (356) nil (25842 20091 223960 74000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -356) (undo-tree-id602 . 1) (357 . 359)) nil (25842 20091 223959 543000) 0 nil])
([nil nil ((398 . 399)) nil (25842 20091 223947 921000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -397) (399 . 400)) nil (25842 20091 223947 461000) 0 nil])
([nil nil ((411 . 412)) nil (25842 20091 223947 120000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -409) (412 . 413)) nil (25842 20091 223946 799000) 0 nil])
([nil nil ((427 . 428)) nil (25842 20091 223946 148000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -425) (428 . 429)) nil (25842 20091 223945 657000) 0 nil])
([nil nil ((469 . 470)) nil (25842 20091 223945 176000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -467) (470 . 471)) nil (25842 20091 223944 866000) 0 nil])
([nil nil ((493 . 494)) nil (25842 20091 223944 525000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -492) (494 . 495)) nil (25842 20091 223943 253000) 0 nil])
([nil nil ((498 . 499)) nil (25842 20091 223942 722000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -497) (499 . 500)) nil (25842 20091 223941 589000) 0 nil])
([nil nil ((511 . 512)) nil (25842 20091 223941 109000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -509) (512 . 513)) nil (25842 20091 223940 367000) 0 nil])
([nil nil ((527 . 528)) nil (25842 20091 223940 157000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -525) (528 . 529)) nil (25842 20091 223939 806000) 0 nil])
([nil nil ((562 . 563)) nil (25842 20091 223939 465000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -560) (563 . 564)) nil (25842 20091 223939 255000) 0 nil])
([nil nil ((586 . 587)) nil (25842 20091 223938 644000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -585) (587 . 588)) nil (25842 20091 223938 183000) 0 nil])
([nil nil ((590 . 591)) nil (25842 20091 223937 662000) 0 nil])
([nil nil ((591 . 592)) nil (25842 20091 223931 510000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -203) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -204) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -205) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -206) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -207) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -208) (undo-tree-id680 . -1) (undo-tree-id681 . -1) 209 (t 25842 20091 334984 603000)) nil (25842 20098 753787 132000) 0 nil])
([nil nil ((203 . 204)) nil (25842 20098 753746 695000) 0 nil])
([nil nil (351) nil (25842 20109 594570 334000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -351) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -352) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) 353 (t 25842 20098 768045 133000)) nil (25842 20109 594568 771000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -391) (undo-tree-id703 . -1) 392) nil (25842 20109 594560 515000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -390) (undo-tree-id702 . -1) 391) nil (25842 20109 594558 521000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -401) (undo-tree-id701 . -1) 402) nil (25842 20109 594556 768000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -400) (undo-tree-id700 . -1) 401) nil (25842 20109 594555 305000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -415) (undo-tree-id699 . -1) 416) nil (25842 20109 594553 402000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -414) (undo-tree-id698 . -1) 415) nil (25842 20109 594551 739000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -455) (undo-tree-id697 . -1) 456) nil (25842 20109 594550 827000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -454) (undo-tree-id696 . -1) 455) nil (25842 20109 594548 953000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -478) (undo-tree-id695 . -1) 479) nil (25842 20109 594547 180000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -477) (undo-tree-id694 . -1) 478) nil (25842 20109 594545 767000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -481) (undo-tree-id693 . -1) 482) nil (25842 20109 594544 375000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -480) (undo-tree-id692 . -1) 481) nil (25842 20109 594542 862000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -491) (undo-tree-id691 . -1) 492) nil (25842 20109 594340 79000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -490) (undo-tree-id690 . -1) 491) nil (25842 20109 594338 927000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -505) (undo-tree-id689 . -1) 506) nil (25842 20109 594337 735000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -504) (undo-tree-id688 . -1) 505) nil (25842 20109 594336 142000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -538) (undo-tree-id687 . -1) 539) nil (25842 20109 594335 130000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -537) (undo-tree-id686 . -1) 538) nil (25842 20109 594333 296000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -561) (undo-tree-id685 . -1) 562) nil (25842 20109 594331 964000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -560) (undo-tree-id684 . -1) 561) nil (25842 20109 594330 561000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -564) (undo-tree-id683 . -1) 565) nil (25842 20109 594329 98000) 0 nil])
([nil nil ((#("/" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -563) (undo-tree-id682 . -1) 564) nil (25842 20109 594323 708000) 0 nil])
([nil nil ((21 . 22) (#("fmt\"
	\"" 0 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:string)) . -25) (#("os\"
	\"" 0 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face tree-sitter-hl-face:string)) . -41) (undo-tree-id720 . -3) (55 . 61) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 55) (57 . 62) (58 . 59) (90 . 93) (91 . 95) (127 . 128) (128 . 130) (#("
" 0 1 (fontified t)) . 142) (#("

	" 0 1 (fontified t) 1 2 (fontified t) 2 3 (rear-nonsticky t fontified t)) . 145) (#("	" 0 1 (fontified t)) . 199) (202 . 203) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 202) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 211) (#("	" 0 1 (fontified t)) . 215) (#("	" 0 1 (fontified t)) . 260) (#("	" 0 1 (fontified t)) . 263) (271 . 272) (#("	" 0 1 (fontified t)) . 288) (#("	" 0 1 (fontified t)) . 330) (#("	" 0 1 (fontified t)) . 335) (#("	" 0 1 (rear-nonsticky t fontified t)) . 349) (#(" " 0 1 (fontified t)) . 387) (390 . 391) (400 . 402) (405 . 410) (406 . 408) (414 . 416) (454 . 456) (463 . 465) (464 . 465) (477 . 478) (480 . 481) (490 . 492) (495 . 497) (496 . 501) (504 . 506) (537 . 539) (546 . 548) (547 . 548) (560 . 561) (#("


	" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 564) (undo-tree-id721 . -1) (undo-tree-id722 . 3) (undo-tree-id723 . -3) (#("
" 0 1 (fontified t)) . 583) (#(";" 0 1 (fontified t)) . 696) (702 . 703) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 702) 390 (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 713) (803 . 804) (810 . 811) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 810) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 825) (841 . 842) (848 . 849) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 848) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 863) (897 . 898) (#("  " 0 2 (fontified t)) . 899) (#(";" 0 1 (fontified t)) . 918) (#("
" 0 1 (fontified t)) . 928) (t 25842 20109 648131 59000)) nil (25842 20454 144262 849000) 0 nil])
([nil nil ((#("	callback    func() error
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property) 4 5 (fontified t face tree-sitter-hl-face:property) 5 6 (fontified t face tree-sitter-hl-face:property) 6 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t face tree-sitter-hl-face:property) 8 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t) 10 11 (fontified t) 11 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:keyword) 14 15 (fontified t face tree-sitter-hl-face:keyword) 15 16 (fontified t face tree-sitter-hl-face:keyword) 16 17 (fontified t face tree-sitter-hl-face:keyword) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 21 (fontified t face tree-sitter-hl-face:type) 21 22 (fontified t face tree-sitter-hl-face:type) 22 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t face tree-sitter-hl-face:type) 24 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t)) . 124) (undo-tree-id891 . -25) (undo-tree-id892 . -25) (undo-tree-id893 . -25) (undo-tree-id894 . -25) (undo-tree-id895 . -26) (undo-tree-id896 . -24) (undo-tree-id897 . -1) 148) nil (25842 20484 826784 105000) 0 nil] [nil nil ((193 . 194) (t 25842 20123 918239 46000)) ((#("ó" 0 1 (fontified t face tree-sitter-hl-face:type)) . 193) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1)) (25842 20452 225714 352000) 0 nil])
([nil nil ((74 . 84)) nil (25842 20484 826762 324000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -173) (undo-tree-id739 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -174) (undo-tree-id741 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -175) (undo-tree-id743 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -176) (undo-tree-id745 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -177) (undo-tree-id747 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -178) (undo-tree-id749 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -179) (undo-tree-id751 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -180) (undo-tree-id753 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -181) (undo-tree-id755 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -182) (undo-tree-id757 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -183) (undo-tree-id759 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -184) (undo-tree-id761 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -185) (undo-tree-id763 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -186) (undo-tree-id765 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -187) (undo-tree-id767 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -188) (undo-tree-id769 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -189) (undo-tree-id771 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -190) (undo-tree-id773 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -191) (undo-tree-id775 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -192) (undo-tree-id777 . -1) (#("ó" 0 1 (fontified t face tree-sitter-hl-face:type)) . -193) (undo-tree-id779 . -1) 194) ((173 . 194)) (25842 20451 280355 656000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -74) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -75) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -76) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -77) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -78) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -79) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -80) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -81) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -82) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -83) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) 84 (t 25842 20484 842568 123000)) nil (25842 20505 277811 708000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -170) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -171) (undo-tree-id735 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -172) (undo-tree-id737 . -1) 173) ((170 . 173)) (25842 20450 912237 255000) 0 nil])
([nil nil ((125 . 127) (t 25842 20505 293580 952000)) nil (25842 20815 804376 861000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -260) (undo-tree-id732 . -1) 261) ((260 . 261)) (25842 20449 718844 550000) 0 nil])
([nil nil ((127 . 130)) nil (25842 20815 804376 269000) 0 nil])
([nil nil ((260 . 266)) ((#("cliMap" 0 6 (fontified t face tree-sitter-hl-face:variable)) . 260)) (25842 20449 687987 812000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -127) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -128) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -129) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) 130) nil (25842 20815 804375 598000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -184) (undo-tree-id724 . -1) (undo-tree-id726 . -1) (undo-tree-id728 . -1) (undo-tree-id730 . -1) 185) ((184 . 185)) (25842 20449 657508 934000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -133) (133 . 134) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -133) (133 . 134) (127 . 134)) nil (25842 20815 804370 298000) 0 nil])
([nil nil ((184 . 189)) ((#("clMap" 0 2 (fontified t face tree-sitter-hl-face:variable) 2 5 (fontified t face tree-sitter-hl-face:variable)) . 184) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2)) (25842 20449 627073 538000) 0 nil])
([nil nil ((133 . 136)) nil (25842 20815 804369 657000) 0 nil])
([nil nil ((186 . 187) (t 25842 20319 267249 532000)) ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 186)) (25842 20449 597943 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 133 143 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (133 . 143) (#("cliCommand" 0 10 (fontified nil)) . 133) (133 . 143) (#("cli" 0 3 (fontified nil)) . 133) (133 . 136) (#("cliCommand" 0 10 (fontified nil)) . -133) (133 . 143) (#("cli" 0 3 (fontified t face tree-sitter-hl-face:type)) . -133) (undo-tree-id1472 . -3) (undo-tree-id1473 . -3) 136) nil (25842 20815 804368 825000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -464) (undo-tree-id782 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id783 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -466) (undo-tree-id784 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -467) (undo-tree-id785 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -468) (undo-tree-id786 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id787 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -470) (undo-tree-id788 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -471) (undo-tree-id789 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -472) (undo-tree-id790 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -473) (undo-tree-id791 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -474) (undo-tree-id792 . -1) 475) ((464 . 475)) (25842 20449 567559 918000) 0 nil])
([nil nil ((133 . 135)) nil (25842 20815 804367 353000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -469) (469 . 470) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -469) (469 . 470) (464 . 470)) ((#("func()" 0 4 (fontified nil face tree-sitter-hl-face:keyword) 4 5 (fontified nil face (rainbow-delimiters-depth-3-face)) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face))) . 464) (undo-tree-id876 . -6) (undo-tree-id877 . -6) (undo-tree-id878 . -6) (undo-tree-id879 . -6) (undo-tree-id880 . -6) (undo-tree-id881 . -6) (undo-tree-id882 . -6) (undo-tree-id883 . -6) (undo-tree-id884 . -6) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 469) (469 . 470) (#(")" 0 1 (fontified nil)) . 469) (469 . 470)) (25842 20449 536136 303000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -152) (152 . 153) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -152) (152 . 153) (146 . 153)) nil (25842 20815 804366 972000) 0 nil])
([nil nil ((470 . 477)) ((#(" error " 0 1 (fontified t) 1 6 (fontified t face tree-sitter-hl-face:type) 6 7 (fontified t)) . 470) (undo-tree-id867 . -7) (undo-tree-id868 . -7) (undo-tree-id869 . -7) (undo-tree-id870 . -7) (undo-tree-id871 . -7) (undo-tree-id872 . -7) (undo-tree-id873 . -7) (undo-tree-id874 . -7) (undo-tree-id875 . -7)) (25842 20449 507242 225000) 0 nil])
([nil nil ((153 . 158)) nil (25842 20815 804366 501000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -478) (478 . 479) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -478) (478 . 479) (477 . 479)) ((#("{}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 477) (undo-tree-id857 . 1) (undo-tree-id858 . -1) (undo-tree-id859 . 1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 478) (478 . 479) (#("}" 0 1 (fontified nil)) . 478) (478 . 479)) (25842 20449 475192 373000) 0 nil])
([nil nil ((apply yas--snippet-revive 154 164 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (154 . 164) (#("cliCommand" 0 10 (fontified nil)) . 154) (154 . 164) (#("cliC" 0 4 (fontified nil)) . 154) (154 . 158) (#("cliCommand" 0 10 (fontified nil)) . -154) (154 . 164) (#("cliC" 0 4 (fontified t face tree-sitter-hl-face:type)) . -154) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) 158) nil (25842 20815 804365 229000) 0 nil])
([nil nil ((479 . 482) (480 . 482) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 479) (479 . 482) (478 . 480)) ((#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 478) (undo-tree-id840 . 1) (undo-tree-id841 . -1) (undo-tree-id842 . 1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 479) (479 . 482) (#("		" 0 2 (fontified t)) . 480) (#("			" 0 3 (fontified t)) . 479) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -3) (undo-tree-id856 . -3)) (25842 20449 455039 267000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -166) (166 . 167) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -166) (166 . 167) (164 . 167)) nil (25842 20815 804363 535000) 0 nil])
([nil nil ((nil rear-nonsticky nil 483 . 484) (#("
" 0 1 (fontified nil)) . -634) (482 . 635) 481) ((#("
	if cliMap == nil {
		return errors.New(\"No commands to show\")
	}
	for k, v := range cliMap {
		fmt.Printf(\"%s: %s\\n\", k, v.description)
	}
	return nil
" 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky nil) 2 4 (fontified nil face tree-sitter-hl-face:keyword) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 14 (fontified nil face tree-sitter-hl-face:operator) 14 15 (fontified nil) 15 18 (fontified nil face tree-sitter-hl-face:constant\.builtin) 18 19 (fontified nil) 19 20 (fontified nil face (rainbow-delimiters-depth-4-face)) 20 21 (fontified nil) 21 23 (fontified nil) 23 29 (fontified nil face tree-sitter-hl-face:keyword) 29 30 (fontified nil) 30 36 (fontified nil face tree-sitter-hl-face:variable) 36 37 (fontified nil) 37 40 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 40 41 (fontified nil face (rainbow-delimiters-depth-5-face)) 41 62 (fontified nil face tree-sitter-hl-face:string) 62 63 (fontified nil face (rainbow-delimiters-depth-5-face)) 63 64 (fontified nil) 64 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-4-face)) 66 67 (fontified t) 67 68 (fontified t) 68 71 (fontified t face tree-sitter-hl-face:keyword) 71 72 (fontified t) 72 73 (fontified t face tree-sitter-hl-face:variable) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t face tree-sitter-hl-face:variable) 76 77 (fontified t) 77 79 (fontified t face tree-sitter-hl-face:operator) 79 80 (fontified t) 80 85 (fontified t face tree-sitter-hl-face:keyword) 85 86 (fontified t) 86 92 (fontified t face tree-sitter-hl-face:variable) 92 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-4-face)) 94 95 (fontified t) 95 97 (fontified t) 97 100 (fontified t face tree-sitter-hl-face:variable) 100 101 (fontified t) 101 107 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 107 108 (fontified t face (rainbow-delimiters-depth-5-face)) 108 115 (fontified t face tree-sitter-hl-face:string) 115 116 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9)) 116 117 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 117 118 (fontified t face tree-sitter-hl-face:string) 118 120 (fontified t) 120 121 (fontified t face tree-sitter-hl-face:variable) 121 123 (fontified t) 123 124 (fontified t face tree-sitter-hl-face:variable) 124 125 (fontified t) 125 136 (fontified t face tree-sitter-hl-face:property) 136 137 (fontified t face (rainbow-delimiters-depth-5-face)) 137 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-4-face)) 140 141 (fontified t) 141 142 (fontified nil) 142 148 (fontified nil face tree-sitter-hl-face:keyword) 148 149 (fontified nil) 149 152 (fontified nil face tree-sitter-hl-face:constant\.builtin) 152 153 (fontified nil)) . 482) (undo-tree-id832 . 151) (undo-tree-id833 . -66) (undo-tree-id834 . 86) (undo-tree-id835 . -66) (undo-tree-id836 . -66) (undo-tree-id837 . -23) (undo-tree-id838 . -19) (undo-tree-id839 . -21) (634 . 635) (nil rear-nonsticky t 483 . 484)) (25842 20449 454047 491000) 0 nil])
([nil nil ((167 . 168) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 167) (167 . 168) (166 . 168)) nil (25842 20815 804362 413000) 0 nil])
([nil nil ((#("			
" 0 3 (fontified t) 3 4 (fontified t)) . 479) (undo-tree-id780 . -3) (undo-tree-id781 . -1) 480) ((479 . 483)) (25842 20449 453514 228000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -133) (undo-tree-id1458 . -1) (#(" " 0 1 (fontified t)) . -134) (undo-tree-id1459 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -135) (undo-tree-id1460 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -136) (undo-tree-id1461 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -137) (undo-tree-id1462 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -138) (undo-tree-id1463 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -139) (undo-tree-id1464 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -140) (undo-tree-id1465 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -141) (undo-tree-id1466 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -142) (undo-tree-id1467 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -143) (undo-tree-id1468 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -144) (undo-tree-id1469 . -1) 145) nil (25842 20815 804360 129000) 0 nil])
([nil nil (479) nil (25842 20449 453160 112000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -132) (undo-tree-id1457 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 133)) nil (25842 20815 804353 457000) 0 nil])
([nil nil ((480 . 484)) ((#("    " 0 4 (fontified t)) . 480)) (25842 20449 452631 67000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -131) (undo-tree-id1456 . -1) 132) nil (25842 20815 804352 595000) 0 nil])
([nil nil ((505 . 506)) ((#(" " 0 1 (fontified nil)) . 505) (undo-tree-id830 . -1) (undo-tree-id831 . -1)) (25842 20449 452051 256000) 0 nil])
([nil nil ((138 . 142)) nil (25842 20815 804351 854000) 0 nil])
([nil nil ((506 . 507)) ((#(" " 0 1 (fontified t)) . 506) (undo-tree-id828 . -1) (undo-tree-id829 . -1)) (25842 20449 261920 186000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -138) (undo-tree-id1452 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -139) (undo-tree-id1453 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -140) (undo-tree-id1454 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -141) (undo-tree-id1455 . -1) 142) nil (25842 20815 804350 731000) 0 nil])
([nil nil ((507 . 508)) ((#(" " 0 1 (fontified t)) . 507) (undo-tree-id826 . -1) (undo-tree-id827 . -1)) (25842 20449 231265 958000) 0 nil])
([nil nil ((137 . 144)) nil (25842 20815 804348 26000) 0 nil])
([nil nil ((508 . 509)) ((#(" " 0 1 (fontified t)) . 508)) (25842 20449 200240 583000) 0 nil])
([nil nil ((144 . 151)) nil (25842 20815 804347 716000) 0 nil])
([nil nil ((551 . 552)) ((#(" " 0 1 (fontified t)) . 551) (undo-tree-id824 . -1) (undo-tree-id825 . -1)) (25842 20449 170128 735000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -141) (undo-tree-id1451 . -1) 142) nil (25842 20815 804347 395000) 0 nil])
([nil nil ((552 . 553)) ((#(" " 0 1 (fontified t)) . 552) (undo-tree-id822 . -1) (undo-tree-id823 . -1)) (25842 20449 139525 954000) 0 nil])
([nil nil ((150 . 162)) nil (25842 20815 804346 834000) 0 nil])
([nil nil ((553 . 554)) ((#(" " 0 1 (fontified t)) . 553) (undo-tree-id820 . -1) (undo-tree-id821 . -1)) (25842 20449 109070 9000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -161) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) 162) nil (25842 20815 804346 313000) 0 nil])
([nil nil ((554 . 555)) ((#(" " 0 1 (fontified t)) . 554)) (25842 20449 78515 308000) 0 nil])
([nil nil ((161 . 169)) nil (25842 20815 804345 231000) 0 nil])
([nil nil ((558 . 559)) ((#(" " 0 1 (fontified t)) . 558) (undo-tree-id818 . -1) (undo-tree-id819 . -1)) (25842 20449 49006 184000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -160) (undo-tree-id1448 . -1) 161) nil (25842 20815 804344 570000) 0 nil])
([nil nil ((559 . 560)) ((#(" " 0 1 (fontified t)) . 559) (undo-tree-id816 . -1) (undo-tree-id817 . -1)) (25842 20448 548065 742000) 0 nil])
([nil nil ((160 . 161)) nil (25842 20815 804343 508000) 0 nil])
([nil nil ((560 . 561)) ((#(" " 0 1 (fontified t)) . 560) (undo-tree-id814 . -1) (undo-tree-id815 . -1)) (25842 20448 379937 127000) 0 nil])
([nil nil ((#("É" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -161) (undo-tree-id1447 . -1) 162) nil (25842 20815 804343 47000) 0 nil])
([nil nil ((561 . 562)) ((#(" " 0 1 (fontified t)) . 561)) (25842 20448 192325 923000) 0 nil])
([nil nil ((161 . 162)) nil (25842 20815 804342 225000) 0 nil])
([nil nil ((591 . 592)) ((#(" " 0 1 (fontified t)) . 591) (undo-tree-id812 . -1) (undo-tree-id813 . -1)) (25842 20447 996086 401000) 0 nil])
([nil nil ((187 . 190) (#(")" 0 1 (fontified nil)) . -186) (186 . 187) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -186) (186 . 187) (169 . 187)) nil (25842 20815 804341 514000) 0 nil])
([nil nil ((592 . 593)) ((#(" " 0 1 (fontified t)) . 592) (undo-tree-id810 . -1) (undo-tree-id811 . -1)) (25842 20447 775943 335000) 0 nil])
([nil nil ((190 . 193)) nil (25842 20815 804341 163000) 0 nil])
([nil nil ((593 . 594)) ((#(" " 0 1 (fontified t)) . 593) (undo-tree-id808 . -1) (undo-tree-id809 . -1)) (25842 20447 544137 522000) 0 nil])
([nil nil ((123 . 125)) nil (25842 20815 804340 222000) 0 nil])
([nil nil ((594 . 595)) ((#(" " 0 1 (fontified t)) . 594)) (25842 20447 331843 541000) 0 nil])
([nil nil ((125 . 133)) nil (25842 20815 804339 901000) 0 nil])
([nil nil ((637 . 638)) ((#(" " 0 1 (fontified t)) . 637) (undo-tree-id806 . -1) (undo-tree-id807 . -1)) (25842 20447 112476 964000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -132) (undo-tree-id1446 . -1) 133) nil (25842 20815 804339 540000) 0 nil])
([nil nil ((638 . 639)) ((#(" " 0 1 (fontified t)) . 638) (undo-tree-id804 . -1) (undo-tree-id805 . -1)) (25842 20446 903922 244000) 0 nil])
([nil nil ((133 . 137) (#("	" 0 1 (fontified nil)) . -124) (132 . 134)) nil (25842 20815 804338 729000) 0 nil])
([nil nil ((639 . 640)) ((#(" " 0 1 (fontified t)) . 639) (undo-tree-id802 . -1) (undo-tree-id803 . -1)) (25842 20446 703950 226000) 0 nil])
([nil nil ((124 . 125) (137 . 139)) nil (25842 20815 804338 338000) 0 nil])
([nil nil ((640 . 641)) ((#(" " 0 1 (fontified t)) . 640)) (25842 20446 480111 858000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -139) (139 . 140) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -139) (139 . 140)) nil (25842 20815 804337 637000) 0 nil])
([nil nil ((644 . 645)) ((#(" " 0 1 (fontified t)) . 644) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1)) (25842 20446 179893 860000) 0 nil])
([nil nil ((140 . 144)) nil (25842 20815 804337 346000) 0 nil])
([nil nil ((645 . 646)) ((#(" " 0 1 (fontified t)) . 645) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1)) (25842 20445 872018 721000) 0 nil])
([nil nil ((144 . 146)) nil (25842 20815 804337 186000) 0 nil])
([nil nil ((646 . 647)) ((#(" " 0 1 (fontified t)) . 646) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1)) (25842 20445 420190 97000) 0 nil])
([nil nil ((134 . 135)) nil (25842 20815 804336 825000) 0 nil])
([nil nil ((647 . 648)) ((#(" " 0 1 (fontified t)) . 647) (t 25842 20428 843505 285000)) (25842 20428 736275 679000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -133) (undo-tree-id1444 . -1) (#(" " 0 1 (fontified t)) . -134) (undo-tree-id1445 . -1) 135) nil (25842 20815 804336 425000) 0 nil])
nil
([nil nil ((133 . 134)) nil (25842 20815 804335 282000) 0 nil])
([nil nil ((218 . 220)) nil (25842 20815 804334 972000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -219) (undo-tree-id1441 . -1) (undo-tree-id1442 . 1) (undo-tree-id1443 . -1) 220) nil (25842 20815 804334 471000) 0 nil])
([nil nil ((219 . 227)) nil (25842 20815 804332 477000) 0 nil])
([nil nil ((237 . 238) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -237) (237 . 238)) nil (25842 20815 804331 986000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -250) (250 . 251) (242 . 251)) nil (25842 20815 804331 245000) 0 nil])
([nil nil ((251 . 253) (252 . 253) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 251) (251 . 253) (250 . 252)) nil (25842 20815 804330 604000) 0 nil])
([nil nil ((257 . 258) (251 . 252) (#("		" 0 2 (fontified nil)) . -251) (253 . 258)) nil (25842 20815 804329 942000) 0 nil])
([nil nil ((258 . 260) (#("\"" 0 1 (fontified nil)) . -258) (258 . 259)) nil (25842 20815 804329 321000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -258) (undo-tree-id1440 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 259)) nil (25842 20815 804328 740000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -256) (undo-tree-id1438 . -1) (#(" " 0 1 (fontified t)) . -257) (undo-tree-id1439 . -1) 258) nil (25842 20815 804327 217000) 0 nil])
([nil nil ((256 . 263)) nil (25842 20815 804326 346000) 0 nil])
([nil nil ((265 . 268) (251 . 253) (#("	" 0 1 (fontified nil)) . -251) (263 . 264)) nil (25842 20815 804325 835000) 0 nil])
([nil nil ((267 . 273)) nil (25842 20815 804325 254000) 0 nil])
([nil nil ((282 . 284) (281 . 283) (#("\"" 0 1 (fontified nil)) . -281) (280 . 282) (265 . 268) (#("		" 0 2 (fontified nil)) . -265) (273 . 279)) nil (25842 20815 804324 542000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -263) (undo-tree-id1437 . -1) 264) nil (25842 20815 804323 931000) 0 nil])
([nil nil ((283 . 292)) nil (25842 20815 804322 659000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -293) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) 294) nil (25842 20815 804322 98000) 0 nil])
([nil nil ((293 . 295) (264 . 266) (#("			" 0 3 (fontified nil)) . -264) (293 . 294)) nil (25842 20815 804319 733000) 0 nil])
([nil nil ((295 . 296)) nil (25842 20815 804319 122000) 0 nil])
([nil nil ((303 . 304) (293 . 294) (#("		" 0 2 (fontified nil)) . -293) (296 . 304)) nil (25842 20815 804318 591000) 0 nil])
([nil nil ((294 . 296)) nil (25842 20815 804317 439000) 0 nil])
([nil nil ((306 . 307)) nil (25842 20815 804316 688000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -306) (undo-tree-id1433 . -1) 307) nil (25842 20815 804316 137000) 0 nil])
([nil nil ((306 . 308) (#("\"" 0 1 (fontified nil)) . -306) (306 . 307)) nil (25842 20815 804314 864000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -306) (undo-tree-id1432 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 307)) nil (25842 20815 804313 612000) 0 nil])
([nil nil ((306 . 314)) nil (25842 20815 804312 760000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -279) (undo-tree-id1431 . -1) 280) nil (25842 20815 804311 648000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -289) (undo-tree-id1430 . -1) 290) nil (25842 20815 804310 436000) 0 nil])
([nil nil ((289 . 290)) nil (25842 20815 804309 123000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -290) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) 291) nil (25842 20815 804308 462000) 0 nil])
([nil nil ((150 . 151)) nil (25842 20815 804306 809000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -150) (undo-tree-id1427 . -1) 151) nil (25842 20815 804305 507000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -160) (undo-tree-id1422 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -161) (undo-tree-id1423 . -1) (#("m" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -162) (undo-tree-id1424 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -163) (undo-tree-id1425 . -1) (#(" " 0 1 (fontified t)) . -164) (undo-tree-id1426 . -1) 165) nil (25842 20815 804303 242000) 0 nil])
([nil nil ((160 . 165)) nil (25842 20815 804300 497000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -164) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -165) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -166) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -167) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -168) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -169) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -170) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("," 0 1 (fontified t)) . -171) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) 172) nil (25842 20815 804298 463000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -176) (undo-tree-id1383 . -1) 177) nil (25842 20815 804278 716000) 0 nil])
([nil nil ((164 . 165)) nil (25842 20815 804277 514000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -194) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) 195) nil (25842 20815 804273 727000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -233) (undo-tree-id1866 . -1) (#("e" 0 1 (fontified t)) . -234) (undo-tree-id1867 . -1) (#("t" 0 1 (fontified t)) . -235) (undo-tree-id1868 . -1) (#("u" 0 1 (fontified t)) . -236) (undo-tree-id1869 . -1) (#("r" 0 1 (fontified t)) . -237) (undo-tree-id1870 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -238) (undo-tree-id1871 . -1) (#(" " 0 1 (fontified t)) . -239) (undo-tree-id1872 . -1) 240 (t 25842 20815 912253 397000)) nil (25842 20888 365519 664000) 0 nil])
([nil nil ((233 . 235)) nil (25842 20888 365516 438000) 0 nil])
([nil nil ((235 . 240)) nil (25842 20888 365516 128000) 0 nil])
([nil nil ((306 . 308)) nil (25842 20888 365515 947000) 0 nil])
([nil nil ((308 . 318)) nil (25842 20888 365515 597000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -285) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -286) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -287) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -288) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -289) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -290) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -291) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -292) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (#(":" 0 1 (fontified t)) . -293) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#(" " 0 1 (fontified t)) . -294) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -295) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -296) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -297) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -298) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -299) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -300) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -301) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -302) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (#("
" 0 1 (fontified t)) . -303) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (#("	" 0 1 (fontified t)) . -304) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -305) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . 1) (undo-tree-id1865 . -1) 306) nil (25842 20888 365511 329000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -264) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -265) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -266) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -267) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#(":" 0 1 (fontified t)) . -268) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (#(" " 0 1 (fontified t)) . -269) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -270) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -271) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -272) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -273) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -274) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -275) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -276) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -277) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -278) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -279) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -280) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (#("
" 0 1 (fontified t)) . -281) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (#("	" 0 1 (fontified t)) . -282) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (#(" " 0 1 (fontified t)) . -283) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (#(" " 0 1 (fontified t)) . -284) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) 285) nil (25842 20888 365468 7000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -243) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -244) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -245) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -246) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -247) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#(":" 0 1 (fontified t)) . -248) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (#(" " 0 1 (fontified t)) . -249) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -250) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -251) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -252) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -253) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (#("
" 0 1 (fontified t)) . -254) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("	" 0 1 (fontified t)) . -255) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("	" 0 1 (fontified t)) . -256) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -257) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -259) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -260) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -261) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -262) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -263) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) 264) nil (25842 20888 365416 871000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -234) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -235) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (#(" " 0 1 (fontified t)) . -236) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (#(":" 0 1 (fontified t)) . -237) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -238) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#(" " 0 1 (fontified t)) . -239) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -240) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("
" 0 1 (fontified nil)) . -241) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (#("	" 0 1 (fontified nil)) . -242) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) 243) nil (25842 20888 365373 300000) 0 nil])
([nil nil ((236 . 241) (#("	" 0 1 (fontified nil)) . -232) (234 . 237)) nil (25842 20888 364999 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 238 248 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (238 . 248) (#("cliCommand" 0 10 (fontified nil)) . 238) (238 . 248) (#("cli" 0 3 (fontified nil)) . 238) (238 . 241) (#("cliCommand" 0 10 (fontified nil)) . -238) (238 . 248) (#("cli" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -238) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) 241) nil (25842 20888 364998 466000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -250) (250 . 251) (232 . 233) (248 . 250)) nil (25842 20888 364995 911000) 0 nil])
([nil nil ((251 . 253)) nil (25842 20888 364995 50000) 0 nil])
([nil nil ((253 . 257)) nil (25842 20888 364994 739000) 0 nil])
([nil nil ((apply yas--snippet-revive 257 261 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (257 . 261) (#("name" 0 4 (fontified nil)) . 257) (257 . 261) (#("name" 0 4 (fontified nil)) . -257) (257 . 261)) nil (25842 20888 364994 8000) 0 nil])
([nil nil ((261 . 265)) nil (25842 20888 364992 936000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -262) (undo-tree-id1517 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -263) (undo-tree-id1518 . -1) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id1519 . -1) 265) nil (25842 20888 364991 984000) 0 nil])
([nil nil ((262 . 268)) nil (25842 20888 364989 850000) 0 nil])
([nil nil ((apply yas--snippet-revive 264 268 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (264 . 268) (#("name" 0 4 (fontified nil)) . 264) (264 . 268) (#("name" 0 4 (fontified nil)) . 264) (264 . 268) (#("name" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -264) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) 268) nil (25842 20888 364988 978000) 0 nil])
([nil nil ((268 . 270)) nil (25842 20888 364987 355000) 0 nil])
([nil nil ((270 . 274)) nil (25842 20888 364987 15000) 0 nil])
([nil nil ((apply yas--snippet-revive 274 285 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (274 . 285) (#("description" 0 11 (fontified nil)) . 274) (274 . 285) (#("description" 0 11 (fontified nil)) . -274) (274 . 285)) nil (25842 20888 364986 273000) 0 nil])
([nil nil ((285 . 291)) nil (25842 20888 364985 622000) 0 nil])
([nil nil ((apply yas--snippet-revive 288 299 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (288 . 299) (#("description" 0 11 (fontified nil)) . 288) (288 . 299) (#("des" 0 3 (fontified nil)) . 288) (288 . 291) (#("description" 0 11 (fontified nil)) . -288) (288 . 299) (#("des" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -288) (undo-tree-id1513 . -3) (undo-tree-id1514 . -3) 291) nil (25842 20888 364984 580000) 0 nil])
([nil nil ((299 . 301)) nil (25842 20888 364983 127000) 0 nil])
([nil nil ((301 . 305)) nil (25842 20888 364982 767000) 0 nil])
([nil nil ((apply yas--snippet-revive 305 313 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (305 . 313) (#("callback" 0 8 (fontified nil)) . 305) (305 . 313) (#("callback" 0 8 (fontified nil)) . -305) (305 . 313)) nil (25842 20888 364982 236000) 0 nil])
([nil nil ((313 . 315)) nil (25842 20888 364981 655000) 0 nil])
([nil nil ((315 . 317)) nil (25842 20888 364981 154000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -315) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -316) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) 317) nil (25842 20888 364980 342000) 0 nil])
([nil nil ((315 . 324)) nil (25842 20888 364975 774000) 0 nil])
([nil nil ((apply yas--snippet-revive 316 324 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (316 . 324) (#("callback" 0 8 (fontified nil)) . 316) (316 . 324) (#("callback" 0 8 (fontified nil)) . 316) (316 . 324) (#("callback" 0 8 (fontified t face tree-sitter-hl-face:variable)) . -316) (undo-tree-id1480 . -8) (undo-tree-id1481 . -8) (undo-tree-id1482 . -1) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -3) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -6) (undo-tree-id1500 . -6) (undo-tree-id1501 . -7) (undo-tree-id1502 . -7) (undo-tree-id1503 . -8) (undo-tree-id1504 . -8) (undo-tree-id1505 . -8) 324) nil (25842 20888 364970 834000) 0 nil])
([nil nil ((#("	\"help\": {
		name:        \"help\",
		description: \"Displays a help message\",
		callback:    commandHelp,
	},
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:string fontified t) 7 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 13 (fontified t) 13 17 (face tree-sitter-hl-face:variable fontified t) 17 26 (fontified t) 26 32 (face tree-sitter-hl-face:string fontified t) 32 36 (fontified t) 36 47 (face tree-sitter-hl-face:variable fontified t) 47 49 (fontified t) 49 74 (face tree-sitter-hl-face:string fontified t) 74 78 (fontified t) 78 86 (face tree-sitter-hl-face:variable fontified t) 86 91 (fontified t) 91 102 (face tree-sitter-hl-face:variable fontified t) 102 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 108 (fontified t)) . 573) (undo-tree-id0 . -106) (undo-tree-id1 . -2) (undo-tree-id2 . -107) (undo-tree-id3 . -106) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -106) 575 (t 25842 20888 381068 240000)) nil (25843 4624 401484 227000) 0 nil])
([nil nil ((#("H" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -352) (undo-tree-id261 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -353) (undo-tree-id262 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -354) (undo-tree-id263 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -355) (undo-tree-id264 . -1) 356 (t 25843 4624 412673 669000)) nil (25843 5967 132649 753000) 0 nil])
([nil nil ((352 . 356)) nil (25843 5967 132647 168000) 0 nil])
([nil nil ((#("E" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -352) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("x" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -353) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -354) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -355) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 356) nil (25843 5967 132645 695000) 0 nil])
([nil nil ((352 . 356)) nil (25843 5967 132640 216000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -974) (undo-tree-id236 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -975) (undo-tree-id237 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -976) (undo-tree-id238 . -1) (#("." 0 1 (fontified t)) . -977) (undo-tree-id239 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -978) (undo-tree-id240 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -979) (undo-tree-id241 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -980) (undo-tree-id242 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -981) (undo-tree-id243 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -982) (undo-tree-id244 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -983) (undo-tree-id245 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -984) (undo-tree-id246 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -985) (undo-tree-id247 . -1) (#("\"" 0 1 (fontified t)) . -986) (undo-tree-id248 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -987) (undo-tree-id249 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -988) (undo-tree-id250 . -1) (undo-tree-id251 . 1) (undo-tree-id252 . -1) 989) nil (25843 5967 132636 760000) 0 nil])
([nil nil ((974 . 979)) nil (25843 5967 132626 191000) 0 nil])
([nil nil ((974 . 1015) (#("comma" 0 5 (fontified nil)) . 974) (974 . 979) (#("commandHelp" 0 11 (fontified nil)) . -974) (974 . 985) (#("comma" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -974) (undo-tree-id234 . -5) (undo-tree-id235 . -5) 979) nil (25843 5967 132625 109000) 0 nil])
([nil nil ((1014 . 1015)) nil (25843 5967 132623 386000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -994) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -995) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -996) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -997) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -998) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -999) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1000) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1001) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1002) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1003) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1004) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1005) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1006) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1007) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1008) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1009) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1010) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1011) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1012) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1013) (undo-tree-id230 . -1) (undo-tree-id231 . 1) (undo-tree-id232 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1014) (undo-tree-id233 . -1) 1015) nil (25843 5967 132619 489000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -986) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -987) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . 1) (undo-tree-id179 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -988) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#(":" 0 1 (fontified t)) . -989) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -990) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -991) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -992) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -993) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 994) nil (25843 5967 132595 47000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -985) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 986) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . 1) (undo-tree-id172 . 1)) nil (25843 5967 132586 922000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -980) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -981) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified nil)) . -982) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified nil)) . -983) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified nil)) . -984) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 985) nil (25843 5967 132582 334000) 0 nil])
([nil nil ((980 . 982)) nil (25843 5967 132562 9000) 0 nil])
([nil nil ((#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -980) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -981) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 982) nil (25843 5967 132561 287000) 0 nil])
([nil nil ((980 . 981)) nil (25843 5967 132558 663000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 986 992 nil nil nil t nil)) nil 0 nil #s(yas--field 1 986 992 nil nil nil t nil) nil nil)) (974 . 1010) (#("commandHelp(${1:m map[string]cliCommand})" 0 41 (fontified nil)) . 974) (974 . 1015) (#("command" 0 7 (fontified nil)) . 974) (974 . 981) (#("commandHelp" 0 11 (fontified nil)) . -974) (974 . 985) (#("command" 0 7 (face tree-sitter-hl-face:variable fontified t)) . -974) (undo-tree-id124 . -6) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id127 . -6) 981) nil (25843 5967 132557 190000) 0 nil])
([nil nil ((987 . 992) (#("m map[string]cliCommand" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:keyword fontified nil) 5 6 (face (rainbow-delimiters-depth-5-face) fontified nil) 6 12 (face tree-sitter-hl-face:type fontified nil) 12 13 (face (rainbow-delimiters-depth-5-face) fontified nil) 13 23 (face tree-sitter-hl-face:type fontified nil)) . 987) (986 . 987)) nil (25843 5967 132554 495000) 0 nil])
([nil nil ((apply yas--snippet-revive 986 992 #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 986 992 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 986 992 nil nil nil t nil) nil)) (986 . 992) (#("cliMap" 0 6 (fontified nil)) . 986) (986 . 992) (#("cliMap" 0 6 (fontified nil)) . 986) (986 . 992) (#("cliMap" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -986) (undo-tree-id122 . -6) (undo-tree-id123 . -6) 992) nil (25843 5967 132553 203000) 0 nil])
([nil nil ((apply yas--snippet-revive 974 993 #s(yas--snippet nil (#s(yas--field 1 986 992 nil nil nil t nil)) nil 0 nil #s(yas--field 1 986 992 nil nil nil t nil) nil nil))) nil (25843 5967 132550 408000) 0 nil])
([nil nil ((533 . 535)) nil (25843 5967 132549 707000) 0 nil])
([nil nil ((548 . 557) (#(")" 0 1 (fontified nil)) . -547) (547 . 548) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -547) (547 . 548) (535 . 548)) nil (25843 5967 132548 335000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -556) (556 . 557) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -556) (556 . 557)) nil (25843 5967 132546 361000) 0 nil])
([nil nil ((557 . 558)) nil (25843 5967 132545 159000) 0 nil])
([nil nil ((557 . 558) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 557) (557 . 558) (556 . 558)) nil (25843 5967 132544 187000) 0 nil])
([nil nil ((558 . 563)) nil (25843 5967 132542 895000) 0 nil])
([nil nil ((535 . 540)) nil (25843 5967 132542 114000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -549) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -550) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -551) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -552) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -553) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -554) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -555) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -556) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -557) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -558) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#(" " 0 1 (fontified nil)) . -559) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -560) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("
" 0 1 (fontified t)) . -561) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("	" 0 1 (fontified t)) . -562) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -563) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -564) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -565) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -566) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("k" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -567) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("
" 0 1 (fontified t)) . -568) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -569) (undo-tree-id118 . -1) (undo-tree-id119 . 1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 570) nil (25843 5967 132538 567000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -533) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("
" 0 1 (fontified t)) . -534) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -535) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -536) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -537) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -538) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t)) . -539) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -540) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -541) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -542) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -543) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -544) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -545) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -546) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -547) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -548) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 549) nil (25843 5967 132456 303000) 0 nil])
([nil nil ((534 . 536)) nil (25843 5967 132346 811000) 0 nil])
([nil nil ((554 . 557) (#(")" 0 1 (fontified nil)) . -553) (553 . 554) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -553) (553 . 554) (536 . 554)) nil (25843 5967 132345 919000) 0 nil])
([nil nil ((557 . 561)) nil (25843 5967 132345 168000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -562) (562 . 563) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -562) (562 . 563) (561 . 563)) nil (25843 5967 132344 26000) 0 nil])
([nil nil ((563 . 564) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 563) (563 . 564) (562 . 564)) nil (25843 5967 132341 572000) 0 nil])
([nil nil ((564 . 574)) nil (25843 5967 132334 780000) 0 nil])
([nil nil ((#("
func init(name, description string, callback func() error) (command cliCommand) {
	res:= cliCommand{}
	res.name = name
	res.description = description
	res.callback = callback
	return res
}
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 10 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 15 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 15 17 (fontified t) 17 28 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 28 29 (fontified t) 29 35 (face tree-sitter-hl-face:type fontified t) 35 37 (fontified t) 37 45 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 45 46 (fontified t) 46 50 (face tree-sitter-hl-face:keyword fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 58 (face tree-sitter-hl-face:type fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 68 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 68 69 (fontified t) 69 79 (face tree-sitter-hl-face:type fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 84 (fontified t) 84 87 (face tree-sitter-hl-face:variable fontified t) 87 89 (face tree-sitter-hl-face:operator fontified t) 89 90 (fontified t) 90 100 (face tree-sitter-hl-face:type fontified t) 100 101 (face (rainbow-delimiters-depth-2-face) fontified t) 101 102 (face (rainbow-delimiters-depth-2-face) fontified t) 102 104 (fontified t) 104 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (fontified t) 108 112 (face tree-sitter-hl-face:property fontified t) 112 113 (fontified t) 113 114 (face tree-sitter-hl-face:operator fontified t) 114 115 (fontified t) 115 119 (face tree-sitter-hl-face:variable fontified t) 119 121 (fontified t) 121 124 (face tree-sitter-hl-face:variable fontified t) 124 125 (fontified t) 125 136 (face tree-sitter-hl-face:property fontified t) 136 137 (fontified t) 137 138 (face tree-sitter-hl-face:operator fontified t) 138 139 (fontified t) 139 150 (face tree-sitter-hl-face:variable fontified t) 150 152 (fontified t) 152 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 164 (face tree-sitter-hl-face:property fontified t) 164 165 (fontified t) 165 166 (face tree-sitter-hl-face:operator fontified t) 166 167 (fontified t) 167 175 (face tree-sitter-hl-face:variable fontified t) 175 177 (fontified t) 177 183 (face tree-sitter-hl-face:keyword fontified t) 183 184 (fontified t) 184 187 (face tree-sitter-hl-face:variable fontified t) 187 188 (fontified t) 188 189 (face (rainbow-delimiters-depth-1-face) fontified t) 189 190 (fontified t)) . 149) (undo-tree-id430 . -188) (undo-tree-id431 . -83) (undo-tree-id432 . -189) (undo-tree-id433 . -188) (undo-tree-id434 . -188) (t 25843 5967 148785 771000)) nil (25843 6858 203523 113000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id424 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -389) (undo-tree-id425 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id426 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id427 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id428 . -1) (#(" " 0 1 (fontified t)) . -393) (undo-tree-id429 . -1) 394) nil (25843 6858 203519 546000) 0 nil])
([nil nil ((148 . 150)) nil (25843 6858 203516 390000) 0 nil])
([nil nil ((150 . 151)) nil (25843 6858 203515 438000) 0 nil])
([nil nil ((151 . 163)) nil (25843 6858 203514 416000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -160) (undo-tree-id421 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -161) (undo-tree-id422 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -162) (undo-tree-id423 . -1) 163) nil (25843 6858 203513 3000) 0 nil])
([nil nil ((160 . 163)) nil (25843 6858 203510 238000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -164) (164 . 165) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -164) (164 . 165) (163 . 165)) nil (25843 6858 203509 316000) 0 nil])
([nil nil ((164 . 170)) nil (25843 6858 203508 504000) 0 nil])
([nil nil ((171 . 181)) nil (25843 6858 203507 903000) 0 nil])
([nil nil ((#("cliMap := map[string]cliCommand

func commandHelp(m map[string]cliCommand) error {
	if m == nil {
		return errors.New(\"No commands to show\")
	}
	for k, v := range m {
		fmt.Printf(\"%s: %s\\n\", k, v.description)
	}
	return nil
}


func commandExit() error {
	return nil
}

cliMap = map[string]cliCommand{
	\"exit\": {
		name:        \"exit\",
		description: \"Exit the Pokedex\",
		callback:    commandExit,
	},
}
" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 9 (face tree-sitter-hl-face:operator fontified t) 9 10 (fontified t) 10 13 (face tree-sitter-hl-face:keyword fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (face tree-sitter-hl-face:type fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 31 (face tree-sitter-hl-face:type fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 37 (face tree-sitter-hl-face:keyword fontified t) 37 38 (fontified t) 38 49 (face tree-sitter-hl-face:variable fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (face tree-sitter-hl-face:variable fontified t) 51 52 (fontified t) 52 55 (face tree-sitter-hl-face:keyword fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 62 (face tree-sitter-hl-face:type fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 73 (face tree-sitter-hl-face:type fontified t) 73 74 (face (rainbow-delimiters-depth-1-face) fontified t) 74 75 (fontified t) 75 80 (face tree-sitter-hl-face:type fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 86 (face tree-sitter-hl-face:variable fontified t) 86 87 (fontified t) 87 88 (face tree-sitter-hl-face:variable fontified t) 88 89 (fontified t) 89 91 (face tree-sitter-hl-face:operator fontified t) 91 92 (fontified t) 92 95 (face tree-sitter-hl-face:constant\.builtin fontified t) 95 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 100 (fontified t) 100 106 (face tree-sitter-hl-face:variable fontified t) 106 107 (fontified t) 107 113 (face tree-sitter-hl-face:variable fontified t) 113 114 (fontified t) 114 117 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 117 118 (face (rainbow-delimiters-depth-3-face) fontified t) 118 119 (face tree-sitter-hl-face:string fontified t) 119 121 (face tree-sitter-hl-face:string fontified t) 121 122 (face tree-sitter-hl-face:string fontified t) 122 130 (face tree-sitter-hl-face:string fontified t) 130 131 (face tree-sitter-hl-face:string fontified t) 131 133 (face tree-sitter-hl-face:string fontified t) 133 134 (face tree-sitter-hl-face:string fontified t) 134 138 (face tree-sitter-hl-face:string fontified t) 138 139 (face tree-sitter-hl-face:string fontified t) 139 140 (face (rainbow-delimiters-depth-3-face) fontified t) 140 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-2-face) fontified t) 143 145 (fontified t) 145 148 (face tree-sitter-hl-face:keyword fontified t) 148 149 (fontified t) 149 150 (face tree-sitter-hl-face:variable fontified t) 150 152 (fontified t) 152 153 (face tree-sitter-hl-face:variable fontified t) 153 154 (fontified t) 154 156 (face tree-sitter-hl-face:operator fontified t) 156 157 (fontified t) 157 162 (face tree-sitter-hl-face:keyword fontified t) 162 163 (fontified t) 163 164 (face tree-sitter-hl-face:type fontified t) 164 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-2-face) fontified t) 166 169 (fontified t) 169 172 (face tree-sitter-hl-face:variable fontified t) 172 173 (fontified t) 173 179 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 179 180 (face (rainbow-delimiters-depth-3-face) fontified t) 180 181 (face tree-sitter-hl-face:string fontified t) 181 182 (face tree-sitter-hl-face:string fontified t) 182 183 (face tree-sitter-hl-face:string fontified t) 183 185 (face tree-sitter-hl-face:string fontified t) 185 186 (face tree-sitter-hl-face:string fontified t) 186 187 (face tree-sitter-hl-face:string fontified t) 187 188 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 188 189 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 189 190 (face tree-sitter-hl-face:string fontified t) 190 192 (fontified t) 192 193 (face tree-sitter-hl-face:variable fontified t) 193 195 (fontified t) 195 196 (face tree-sitter-hl-face:variable fontified t) 196 197 (fontified t) 197 208 (face tree-sitter-hl-face:property fontified t) 208 209 (face (rainbow-delimiters-depth-3-face) fontified t) 209 211 (fontified t) 211 212 (face (rainbow-delimiters-depth-2-face) fontified t) 212 214 (fontified t) 214 220 (face tree-sitter-hl-face:keyword fontified t) 220 221 (fontified t) 221 224 (face tree-sitter-hl-face:constant\.builtin fontified t) 224 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 227 (fontified t) 227 228 (fontified t) 228 229 (fontified t) 229 233 (face tree-sitter-hl-face:keyword fontified t) 233 234 (fontified t) 234 245 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 245 246 (face (rainbow-delimiters-depth-1-face) fontified t) 246 247 (face (rainbow-delimiters-depth-1-face) fontified t) 247 248 (fontified t) 248 253 (face tree-sitter-hl-face:type fontified t) 253 254 (fontified t) 254 255 (face (rainbow-delimiters-depth-1-face) fontified t) 255 256 (fontified t) 256 257 (fontified t) 257 263 (face tree-sitter-hl-face:variable fontified t) 263 264 (fontified t) 264 267 (face tree-sitter-hl-face:constant\.builtin fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-1-face) fontified t) 269 270 (fontified t) 270 271 (fontified t) 271 277 (face tree-sitter-hl-face:variable fontified t) 277 278 (fontified t) 278 279 (face tree-sitter-hl-face:operator fontified t) 279 280 (fontified t) 280 283 (face tree-sitter-hl-face:keyword fontified t) 283 284 (face (rainbow-delimiters-depth-1-face) fontified t) 284 290 (face tree-sitter-hl-face:type fontified t) 290 291 (face (rainbow-delimiters-depth-1-face) fontified t) 291 301 (face tree-sitter-hl-face:type fontified t) 301 302 (face (rainbow-delimiters-depth-1-face) fontified t) 302 303 (fontified t) 303 304 (fontified t) 304 305 (face tree-sitter-hl-face:string fontified t) 305 309 (face tree-sitter-hl-face:string fontified t) 309 310 (face tree-sitter-hl-face:string fontified t) 310 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-2-face) fontified t) 313 314 (fontified t) 314 316 (fontified t) 316 320 (face tree-sitter-hl-face:variable fontified t) 320 329 (fontified t) 329 330 (face tree-sitter-hl-face:string fontified t) 330 334 (face tree-sitter-hl-face:string fontified t) 334 335 (face tree-sitter-hl-face:string fontified t) 335 339 (fontified t) 339 350 (face tree-sitter-hl-face:variable fontified t) 350 352 (fontified t) 352 370 (face tree-sitter-hl-face:string fontified t) 370 374 (fontified t) 374 382 (face tree-sitter-hl-face:variable fontified t) 382 387 (fontified t) 387 398 (face tree-sitter-hl-face:variable fontified t) 398 401 (fontified t) 401 402 (face (rainbow-delimiters-depth-2-face) fontified t) 402 404 (fontified t) 404 405 (face (rainbow-delimiters-depth-1-face) fontified t) 405 406 (fontified t)) . 150) (undo-tree-id405 . -404) (undo-tree-id406 . -32) (undo-tree-id407 . -96) (undo-tree-id408 . -97) (undo-tree-id409 . -96) (undo-tree-id410 . -405) (undo-tree-id411 . -404) (undo-tree-id412 . -226) (undo-tree-id413 . -224) (undo-tree-id414 . -45) (undo-tree-id415 . -303) (undo-tree-id416 . -226) (undo-tree-id417 . -226) (undo-tree-id418 . 1) (undo-tree-id419 . -268) (undo-tree-id420 . -404)) nil (25843 6858 203507 72000) 0 nil])
([nil nil ((166 . 167) (#("	" 0 1 (fontified nil)) . 165) (undo-tree-id404 . -1) (164 . 167)) nil (25843 6858 203499 968000) 0 nil])
([nil nil ((166 . 167) (#("	" 0 1 (fontified nil)) . 165) (165 . 166) (165 . 166)) nil (25843 6858 203498 74000) 0 nil])
([nil nil ((nil rear-nonsticky nil 167 . 168) (#("
" 0 1 (fontified nil)) . -573) (167 . 574) 166) nil (25843 6858 203496 711000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -175) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -176) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#(" " 0 1 (fontified t)) . -177) (undo-tree-id403 . -1) 178) nil (25843 6858 203495 38000) 0 nil])
([nil nil ((177 . 178) (168 . 169) (174 . 176)) nil (25843 6858 203487 703000) 0 nil])
([nil nil ((179 . 183)) nil (25843 6858 203486 912000) 0 nil])
([nil nil ((183 . 185)) nil (25843 6858 203486 230000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -184) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . 1) (undo-tree-id398 . -1) 185) nil (25843 6858 203485 218000) 0 nil])
([nil nil ((205 . 206) (#(")" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -205) (205 . 206)) nil (25843 6858 203482 934000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -168) (undo-tree-id394 . -1) 169) nil (25843 6858 203482 142000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -226) (undo-tree-id373 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -227) (undo-tree-id374 . -1) (#("p" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -228) (undo-tree-id375 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -229) (undo-tree-id376 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -230) (undo-tree-id377 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -231) (undo-tree-id378 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -232) (undo-tree-id379 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -233) (undo-tree-id380 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -234) (undo-tree-id381 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -235) (undo-tree-id382 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -236) (undo-tree-id383 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -237) (undo-tree-id384 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -238) (undo-tree-id385 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -239) (undo-tree-id386 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -240) (undo-tree-id387 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -241) (undo-tree-id388 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -242) (undo-tree-id389 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -243) (undo-tree-id390 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -244) (undo-tree-id391 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -245) (undo-tree-id392 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -246) (undo-tree-id393 . -1) 247) nil (25843 6858 203478 545000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -224) (undo-tree-id371 . -1) (#(" " 0 1 (fontified t)) . -225) (undo-tree-id372 . -1) 226) nil (25843 6858 203466 632000) 0 nil])
([nil nil ((#("cliMap := make(map[string]cliCommand)
" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 9 (face tree-sitter-hl-face:operator fontified t) 9 10 (fontified t) 10 14 (face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 18 (face tree-sitter-hl-face:keyword fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 25 (face tree-sitter-hl-face:type fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 36 (face tree-sitter-hl-face:type fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t)) . 168) (undo-tree-id364 . -10) (undo-tree-id365 . -37) (undo-tree-id366 . 30) (undo-tree-id367 . -7) (undo-tree-id368 . -6) (undo-tree-id369 . 23) (undo-tree-id370 . -15) 175) nil (25843 6858 203271 565000) 0 nil])
([nil nil ((nil rear-nonsticky nil 149 . 150) (#("
" 0 1 (fontified nil)) . -187) (149 . 188)) nil (25843 6858 203268 108000) 0 nil])
([nil nil ((#("func commandHelp() error {
	if m == nil {
		return errors.New(\"No commands to show\")
	}
	for k, v := range m {
		fmt.Printf(\"%s: %s\\n\", k, v.description)
	}
	return nil
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 16 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t) 19 24 (face tree-sitter-hl-face:variable fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 30 (face tree-sitter-hl-face:variable fontified t) 30 31 (fontified t) 31 32 (face tree-sitter-hl-face:variable fontified t) 32 33 (fontified t) 33 35 (face tree-sitter-hl-face:operator fontified t) 35 36 (fontified t) 36 39 (face tree-sitter-hl-face:constant\.builtin fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 44 (fontified t) 44 50 (face tree-sitter-hl-face:keyword fontified t) 50 51 (fontified t) 51 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 61 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 61 62 (face (rainbow-delimiters-depth-4-face) fontified t) 62 63 (face tree-sitter-hl-face:string fontified t) 63 65 (face tree-sitter-hl-face:string fontified t) 65 66 (face tree-sitter-hl-face:string fontified t) 66 74 (face tree-sitter-hl-face:string fontified t) 74 75 (face tree-sitter-hl-face:string fontified t) 75 77 (face tree-sitter-hl-face:string fontified t) 77 78 (face tree-sitter-hl-face:string fontified t) 78 82 (face tree-sitter-hl-face:string fontified t) 82 83 (face tree-sitter-hl-face:string fontified t) 83 84 (face (rainbow-delimiters-depth-4-face) fontified t) 84 86 (fontified t) 86 87 (face (rainbow-delimiters-depth-3-face) fontified t) 87 89 (fontified t) 89 92 (face tree-sitter-hl-face:keyword fontified t) 92 93 (fontified t) 93 94 (face tree-sitter-hl-face:variable fontified t) 94 96 (fontified t) 96 97 (face tree-sitter-hl-face:variable fontified t) 97 98 (fontified t) 98 100 (face tree-sitter-hl-face:operator fontified t) 100 101 (fontified t) 101 106 (face tree-sitter-hl-face:keyword fontified t) 106 107 (fontified t) 107 108 (face tree-sitter-hl-face:variable fontified t) 108 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-3-face) fontified t) 110 113 (fontified t) 113 116 (face tree-sitter-hl-face:variable fontified t) 116 117 (fontified t) 117 123 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 123 124 (face (rainbow-delimiters-depth-4-face) fontified t) 124 125 (face tree-sitter-hl-face:string fontified t) 125 126 (face tree-sitter-hl-face:string fontified t) 126 127 (face tree-sitter-hl-face:string fontified t) 127 129 (face tree-sitter-hl-face:string fontified t) 129 130 (face tree-sitter-hl-face:string fontified t) 130 131 (face tree-sitter-hl-face:string fontified t) 131 132 (syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 132 133 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 133 134 (face tree-sitter-hl-face:string fontified t) 134 136 (fontified t) 136 137 (face tree-sitter-hl-face:variable fontified t) 137 139 (fontified t) 139 140 (face tree-sitter-hl-face:variable fontified t) 140 141 (fontified t) 141 152 (face tree-sitter-hl-face:property fontified t) 152 153 (face (rainbow-delimiters-depth-4-face) fontified t) 153 155 (fontified t) 155 156 (face (rainbow-delimiters-depth-3-face) fontified t) 156 158 (fontified t) 158 164 (face tree-sitter-hl-face:keyword fontified t) 164 165 (fontified t) 165 168 (face tree-sitter-hl-face:constant\.builtin fontified t) 168 169 (fontified t) 169 170 (face (rainbow-delimiters-depth-2-face) fontified t) 170 171 (fontified t)) . 207) (undo-tree-id355 . -169) (undo-tree-id356 . -170) (undo-tree-id357 . -169) (undo-tree-id358 . -169) (undo-tree-id359 . -169) (undo-tree-id360 . 2) (undo-tree-id361 . -170) (undo-tree-id362 . 146) (undo-tree-id363 . -26) 376) nil (25843 6858 203266 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 188 . 189) (#("
" 0 1 (fontified nil)) . -359) (188 . 360)) nil (25843 6858 203261 265000) 0 nil])
([nil nil ((359 . 360)) nil (25843 6858 203260 12000) 0 nil])
([nil nil ((#("type cliCommand struct {
	name        string
	description string
	callback func() error
}

cliMap := make(map[string]cliCommand)

func commandHelp() error {
	if m == nil {
		return errors.New(\"No commands to show\")
	}
	for k, v := range m {
		fmt.Printf(\"%s: %s\\n\", k, v.description)
	}
	return nil
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 15 (face tree-sitter-hl-face:type fontified t) 15 16 (fontified t) 16 22 (face tree-sitter-hl-face:keyword fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 26 (fontified t) 26 30 (face tree-sitter-hl-face:property fontified t) 30 38 (fontified t) 38 44 (face tree-sitter-hl-face:type fontified t) 44 46 (fontified t) 46 57 (face tree-sitter-hl-face:property fontified t) 57 58 (fontified t) 58 64 (face tree-sitter-hl-face:type fontified t) 64 66 (fontified t) 66 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 79 (face tree-sitter-hl-face:keyword fontified t) 79 80 (face (rainbow-delimiters-depth-2-face) fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (fontified t) 82 87 (face tree-sitter-hl-face:type fontified t) 87 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-1-face) fontified t) 89 90 (fontified t) 90 91 (rear-nonsticky t fontified t) 91 97 (face tree-sitter-hl-face:variable fontified t) 97 98 (fontified t) 98 100 (face tree-sitter-hl-face:operator fontified t) 100 101 (fontified t) 101 105 (face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 105 106 (face (rainbow-delimiters-depth-1-face) fontified t) 106 109 (face tree-sitter-hl-face:keyword fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t) 110 116 (face tree-sitter-hl-face:type fontified t) 116 117 (face (rainbow-delimiters-depth-2-face) fontified t) 117 127 (face tree-sitter-hl-face:type fontified t) 127 128 (face (rainbow-delimiters-depth-1-face) fontified t) 128 129 (fontified t) 129 130 (rear-nonsticky t fontified t) 130 134 (face tree-sitter-hl-face:keyword fontified t) 134 135 (fontified t) 135 146 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 146 147 (face (rainbow-delimiters-depth-1-face) fontified t) 147 148 (face (rainbow-delimiters-depth-1-face) fontified t) 148 149 (fontified t) 149 154 (face tree-sitter-hl-face:type fontified t) 154 155 (fontified t) 155 156 (face (rainbow-delimiters-depth-1-face) fontified t) 156 157 (fontified t) 157 158 (fontified t) 158 160 (face tree-sitter-hl-face:keyword fontified t) 160 161 (fontified t) 161 162 (face tree-sitter-hl-face:variable fontified t) 162 163 (fontified t) 163 165 (face tree-sitter-hl-face:operator fontified t) 165 166 (fontified t) 166 169 (face tree-sitter-hl-face:constant\.builtin fontified t) 169 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-2-face) fontified t) 171 174 (fontified t) 174 180 (face tree-sitter-hl-face:keyword fontified t) 180 181 (fontified t) 181 187 (face tree-sitter-hl-face:variable fontified t) 187 188 (fontified t) 188 191 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 191 192 (face (rainbow-delimiters-depth-3-face) fontified t) 192 193 (face tree-sitter-hl-face:string fontified t) 193 195 (face tree-sitter-hl-face:string fontified t) 195 196 (face tree-sitter-hl-face:string fontified t) 196 204 (face tree-sitter-hl-face:string fontified t) 204 205 (face tree-sitter-hl-face:string fontified t) 205 207 (face tree-sitter-hl-face:string fontified t) 207 208 (face tree-sitter-hl-face:string fontified t) 208 212 (face tree-sitter-hl-face:string fontified t) 212 213 (face tree-sitter-hl-face:string fontified t) 213 214 (face (rainbow-delimiters-depth-3-face) fontified t) 214 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-2-face) fontified t) 217 219 (fontified t) 219 222 (face tree-sitter-hl-face:keyword fontified t) 222 223 (fontified t) 223 224 (face tree-sitter-hl-face:variable fontified t) 224 226 (fontified t) 226 227 (face tree-sitter-hl-face:variable fontified t) 227 228 (fontified t) 228 230 (face tree-sitter-hl-face:operator fontified t) 230 231 (fontified t) 231 236 (face tree-sitter-hl-face:keyword fontified t) 236 237 (fontified t) 237 238 (face tree-sitter-hl-face:variable fontified t) 238 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-2-face) fontified t) 240 243 (fontified t) 243 246 (face tree-sitter-hl-face:variable fontified t) 246 247 (fontified t) 247 253 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 253 254 (face (rainbow-delimiters-depth-3-face) fontified t) 254 255 (face tree-sitter-hl-face:string fontified t) 255 256 (face tree-sitter-hl-face:string fontified t) 256 257 (face tree-sitter-hl-face:string fontified t) 257 259 (face tree-sitter-hl-face:string fontified t) 259 260 (face tree-sitter-hl-face:string fontified t) 260 261 (face tree-sitter-hl-face:string fontified t) 261 262 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 262 263 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 263 264 (face tree-sitter-hl-face:string fontified t) 264 266 (fontified t) 266 267 (face tree-sitter-hl-face:variable fontified t) 267 269 (fontified t) 269 270 (face tree-sitter-hl-face:variable fontified t) 270 271 (fontified t) 271 282 (face tree-sitter-hl-face:property fontified t) 282 283 (face (rainbow-delimiters-depth-3-face) fontified t) 283 285 (fontified t) 285 286 (face (rainbow-delimiters-depth-2-face) fontified t) 286 288 (fontified t) 288 294 (face tree-sitter-hl-face:keyword fontified t) 294 295 (fontified t) 295 298 (face tree-sitter-hl-face:constant\.builtin fontified t) 298 299 (fontified t) 299 300 (face (rainbow-delimiters-depth-1-face) fontified t) 300 301 (fontified t)) . 59) (undo-tree-id339 . -299) (undo-tree-id340 . -283) (undo-tree-id341 . -129) (undo-tree-id342 . -129) (undo-tree-id343 . -300) (undo-tree-id344 . -299) (undo-tree-id345 . -129) (undo-tree-id346 . -129) (undo-tree-id347 . -129) (undo-tree-id348 . -129) (undo-tree-id349 . -129) (undo-tree-id350 . -129) (undo-tree-id351 . 1) (undo-tree-id352 . -283) (undo-tree-id353 . -283) (undo-tree-id354 . -299)) nil (25843 6858 203258 48000) 0 nil])
([nil nil ((55 . 57)) nil (25843 6858 203248 409000) 0 nil])
([nil nil ((57 . 59) (#("\"" 0 1 (fontified nil)) . -57) (57 . 58)) nil (25843 6858 203246 946000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -57) (undo-tree-id338 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 58)) nil (25843 6858 203244 842000) 0 nil])
([nil nil ((58 . 63) (57 . 59) (#("\"" 0 1 (fontified nil)) . -57) (57 . 58)) nil (25843 6858 203242 538000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -58) (undo-tree-id333 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -59) (undo-tree-id334 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -60) (undo-tree-id335 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -61) (undo-tree-id336 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -62) (undo-tree-id337 . -1) 63) nil (25843 6858 203240 273000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -58) (undo-tree-id332 . -1) 59) nil (25843 6858 203236 476000) 0 nil])
([nil nil ((58 . 59) (#("\"" 0 1 (fontified nil)) . -58) (58 . 59)) nil (25843 6858 203234 492000) 0 nil])
([nil nil ((58 . 68)) nil (25843 6858 203233 149000) 0 nil])
([nil nil ((#("	\"gopokedex/\"
" 0 1 (fontified t) 1 12 (face tree-sitter-hl-face:string fontified t) 12 13 (face tree-sitter-hl-face:string fontified t) 13 14 (fontified t)) . 56) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -13) (undo-tree-id326 . 1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -12) 68) nil (25843 6858 203232 27000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 78) (undo-tree-id321 . -1) (undo-tree-id322 . -1)) nil (25843 6858 203226 686000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 77) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1)) nil (25843 6858 203224 532000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t)) . 75) (undo-tree-id308 . -2) (undo-tree-id309 . -1) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2)) nil (25843 6858 203218 681000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 74) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1)) nil (25843 6858 203213 140000) 0 nil])
([nil nil ((58 . 59)) nil (25843 6858 203208 581000) 0 nil])
([nil nil ((nil rear-nonsticky nil 59 . 60) (#("
" 0 1 (fontified nil)) . -361) (59 . 362)) nil (25843 6858 203207 538000) 0 nil])
([nil nil ((#("cliMap = map[string]cliCommand{
	\"exit\": {
		name:        \"exit\",
		description: \"Exit the Pokedex\",
		callback:    commandExit,
	},
}
" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:operator fontified t) 8 9 (fontified t) 9 12 (face tree-sitter-hl-face:keyword fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 19 (face tree-sitter-hl-face:type fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 30 (face tree-sitter-hl-face:type fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (face tree-sitter-hl-face:string fontified t) 34 38 (face tree-sitter-hl-face:string fontified t) 38 39 (face tree-sitter-hl-face:string fontified t) 39 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 45 (fontified t) 45 49 (face tree-sitter-hl-face:variable fontified t) 49 58 (fontified t) 58 59 (face tree-sitter-hl-face:string fontified t) 59 63 (face tree-sitter-hl-face:string fontified t) 63 64 (face tree-sitter-hl-face:string fontified t) 64 68 (fontified t) 68 79 (face tree-sitter-hl-face:variable fontified t) 79 81 (fontified t) 81 99 (face tree-sitter-hl-face:string fontified t) 99 103 (fontified t) 103 111 (face tree-sitter-hl-face:variable fontified t) 111 116 (fontified t) 116 127 (face tree-sitter-hl-face:variable fontified t) 127 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-3-face) fontified t) 131 133 (fontified t) 133 134 (face (rainbow-delimiters-depth-2-face) fontified t) 134 135 (fontified t)) . 420) (undo-tree-id286 . -133) (undo-tree-id287 . -134) (undo-tree-id288 . -133) (undo-tree-id289 . -128) (undo-tree-id290 . -127) (undo-tree-id291 . -127) (undo-tree-id292 . -127) (undo-tree-id293 . -127) (undo-tree-id294 . -127) (undo-tree-id295 . -133) (undo-tree-id296 . -133) (undo-tree-id297 . 2) (undo-tree-id298 . -134) (undo-tree-id299 . 105) (undo-tree-id300 . -31) 553) nil (25843 6858 203206 647000) 0 nil])
([nil nil ((361 . 363)) nil (25843 6858 203198 110000) 0 nil])
([nil nil ((nil rear-nonsticky nil 363 . 364) (#("
" 0 1 (fontified nil)) . -498) (363 . 499)) nil (25843 6858 203197 268000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -222) (undo-tree-id285 . -1) 223) nil (25843 6858 203196 26000) 0 nil])
([nil nil ((222 . 228)) nil (25843 6858 203194 172000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -303) (undo-tree-id284 . -1) 304) nil (25843 6858 203193 260000) 0 nil])
([nil nil ((303 . 309)) nil (25843 6858 203191 457000) 0 nil])
([nil nil ((405 . 407)) nil (25843 6858 203190 645000) 0 nil])
([nil nil ((407 . 409) (#("\"" 0 1 (fontified nil)) . -407) (407 . 408)) nil (25843 6858 203189 883000) 0 nil])
([nil nil ((408 . 412)) nil (25843 6858 203189 332000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -416) (416 . 417) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -416) (416 . 417) (413 . 417)) nil (25843 6858 203188 962000) 0 nil])
([nil nil ((417 . 419) (418 . 419) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 417) (417 . 419) (416 . 418)) nil (25843 6858 203188 150000) 0 nil])
([nil nil ((426 . 430) (425 . 427) (#("\"" 0 1 (fontified nil)) . -425) (419 . 426)) nil (25843 6858 203186 367000) 0 nil])
([nil nil ((431 . 434)) nil (25843 6858 203185 94000) 0 nil])
([nil nil ((431 . 432)) nil (25843 6858 203184 683000) 0 nil])
([nil nil ((432 . 435)) nil (25843 6858 203184 533000) 0 nil])
([nil nil ((435 . 440)) nil (25843 6858 203184 383000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -439) (undo-tree-id283 . -1) 440) nil (25843 6858 203184 212000) 0 nil])
([nil nil ((439 . 449)) nil (25843 6858 203183 531000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -448) (undo-tree-id282 . -1) 449) nil (25843 6858 203183 180000) 0 nil])
([nil nil ((449 . 459) (448 . 450) (#("\"" 0 1 (fontified nil)) . -448) (448 . 449)) nil (25843 6858 203182 559000) 0 nil])
([nil nil ((459 . 467)) nil (25843 6858 203182 248000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -466) (undo-tree-id281 . -1) 467) nil (25843 6858 203181 878000) 0 nil])
([nil nil ((466 . 469)) nil (25843 6858 203180 816000) 0 nil])
([nil nil ((470 . 473)) nil (25843 6858 203179 693000) 0 nil])
([nil nil ((473 . 483)) nil (25843 6858 203178 952000) 0 nil])
([nil nil ((483 . 494)) nil (25843 6858 203178 661000) 0 nil])
([nil nil ((470 . 471)) nil (25843 6858 203178 491000) 0 nil])
([nil nil ((495 . 496)) nil (25843 6858 203178 220000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -496) (undo-tree-id265 . -1) (undo-tree-id266 . 1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("	" 0 1 (fontified t)) . -497) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("	" 0 1 (fontified t)) . -498) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 499) nil (25843 6858 203174 182000) 0 nil])
([nil nil (374) nil (25843 6927 983288 643000) 0 nil])
([nil nil ((374 . 376) (t 25843 6858 220823 680000)) nil (25843 6927 983287 671000) 0 nil])
([nil nil ((409 . 410)) nil (25843 6927 983286 679000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -408) (410 . 411)) nil (25843 6927 983285 246000) 0 nil])
([nil nil ((422 . 423)) nil (25843 6927 983284 3000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -420) (423 . 424)) nil (25843 6927 983282 671000) 0 nil])
([nil nil ((438 . 439)) nil (25843 6927 983281 358000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -436) (439 . 440)) nil (25843 6927 983279 995000) 0 nil])
([nil nil ((477 . 478)) nil (25843 6927 983278 643000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -475) (478 . 479)) nil (25843 6927 983277 300000) 0 nil])
([nil nil ((501 . 502)) nil (25843 6927 983276 78000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -500) (502 . 503)) nil (25843 6927 983275 346000) 0 nil])
([nil nil ((505 . 506)) nil (25843 6927 983274 555000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -504) (506 . 507)) nil (25843 6927 983273 533000) 0 nil])
([nil nil ((518 . 519)) nil (25843 6927 983273 32000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -516) (519 . 520)) nil (25843 6927 983272 651000) 0 nil])
([nil nil ((541 . 542)) nil (25843 6927 983272 190000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -539) (542 . 543)) nil (25843 6927 983270 887000) 0 nil])
([nil nil ((576 . 577)) nil (25843 6927 983269 595000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -574) (577 . 578)) nil (25843 6927 983268 292000) 0 nil])
([nil nil ((603 . 604)) nil (25843 6927 983266 849000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -602) (604 . 605)) nil (25843 6927 983265 507000) 0 nil])
([nil nil ((607 . 608)) nil (25843 6927 983264 14000) 0 nil])
([nil nil ((608 . 609)) nil (25843 6927 983258 432000) 0 nil])
([nil nil ((372 . 373) (t 25843 6928 93569 391000)) nil (25843 7370 129738 838000) 0 nil])
([nil nil ((152 . 156)) nil (25843 7370 129738 117000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -163) (undo-tree-id796 . -1) 164) nil (25843 7370 129737 375000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -378) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) 379) nil (25843 7370 129736 584000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -378) (undo-tree-id792 . -1) 379) nil (25843 7370 129733 879000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -410) 411) nil (25843 7370 129732 246000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -410) 411) nil (25843 7370 129730 973000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -420) 421) nil (25843 7370 129730 32000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -420) 421) nil (25843 7370 129728 779000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -434) 435) nil (25843 7370 129728 228000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -434) 435) nil (25843 7370 129727 707000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -471) 472) nil (25843 7370 129727 206000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -471) 472) nil (25843 7370 129726 866000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -494) 495) nil (25843 7370 129726 425000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -494) (undo-tree-id791 . -1) 495) nil (25843 7370 129726 14000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -496) 497) nil (25843 7370 129724 942000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -496) 497) nil (25843 7370 129724 471000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -506) 507) nil (25843 7370 129723 750000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -506) 507) nil (25843 7370 129722 948000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -527) 528) nil (25843 7370 129721 756000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -527) 528) nil (25843 7370 129720 784000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -560) 561) nil (25843 7370 129719 512000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -560) 561) nil (25843 7370 129719 11000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -586) 587) nil (25843 7370 129717 929000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -586) 587) nil (25843 7370 129716 296000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -589) (undo-tree-id790 . -1) 590) nil (25843 7370 129714 743000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -589) (undo-tree-id789 . -1) 590) nil (25843 7370 129713 631000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("p" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -389) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -390) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -391) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -392) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -393) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -394) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -395) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -396) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -397) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -398) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -399) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -400) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -401) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -402) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -403) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -404) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -405) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -406) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -407) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -408) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 409) nil (25843 7370 129708 170000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -384) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -385) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#(" " 0 1 (fontified t)) . -386) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -387) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) 388) nil (25843 7370 129661 593000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -385) (385 . 386) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -385) (385 . 386) (384 . 386)) nil (25843 7370 129653 437000) 0 nil])
([nil nil ((386 . 390) (385 . 387) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -385) (385 . 386)) nil (25843 7370 129652 736000) 0 nil])
([nil nil ((392 . 395)) nil (25843 7370 129652 235000) 0 nil])
([nil nil ((#(" = " 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator fontified t) 2 3 (fontified t)) . 392) (undo-tree-id663 . -2)) nil (25843 7370 129651 303000) 0 nil])
([nil nil ((#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 385) (385 . 386) (#("\"\"" 0 2 (face tree-sitter-hl-face:string fontified nil)) . 385) (undo-tree-id662 . -2) (#("help" 0 4 (face tree-sitter-hl-face:string fontified t)) . 386)) nil (25843 7370 129649 901000) 0 nil])
([nil nil ((#("[]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 384) (undo-tree-id657 . -1) (undo-tree-id658 . 1) (undo-tree-id659 . -2) (undo-tree-id660 . 2) (undo-tree-id661 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 385) (385 . 386) (#("]" 0 1 (fontified nil)) . 385) (385 . 386)) nil (25843 7370 129648 538000) 0 nil])
([nil nil ((384 . 388)) nil (25843 7370 129646 705000) 0 nil])
([nil nil ((388 . 409)) nil (25843 7370 129646 564000) 0 nil])
([nil nil ((589 . 590)) nil (25843 7370 129646 394000) 0 nil])
([nil nil ((589 . 590)) nil (25843 7370 129646 254000) 0 nil])
([nil nil ((586 . 587)) nil (25843 7370 129645 953000) 0 nil])
([nil nil ((586 . 587)) nil (25843 7370 129645 653000) 0 nil])
([nil nil ((560 . 561)) nil (25843 7370 129645 482000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -560) (undo-tree-id656 . -1) 561) nil (25843 7370 129644 631000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -586) (undo-tree-id654 . -1) (#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -587) (undo-tree-id655 . -1) 588) nil (25843 7370 129643 429000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -589) (undo-tree-id652 . -1) (#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -590) (undo-tree-id653 . -1) 591) nil (25843 7370 129641 806000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -375) (undo-tree-id650 . -1) (#("
" 0 1 (fontified t)) . -376) (undo-tree-id651 . -1) 377) nil (25843 7370 129640 393000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -386) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("p" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -387) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -388) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -389) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -393) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -394) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -395) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -396) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -397) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -398) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -399) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -400) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -401) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -402) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -403) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -404) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -405) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -406) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 407) nil (25843 7370 129634 712000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -382) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -383) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#(" " 0 1 (fontified t)) . -384) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -385) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) 386) nil (25843 7370 129375 735000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -383) (383 . 384) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -383) (383 . 384) (382 . 384)) nil (25843 7370 129366 57000) 0 nil])
([nil nil ((384 . 388) (383 . 385) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -383) (383 . 384)) nil (25843 7370 129365 345000) 0 nil])
([nil nil ((390 . 393)) nil (25843 7370 129364 905000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -400) (undo-tree-id524 . -1) 401) nil (25843 7370 129364 444000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -393) (undo-tree-id515 . 1) (undo-tree-id516 . -1) (#("\"" 0 1 (fontified t)) . -394) (undo-tree-id517 . 1) (undo-tree-id518 . -1) (#("h" 0 1 (fontified t)) . -395) (undo-tree-id519 . -1) (#("e" 0 1 (fontified t)) . -396) (undo-tree-id520 . -1) (#("l" 0 1 (fontified t)) . -397) (undo-tree-id521 . -1) (#("p" 0 1 (fontified t)) . -398) (undo-tree-id522 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -399) (undo-tree-id523 . -1) 400) nil (25843 7370 129362 490000) 0 nil])
([nil nil ((394 . 404)) nil (25843 7370 129358 833000) 0 nil])
([nil nil ((#("cliCommand" 0 10 (face tree-sitter-hl-face:type fontified t)) . 394)) nil (25843 7370 129358 392000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -393) (undo-tree-id513 . 1) (undo-tree-id514 . -1) 394) nil (25843 7370 129358 42000) 0 nil])
([nil nil ((470 . 471)) nil (25843 7370 129356 729000) 0 nil])
([nil nil ((471 . 472)) nil (25843 7370 129356 278000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 471)) nil (25843 7370 129355 467000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 470) (undo-tree-id512 . -1)) nil (25843 7370 129355 126000) 0 nil])
([nil nil ((393 . 394)) nil (25843 7370 129354 695000) 0 nil])
([nil nil ((394 . 404)) nil (25843 7370 129354 415000) 0 nil])
([nil nil ((#("cliCommand" 0 10 (face tree-sitter-hl-face:type fontified t)) . 394)) nil (25843 7370 129353 944000) 0 nil])
([nil nil ((393 . 400)) nil (25843 7370 129353 653000) 0 nil])
([nil nil ((400 . 401)) nil (25843 7370 129353 383000) 0 nil])
([nil nil ((#(" = " 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator fontified t) 2 3 (fontified t)) . 390)) nil (25843 7370 129353 42000) 0 nil])
([nil nil ((#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 383) (383 . 384) (#("\"\"" 0 2 (face tree-sitter-hl-face:string fontified nil)) . 383) (undo-tree-id511 . -2) (#("help" 0 4 (face tree-sitter-hl-face:string fontified t)) . 384)) nil (25843 7370 129352 241000) 0 nil])
([nil nil ((#("[]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 382) (undo-tree-id506 . -1) (undo-tree-id507 . 1) (undo-tree-id508 . -2) (undo-tree-id509 . 2) (undo-tree-id510 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 383) (383 . 384) (#("]" 0 1 (fontified nil)) . 383) (383 . 384)) nil (25843 7370 129350 758000) 0 nil])
([nil nil ((382 . 386)) nil (25843 7370 129348 243000) 0 nil])
([nil nil ((386 . 407)) nil (25843 7370 129347 913000) 0 nil])
([nil nil ((375 . 377)) nil (25843 7370 129347 331000) 0 nil])
([nil nil ((589 . 591)) nil (25843 7370 129347 1000) 0 nil])
([nil nil ((592 . 594)) nil (25843 7370 129346 630000) 0 nil])
([nil nil ((#("ó" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -592) (undo-tree-id504 . -1) (#("ó" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -593) (undo-tree-id505 . -1) 594) nil (25843 7370 129346 249000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -590) (undo-tree-id503 . -1) 591) nil (25843 7370 129345 258000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -589) (undo-tree-id502 . -1) 590) nil (25843 7370 129344 236000) 0 nil])
([nil nil ((#("cliMap = map[string]cliCommand{
\"help\": {
name: \"help\",
description: \"Display help message\",
callback: commandHelp,
}
\"exit\": {
name:        \"exit\",
description: \"Exit the Pokedex\",
callback:    commandExit,
},
}
" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:operator fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:keyword fontified t) 10 11 (face tree-sitter-hl-face:keyword fontified t) 11 12 (face tree-sitter-hl-face:keyword fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 14 (face tree-sitter-hl-face:type fontified t) 14 15 (face tree-sitter-hl-face:type fontified t) 15 16 (face tree-sitter-hl-face:type fontified t) 16 17 (face tree-sitter-hl-face:type fontified t) 17 18 (face tree-sitter-hl-face:type fontified t) 18 19 (face tree-sitter-hl-face:type fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (face tree-sitter-hl-face:type fontified t) 21 22 (face tree-sitter-hl-face:type fontified t) 22 23 (face tree-sitter-hl-face:type fontified t) 23 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face tree-sitter-hl-face:type fontified t) 25 26 (face tree-sitter-hl-face:type fontified t) 26 27 (face tree-sitter-hl-face:type fontified t) 27 28 (face tree-sitter-hl-face:type fontified t) 28 29 (face tree-sitter-hl-face:type fontified t) 29 30 (face tree-sitter-hl-face:type fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 33 (face tree-sitter-hl-face:string fontified t) 33 34 (face tree-sitter-hl-face:string fontified t) 34 35 (face tree-sitter-hl-face:string fontified t) 35 36 (face tree-sitter-hl-face:string fontified t) 36 37 (face tree-sitter-hl-face:string fontified t) 37 38 (face tree-sitter-hl-face:string fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (fontified t) 42 46 (face tree-sitter-hl-face:variable fontified t) 46 48 (fontified t) 48 49 (face tree-sitter-hl-face:string fontified t) 49 53 (face tree-sitter-hl-face:string fontified t) 53 54 (face tree-sitter-hl-face:string fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 67 (face tree-sitter-hl-face:variable fontified t) 67 69 (fontified t) 69 91 (face tree-sitter-hl-face:string fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 101 (face tree-sitter-hl-face:variable fontified t) 101 103 (fontified t) 103 114 (face tree-sitter-hl-face:variable fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-2-face) fontified t) 117 118 (fontified t) 118 119 (face tree-sitter-hl-face:string fontified t) 119 123 (face tree-sitter-hl-face:string fontified t) 123 124 (face tree-sitter-hl-face:string fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (face (rainbow-delimiters-depth-2-face) fontified t) 127 128 (fontified t) 128 132 (face tree-sitter-hl-face:variable fontified t) 132 133 (fontified t) 133 141 (fontified t) 141 142 (face tree-sitter-hl-face:string fontified t) 142 146 (face tree-sitter-hl-face:string fontified t) 146 147 (face tree-sitter-hl-face:string fontified t) 147 148 (fontified t) 148 149 (fontified t) 149 160 (face tree-sitter-hl-face:variable fontified t) 160 162 (fontified t) 162 180 (face tree-sitter-hl-face:string fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 190 (face tree-sitter-hl-face:variable fontified t) 190 195 (fontified t) 195 206 (face tree-sitter-hl-face:variable fontified t) 206 207 (fontified t) 207 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-2-face) fontified t) 209 210 (fontified t) 210 211 (fontified t) 211 212 (face (rainbow-delimiters-depth-1-face) fontified t) 212 213 (fontified t)) . 378) (undo-tree-id483 . -211) (undo-tree-id484 . -213) (undo-tree-id485 . -213) (undo-tree-id486 . -212) (undo-tree-id487 . -211) (undo-tree-id488 . -213) (undo-tree-id489 . -213) (undo-tree-id490 . -213) (undo-tree-id491 . -213) (undo-tree-id492 . -213) (undo-tree-id493 . 2) (undo-tree-id494 . -213) (undo-tree-id495 . -213) (undo-tree-id496 . -213) (undo-tree-id497 . -213) (undo-tree-id498 . -213) (undo-tree-id499 . 173) (undo-tree-id500 . -210) (undo-tree-id501 . -211)) nil (25843 7370 129343 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 393 . 394) (#("
" 0 1 (fontified nil)) . -606) (393 . 607)) nil (25843 7370 129335 419000) 0 nil])
([nil nil ((#("func commandExit() error {
	return nil
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 16 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t) 19 24 (face tree-sitter-hl-face:type fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (fontified t) 35 38 (face tree-sitter-hl-face:constant\.builtin fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 41 (fontified t)) . 607) (undo-tree-id473 . -39) (undo-tree-id474 . -40) (undo-tree-id475 . -39) (undo-tree-id476 . -40) (undo-tree-id477 . -39) (undo-tree-id478 . -39) (undo-tree-id479 . 2) (undo-tree-id480 . -40) (undo-tree-id481 . 16) (undo-tree-id482 . -26) 646) nil (25843 7370 129334 858000) 0 nil])
([nil nil ((374 . 376)) nil (25843 7370 129329 808000) 0 nil])
([nil nil ((nil rear-nonsticky nil 376 . 377) (#("
" 0 1 (fontified nil)) . -417) (376 . 418)) nil (25843 7370 129329 237000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 418) (undo-tree-id471 . 1) (undo-tree-id472 . -1)) nil (25843 7370 129328 877000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 419) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1)) nil (25843 7370 129327 424000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 418) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . 1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1)) nil (25843 7370 129317 185000) 0 nil])
([nil nil ((551 . 552) (t 25843 7370 240310 604000)) nil (25843 7384 49864 703000) 0 nil])
([nil nil ((#("

" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t rear-nonsticky t)) . -59) (136 . 139) (#("
" 0 1 (rear-nonsticky t fontified t)) . -376) (434 . 435) (466 . 468) (476 . 479) (482 . 489) (490 . 493) (527 . 530) (536 . 538) (537 . 538) (550 . 552) (553 . 555) 551 (563 . 566) (584 . 587) (617 . 620) (643 . 645) (#("
}
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t)) . 645) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -3) (undo-tree-id800 . -2) (650 . 651) 551) nil (25843 7384 49859 593000) 0 nil])
([nil nil ((927 . 931) (t 25843 7384 69386 292000)) nil (25843 7418 48215 943000) 0 nil])
([nil nil ((931 . 936)) nil (25843 7418 48214 641000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -933) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -934) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -935) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 936) nil (25843 7418 48212 607000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -932) (undo-tree-id860 . -1) (undo-tree-id861 . -1) 933) nil (25843 7418 48208 499000) 0 nil])
([nil nil ((932 . 935)) nil (25843 7418 48207 417000) 0 nil])
([nil nil ((apply yas--snippet-revive 931 944 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (931 . 944) (#("commandExit()" 0 13 (fontified nil)) . 931) (931 . 944) (#("comm" 0 4 (fontified nil)) . 931) (931 . 935) (#("commandExit" 0 11 (fontified nil)) . -931) (931 . 942) (#("comm" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -931) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) 935) nil (25843 7418 48205 764000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -998) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -999) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1000) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("M" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1001) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1002) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1003) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) 1004) nil (25843 7418 48195 945000) 0 nil])
([nil nil ((#("l" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1023) (undo-tree-id873 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1024) (undo-tree-id874 . -1) 1025 (t 25843 7418 66945 610000)) nil (25843 7473 835507 954000) 0 nil])
([nil nil ((1023 . 1024)) nil (25843 7473 835505 259000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1025) (undo-tree-id869 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1026) (undo-tree-id870 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1027) (undo-tree-id871 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1028) (undo-tree-id872 . -1) 1029) nil (25843 7473 835503 636000) 0 nil])
([nil nil ((1026 . 1039) (1025 . 1027) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1025) (1025 . 1026)) nil (25843 7473 835498 396000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1038) (undo-tree-id868 . -1) 1039) nil (25843 7473 835495 731000) 0 nil])
([nil nil ((1038 . 1044)) nil (25843 7473 835480 201000) 0 nil])
([nil nil ((1044 . 1048)) nil (25843 7473 835479 89000) 0 nil])
([nil nil ((1049 . 1055)) nil (25843 7473 835477 836000) 0 nil])
([nil nil ((1028 . 1031)) nil (25843 7473 835472 747000) 0 nil])
([nil nil ((1051 . 1053) (t 25843 7473 853746 635000)) nil (25843 7518 527757 891000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1051) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("q" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1052) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 1053) nil (25843 7518 527756 8000) 0 nil])
([nil nil ((1051 . 1053)) nil (25843 7518 527725 479000) 0 nil])
([nil nil ((797 . 800) (t 25843 7518 637752 603000)) nil (25843 7597 415035 971000) 0 nil])
([nil nil ((800 . 807)) nil (25843 7597 415034 859000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -806) (undo-tree-id907 . -1) 807) nil (25843 7597 415033 887000) 0 nil])
([nil nil ((806 . 807)) nil (25843 7597 415032 685000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 812 816 nil nil nil t nil)) nil 3 nil #s(yas--field 1 812 816 nil nil nil t nil) nil nil)) (804 . 821) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 804) (804 . 826) (#("Pri" 0 3 (fontified nil)) . 804) (804 . 807) (#("Println" 0 7 (fontified nil)) . -804) (804 . 811) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -804) (undo-tree-id905 . -3) (undo-tree-id906 . -3) 807) nil (25843 7597 415031 543000) 0 nil])
([nil nil ((813 . 816) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 813) (812 . 813)) nil (25843 7597 415029 629000) 0 nil])
([nil nil ((apply yas--snippet-revive 812 816 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 812 816 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 812 816 nil nil nil t nil) nil)) (812 . 816) (#("text" 0 4 (fontified nil)) . 812) (812 . 816) (#("text" 0 4 (fontified nil)) . 812) (812 . 816) (#("text" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -812) (undo-tree-id903 . -4) (undo-tree-id904 . -4) 816) nil (25843 7597 415028 697000) 0 nil])
([nil nil ((812 . 816)) nil (25843 7597 415026 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -812) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (#("	" 0 1 (fontified t)) . -813) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#("	" 0 1 (fontified t)) . -814) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("	" 0 1 (fontified t)) . -815) (undo-tree-id901 . -1) (undo-tree-id902 . -1) 816) nil (25843 7597 415024 720000) 0 nil])
([nil nil ((apply yas--snippet-revive 804 817 #s(yas--snippet nil (#s(yas--field 1 812 816 nil nil nil t nil)) nil 3 nil #s(yas--field 1 812 816 nil nil nil t nil) nil nil))) nil (25843 7597 415007 937000) 0 nil])
([nil nil ((813 . 819) (812 . 814) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -812) (812 . 813)) nil (25843 7597 415006 875000) 0 nil])
([nil nil ((820 . 822)) nil (25843 7597 415002 386000) 0 nil])
([nil nil ((827 . 830) (t 25843 7597 433044 654000)) nil (25843 7725 112500 413000) 0 nil])
([nil nil ((830 . 834)) nil (25843 7725 112499 601000) 0 nil])
([nil nil ((834 . 837)) nil (25843 7725 112499 301000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -836) (undo-tree-id938 . -1) 837) nil (25843 7725 112498 640000) 0 nil])
([nil nil ((836 . 838)) nil (25843 7725 112496 936000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 842 856 nil nil nil t nil)) nil 5 nil #s(yas--field 1 842 856 nil nil nil t nil) nil nil)) (834 . 851) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 834) (834 . 856) (#("Prin" 0 4 (fontified nil)) . 834) (834 . 838) (#("Println" 0 7 (fontified nil)) . -834) (834 . 841) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -834) (undo-tree-id936 . -4) (undo-tree-id937 . -4) 838) nil (25843 7725 112495 343000) 0 nil])
([nil nil ((#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 5 (face tree-sitter-hl-face:operator fontified t) 5 8 (face tree-sitter-hl-face:variable fontified t)) . 842) (undo-tree-id935 . -8)) nil (25843 7725 112488 861000) 0 nil])
([nil nil ((842 . 845)) nil (25843 7725 112487 608000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -843) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -844) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) 845) nil (25843 7725 112486 907000) 0 nil])
([nil nil ((851 . 856) (850 . 852) (#("\"" 0 1 (fontified nil)) . -850) (undo-tree-id928 . -1) (843 . 851)) nil (25843 7725 112484 612000) 0 nil])
([nil nil ((856 . 857)) nil (25843 7725 112483 500000) 0 nil])
([nil nil ((#("á" 0 1 (face tree-sitter-hl-face:string fontified t)) . -855) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (#("
" 0 1 (fontified t)) . -856) (undo-tree-id918 . -1) (undo-tree-id919 . 1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 857) nil (25843 7725 112481 807000) 0 nil])
([nil nil ((apply yas--snippet-revive 834 857 #s(yas--snippet nil (#s(yas--field 1 842 856 nil nil nil t nil)) nil 5 nil #s(yas--field 1 842 856 nil nil nil t nil) nil nil))) nil (25843 7725 112455 666000) 0 nil])
([nil nil ((55 . 57) (t 25843 7725 132108 587000)) nil (25843 7831 904790 991000) 0 nil])
([nil nil ((57 . 64)) nil (25843 7831 904789 738000) 0 nil])
([nil nil ((56 . 58) (#("\"" 0 1 (fontified nil)) . -56) (56 . 57)) nil (25843 7831 904788 315000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -57) (undo-tree-id992 . -1) 58) nil (25843 7831 904786 802000) 0 nil])
([nil nil ((56 . 57)) nil (25843 7831 904785 570000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -58) (undo-tree-id991 . -1) 59) nil (25843 7831 904784 658000) 0 nil])
([nil nil ((57 . 58)) nil (25843 7831 904782 514000) 0 nil])
([nil nil ((66 . 67) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67)) nil (25843 7831 904781 161000) 0 nil])
([nil nil ((854 . 856)) nil (25843 7831 904780 460000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -855) (undo-tree-id990 . -1) 856) nil (25843 7831 904779 989000) 0 nil])
([nil nil ((855 . 857)) nil (25843 7831 904778 246000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 867 875 nil nil nil nil #s(yas--field 2 877 890 nil nil nil nil nil)) #s(yas--field 2 877 890 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 867 875 nil nil nil nil #s(yas--field 2 877 890 nil nil nil nil nil)) nil nil)) (854 . 891) (#("strings.Trim(${1:s string}, ${2:cutset string})" 0 47 (fontified nil)) . 854) (854 . 901) (#("strtext" 0 3 (fontified nil) 3 7 (face tree-sitter-hl-face:variable fontified nil)) . 854) (854 . 857) (#("strings.Trim" 0 12 (fontified nil)) . -854) (854 . 866) (#("str" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -854) (undo-tree-id988 . -3) (undo-tree-id989 . -3) 857) nil (25843 7831 904776 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 854 891 #s(yas--snippet nil (#s(yas--field 1 867 875 nil nil nil nil #s(yas--field 2 877 890 nil nil nil nil nil)) #s(yas--field 2 877 890 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 867 875 nil nil nil nil #s(yas--field 2 877 890 nil nil nil nil nil)) nil nil))) nil (25843 7831 904773 126000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -889) (undo-tree-id986 . -1) (undo-tree-id987 . -1) 890) nil (25843 7831 904772 615000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -868) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -869) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -870) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -871) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -872) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -873) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -874) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("," 0 1 (fontified t)) . -875) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#(" " 0 1 (fontified t)) . -876) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -877) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -878) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -879) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -880) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -881) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -882) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#(" " 0 1 (fontified t)) . -883) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -884) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -885) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -886) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -887) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -888) (undo-tree-id984 . -1) (undo-tree-id985 . -1) 889) nil (25843 7831 904767 926000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -867) (undo-tree-id942 . -1) (undo-tree-id943 . -1) 868) nil (25843 7831 904744 69000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -866) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 867)) nil (25843 7831 904740 783000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -867) (867 . 868) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -867) (867 . 868) (866 . 868)) nil (25843 7831 904718 99000) 0 nil])
([nil nil ((867 . 871)) nil (25843 7831 904710 925000) 0 nil])
([nil nil ((871 . 872) (t 25843 7831 923324 55000)) nil (25843 7850 903087 625000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -871) (undo-tree-id993 . -1) 872) nil (25843 7850 903085 971000) 0 nil])
([nil nil ((871 . 873)) nil (25843 7850 903073 688000) 0 nil])
([nil nil ((874 . 875) (873 . 875) (#("\"" 0 1 (fontified nil)) . -873) (873 . 874)) nil (25843 7850 903067 55000) 0 nil])
([nil nil ((839 . 842) (t 25843 7850 920629 776000)) nil (25843 7876 788564 139000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -824) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("t" 0 1 (fontified t)) . -825) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("e" 0 1 (fontified t)) . -826) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#("x" 0 1 (fontified t)) . -827) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (#("t" 0 1 (fontified t)) . -828) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#(":" 0 1 (fontified t)) . -829) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#(" " 0 1 (fontified t)) . -830) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -831) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("," 0 1 (fontified nil)) . -832) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(" " 0 1 (fontified t)) . -833) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) 834) nil (25843 7876 788558 67000) 0 nil])
([nil nil ((#("l" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -821) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -822) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) 823 (t 25843 7876 900422 545000)) nil (25843 7883 144153 144000) 0 nil])
([nil nil ((821 . 822)) nil (25843 7883 144130 860000) 0 nil])
([nil nil ((867 . 869) (t 25843 7883 163855 842000)) nil (25843 7921 753884 622000) 0 nil])
([nil nil ((#("		fmt.Printf(text)
" 0 2 (fontified t) 2 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 12 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t)) . 810) (undo-tree-id1272 . -18) (undo-tree-id1273 . -18) (undo-tree-id1274 . -13) (undo-tree-id1275 . -13) (undo-tree-id1276 . -17) (undo-tree-id1277 . 2) (undo-tree-id1278 . -18) (undo-tree-id1279 . 7) (undo-tree-id1280 . -13) 827 (t 25843 7921 772534 411000)) nil (25843 7974 762805 800000) 0 nil])
([nil nil ((812 . 827)) nil (25843 7974 762799 998000) 0 nil])
([nil nil ((827 . 831)) nil (25843 7974 762799 698000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 832 836 nil nil nil t #s(yas--field 2 838 851 nil nil nil nil nil)) #s(yas--field 2 838 851 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 832 836 nil nil nil t #s(yas--field 2 838 851 nil nil nil nil nil)) nil nil)) (827 . 856) (#("Trim(${1:s string}, ${2:cutset string})" 0 39 (fontified nil)) . 827) (827 . 866) (#("Trim" 0 4 (fontified nil)) . 827) (827 . 831) (#("Trim" 0 4 (face tree-sitter-hl-face:property fontified t)) . -827) (undo-tree-id1270 . -4) (undo-tree-id1271 . -4) 831) nil (25843 7974 762798 946000) 0 nil])
([nil nil ((833 . 836) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 833) (832 . 833)) nil (25843 7974 762797 213000) 0 nil])
([nil nil ((apply yas--snippet-revive 827 852 #s(yas--snippet nil (#s(yas--field 1 832 836 nil nil nil t #s(yas--field 2 838 851 nil nil nil nil nil)) #s(yas--field 2 838 851 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 832 836 nil nil nil t #s(yas--field 2 838 851 nil nil nil nil nil)) nil nil))) nil (25843 7974 762796 732000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -838) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -839) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -840) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -841) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -842) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -843) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#(" " 0 1 (fontified t)) . -844) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -845) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -846) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -847) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -848) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -849) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -850) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) 851) nil (25843 7974 762792 574000) 0 nil])
([nil nil ((839 . 842) (838 . 840) (#("\"" 0 1 (fontified nil)) . -838) (838 . 839)) nil (25843 7974 762184 308000) 0 nil])
([nil nil ((#("		fmt.Println(strings.Trim(text, \" \\n\") == \"exit\")
" 0 2 (fontified t) 2 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 13 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (fontified t) 22 26 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 26 27 (face (rainbow-delimiters-depth-4-face) fontified t) 27 31 (face tree-sitter-hl-face:variable fontified t) 31 33 (fontified t) 33 35 (face tree-sitter-hl-face:string fontified t) 35 36 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 36 37 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 37 38 (face tree-sitter-hl-face:string fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 40 (fontified t) 40 42 (face tree-sitter-hl-face:operator fontified t) 42 43 (fontified t) 43 44 (face tree-sitter-hl-face:string fontified t) 44 48 (face tree-sitter-hl-face:string fontified t) 48 49 (face tree-sitter-hl-face:string fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (fontified t)) . 845) (undo-tree-id1087 . -50) (undo-tree-id1088 . 18) (undo-tree-id1089 . -42) (undo-tree-id1090 . -32) (undo-tree-id1091 . -32) (undo-tree-id1092 . -32) (undo-tree-id1093 . -32) (undo-tree-id1094 . -32) (undo-tree-id1095 . -32) (undo-tree-id1096 . -32) (undo-tree-id1097 . -32) (undo-tree-id1098 . -32) (undo-tree-id1099 . -32) (undo-tree-id1100 . -51) 877) nil (25843 7974 762179 218000) 0 nil])
([nil nil ((415 . 417) (t 25843 7974 782228 887000)) nil (25843 7998 63947 406000) 0 nil])
([nil nil ((417 . 424)) nil (25843 7998 63947 26000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 429 446 nil nil nil t nil)) nil 8 nil #s(yas--field 1 429 446 nil nil nil t nil) nil nil)) (421 . 438) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 421) (421 . 443) (#("Pri" 0 3 (fontified nil)) . 421) (421 . 424) (#("Println" 0 7 (fontified nil)) . -421) (421 . 428) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -421) (undo-tree-id1296 . -3) (undo-tree-id1297 . -3) 424) nil (25843 7998 63945 923000) 0 nil])
([nil nil ((430 . 441) (429 . 431) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -429) (undo-tree-id1294 . -1) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 430) (undo-tree-id1295 . -8) (429 . 430)) nil (25843 7998 63943 188000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -438) (undo-tree-id1291 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -439) (undo-tree-id1292 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -440) (undo-tree-id1293 . -1) 441) nil (25843 7998 63941 705000) 0 nil])
([nil nil ((438 . 445)) nil (25843 7998 63940 292000) 0 nil])
([nil nil ((445 . 446)) nil (25843 7998 63940 102000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -445) (undo-tree-id1281 . -1) (undo-tree-id1282 . 1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) 446) nil (25843 7998 63938 780000) 0 nil])
([nil nil ((apply yas--snippet-revive 421 447 #s(yas--snippet nil (#s(yas--field 1 429 446 nil nil nil t nil)) nil 8 nil #s(yas--field 1 429 446 nil nil nil t nil) nil nil))) nil (25843 7998 63918 39000) 0 nil])
([nil nil ((233 . 235) (t 25843 7998 174863 781000)) nil (25843 8259 897340 120000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -233) (undo-tree-id1325 . -1) (#("	" 0 1 (fontified t)) . -234) (undo-tree-id1326 . -1) 235) nil (25843 8259 897339 268000) 0 nil])
([nil nil ((299 . 301)) nil (25843 8259 897338 106000) 0 nil])
([nil nil ((301 . 306)) nil (25843 8259 897337 805000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -301) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -302) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -303) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -304) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -305) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 306) nil (25843 8259 897336 653000) 0 nil])
([nil nil ((301 . 308)) nil (25843 8259 897330 551000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -307) (undo-tree-id1314 . -1) 308) nil (25843 8259 897330 30000) 0 nil])
([nil nil ((307 . 308)) nil (25843 8259 897329 289000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 313 333 nil nil nil t nil)) nil 9 nil #s(yas--field 1 313 333 nil nil nil t nil) nil nil)) (305 . 322) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 305) (305 . 327) (#("Pri" 0 3 (fontified nil)) . 305) (305 . 308) (#("Println" 0 7 (fontified nil)) . -305) (305 . 312) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -305) (undo-tree-id1312 . -3) (undo-tree-id1313 . -3) 308) nil (25843 8259 897328 187000) 0 nil])
([nil nil ((314 . 332) (313 . 315) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -313) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 314) (313 . 314)) nil (25843 8259 897326 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 305 334 #s(yas--snippet nil (#s(yas--field 1 313 333 nil nil nil t nil)) nil 9 nil #s(yas--field 1 313 333 nil nil nil t nil) nil nil))) nil (25843 8259 897324 860000) 0 nil])
([nil nil ((334 . 336)) nil (25843 8259 897324 249000) 0 nil])
([nil nil ((336 . 343)) nil (25843 8259 897323 868000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -342) (undo-tree-id1311 . -1) 343) nil (25843 8259 897323 327000) 0 nil])
([nil nil ((342 . 344)) nil (25843 8259 897322 536000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 348 356 nil nil nil t nil)) nil 10 nil #s(yas--field 1 348 356 nil nil nil t nil) nil nil)) (340 . 357) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 340) (340 . 362) (#("Prin" 0 4 (fontified nil)) . 340) (340 . 344) (#("Println" 0 7 (fontified nil)) . -340) (340 . 347) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -340) (undo-tree-id1309 . -4) (undo-tree-id1310 . -4) 344) nil (25843 8259 897321 193000) 0 nil])
([nil nil ((349 . 350) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 349) (undo-tree-id1308 . -8) (348 . 349)) nil (25843 8259 897319 119000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -349) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) 350) nil (25843 8259 897318 357000) 0 nil])
([nil nil ((349 . 354)) nil (25843 8259 897316 784000) 0 nil])
([nil nil ((348 . 350) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -348) (348 . 349)) nil (25843 8259 897316 374000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -349) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) 350) nil (25843 8259 897315 572000) 0 nil])
([nil nil ((355 . 356) (#("\"" 0 1 (fontified nil)) . -355) (undo-tree-id1298 . -1) (355 . 356)) nil (25843 8259 897311 63000) 0 nil])
([nil nil ((apply yas--snippet-revive 340 357 #s(yas--snippet nil (#s(yas--field 1 348 356 nil nil nil t nil)) nil 10 nil #s(yas--field 1 348 356 nil nil nil t nil) nil nil))) nil (25843 8259 897294 591000) 0 nil])
([nil nil ((334 . 335) (t 25843 8259 917244 513000)) nil (25843 8572 556124 518000) 0 nil])
([nil nil ((#("!" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -334) (undo-tree-id1327 . -1) 335) nil (25843 8572 556122 955000) 0 nil])
([nil nil ((332 . 333)) nil (25843 8572 556109 368000) 0 nil])
([nil nil ((356 . 358)) nil (25843 8572 556104 48000) 0 nil])
([nil nil ((434 . 436) (t 25843 8572 652264 852000)) nil (25843 8599 514387 964000) 0 nil])
([nil nil ((436 . 442)) nil (25843 8599 514387 443000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -441) (undo-tree-id1330 . -1) 442) nil (25843 8599 514386 932000) 0 nil])
([nil nil ((441 . 443)) nil (25843 8599 514385 369000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 446 450 nil nil nil t nil)) nil 11 nil #s(yas--field 1 446 450 nil nil nil t nil) nil nil)) (440 . 455) (#("Print(${1:a ...any})" 0 20 (fontified nil)) . 440) (440 . 460) (#("Pri" 0 3 (fontified nil)) . 440) (440 . 443) (#("Print" 0 5 (fontified nil)) . -440) (440 . 445) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -440) (undo-tree-id1328 . -3) (undo-tree-id1329 . -3) 443) nil (25843 8599 514383 746000) 0 nil])
([nil nil ((447 . 449) (446 . 448) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -446) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 447) (446 . 447)) nil (25843 8599 514367 724000) 0 nil])
([nil nil ((apply yas--snippet-revive 440 451 #s(yas--snippet nil (#s(yas--field 1 446 450 nil nil nil t nil)) nil 11 nil #s(yas--field 1 446 450 nil nil nil t nil) nil nil))) nil (25843 8599 514361 502000) 0 nil])
([nil nil ((67 . 69) (t 25843 8599 626164 650000)) nil (25843 8900 929999 282000) 0 nil])
([nil nil ((70 . 78) (69 . 71) (#("\"" 0 1 (fontified nil)) . -69) (69 . 70)) nil (25843 8900 929998 380000) 0 nil])
([nil nil ((217 . 219)) nil (25843 8900 929997 298000) 0 nil])
([nil nil ((219 . 231)) nil (25843 8900 929996 667000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -217) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("
" 0 1 (fontified t)) . -218) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -219) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -220) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -221) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (#("L" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -222) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -223) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -224) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -225) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -226) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -227) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -228) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -229) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -230) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) 231) nil (25843 8900 929991 138000) 0 nil])
([nil nil ((551 . 553)) nil (25843 8900 929610 786000) 0 nil])
([nil nil ((#("	\"net/http\"
" 0 1 (fontified t) 1 11 (face tree-sitter-hl-face:string fontified t) 11 12 (fontified t)) . 68) (undo-tree-id1520 . -11) (undo-tree-id1521 . -11) (undo-tree-id1522 . -12) (undo-tree-id1523 . -1) (undo-tree-id1524 . -11) (undo-tree-id1525 . -10) (undo-tree-id1526 . -11) (undo-tree-id1527 . -11) (undo-tree-id1528 . -10) (undo-tree-id1529 . -10) (undo-tree-id1530 . -10) (undo-tree-id1531 . -10) (undo-tree-id1532 . 10) (undo-tree-id1533 . -10) (undo-tree-id1534 . -1) (undo-tree-id1535 . -11) (undo-tree-id1536 . -10) (undo-tree-id1537 . -10) (undo-tree-id1538 . -10) (undo-tree-id1539 . -10) (undo-tree-id1540 . -10) (undo-tree-id1541 . -12) 78 (t 25843 8900 988770 344000)) nil (25843 9126 552050 413000) 0 nil])
([nil nil ((956 . 959) (t 25843 9126 573010 935000)) nil (25843 9361 280540 25000) 0 nil])
([nil nil ((959 . 965)) nil (25843 9361 280539 274000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -966) (966 . 967) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -966) (966 . 967) (965 . 967)) nil (25843 9361 280538 182000) 0 nil])
([nil nil ((966 . 971)) nil (25843 9361 280537 180000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -970) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) 971) nil (25843 9361 280536 108000) 0 nil])
([nil nil ((971 . 972)) nil (25843 9361 280534 64000) 0 nil])
([nil nil ((apply yas--snippet-revive 972 980 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (972 . 980) (#("callback" 0 8 (fontified nil)) . 972) (972 . 980) (#("callback" 0 8 (fontified nil)) . -972) (972 . 980)) nil (25843 9361 280532 401000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -981) (981 . 982) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -981) (981 . 982) (980 . 982)) nil (25843 9361 280530 367000) 0 nil])
([nil nil ((#("			commandExit()
			break
		} else if text == \"help\" {
			commandHelp()
		} else {
" 0 3 (fontified t) 3 14 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 16 (face (rainbow-delimiters-depth-4-face) fontified t) 16 17 (fontified t) 17 20 (fontified t) 20 25 (face tree-sitter-hl-face:keyword fontified t) 25 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (fontified t) 30 34 (face tree-sitter-hl-face:keyword fontified t) 34 35 (fontified t) 35 37 (face tree-sitter-hl-face:keyword fontified t) 37 38 (fontified t) 38 42 (face tree-sitter-hl-face:variable fontified t) 42 43 (fontified t) 43 45 (face tree-sitter-hl-face:operator fontified t) 45 46 (fontified t) 46 47 (face tree-sitter-hl-face:string fontified t) 47 51 (face tree-sitter-hl-face:string fontified t) 51 52 (face tree-sitter-hl-face:string fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (fontified t) 55 58 (fontified t) 58 69 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 72 (fontified t) 72 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 76 (fontified t) 76 80 (face tree-sitter-hl-face:keyword fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-3-face) fontified t) 82 83 (fontified t)) . 1113) (undo-tree-id1729 . -78) (undo-tree-id1730 . -82) (undo-tree-id1731 . -5) (undo-tree-id1732 . -78) (undo-tree-id1733 . -81) (undo-tree-id1734 . -82) (undo-tree-id1735 . -81) (undo-tree-id1736 . -82) (undo-tree-id1737 . -5) (undo-tree-id1738 . -78) (undo-tree-id1739 . -5) (undo-tree-id1740 . -78) 1191) nil (25843 9361 280528 744000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1091) (undo-tree-id1710 . -1) (#(" " 0 1 (fontified t)) . -1092) (undo-tree-id1711 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1093) (undo-tree-id1712 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1094) (undo-tree-id1713 . -1) (#(" " 0 1 (fontified t)) . -1095) (undo-tree-id1714 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1096) (undo-tree-id1715 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1097) (undo-tree-id1716 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1098) (undo-tree-id1717 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1099) (undo-tree-id1718 . -1) (#(" " 0 1 (fontified t)) . -1100) (undo-tree-id1719 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1101) (undo-tree-id1720 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1102) (undo-tree-id1721 . -1) (#(" " 0 1 (fontified t)) . -1103) (undo-tree-id1722 . -1) (#("\"" 0 1 (fontified t)) . -1104) (undo-tree-id1723 . -1) (#("e" 0 1 (fontified t)) . -1105) (undo-tree-id1724 . -1) (#("x" 0 1 (fontified t)) . -1106) (undo-tree-id1725 . -1) (#("i" 0 1 (fontified t)) . -1107) (undo-tree-id1726 . -1) (#("t" 0 1 (fontified t)) . -1108) (undo-tree-id1727 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1109) (undo-tree-id1728 . -1) 1110) nil (25843 9361 280441 752000) 0 nil])
([nil nil ((1091 . 1092)) nil (25843 9361 280199 940000) 0 nil])
([nil nil ((1094 . 1098)) nil (25843 9361 280199 329000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1101) (1101 . 1102) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1101) (1101 . 1102) (1098 . 1102)) nil (25843 9361 280198 367000) 0 nil])
([nil nil ((1101 . 1104)) nil (25843 9361 280197 595000) 0 nil])
([nil nil ((apply yas--snippet-revive 1101 1107 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (1101 . 1107) (#("cliMap" 0 6 (fontified nil)) . 1101) (1101 . 1107) (#("cli" 0 3 (fontified nil)) . 1101) (1101 . 1104) (#("cliMap" 0 6 (fontified nil)) . -1101) (1101 . 1107) (#("cli" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1101) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) 1104) nil (25843 9361 280196 423000) 0 nil])
([nil nil ((1107 . 1108)) nil (25843 9361 280193 928000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1107) (undo-tree-id1707 . -1) 1108) nil (25843 9361 280193 327000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -1108) (1108 . 1109) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1108) (1108 . 1109) (1107 . 1109)) nil (25843 9361 280191 794000) 0 nil])
([nil nil ((1108 . 1112)) nil (25843 9361 280190 702000) 0 nil])
([nil nil ((1113 . 1120)) nil (25843 9361 280189 801000) 0 nil])
([nil nil ((1121 . 1122)) nil (25843 9361 280189 500000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1123) (1123 . 1124) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1123) (1123 . 1124) (1122 . 1124)) nil (25843 9361 280188 388000) 0 nil])
([nil nil ((1124 . 1128) (1125 . 1128) (#("				" 0 4 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1124) (1124 . 1128) (1123 . 1125)) nil (25843 9361 280187 557000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1101) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1102) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1103) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("M" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1104) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1105) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1106) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1107) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1108) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1109) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1110) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1111) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1112) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (#(" " 0 1 (fontified t)) . -1113) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1114) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1115) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#(" " 0 1 (fontified t)) . -1116) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1117) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1118) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -1119) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) 1120) nil (25843 9361 280183 549000) 0 nil])
([nil nil ((1094 . 1098)) nil (25843 9361 280159 234000) 0 nil])
([nil nil ((1098 . 1105)) nil (25843 9361 280158 582000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1104) (undo-tree-id1649 . -1) 1105) nil (25843 9361 280157 470000) 0 nil])
([nil nil ((1104 . 1109)) nil (25843 9361 280156 358000) 0 nil])
([nil nil ((1105 . 1110)) nil (25843 9361 280155 497000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -1121) (1121 . 1122) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1121) (1121 . 1122) (1113 . 1122)) nil (25843 9361 280154 475000) 0 nil])
([nil nil ((1121 . 1125)) nil (25843 9361 280152 792000) 0 nil])
([nil nil ((1139 . 1141) (1138 . 1140) (#("'" 0 1 (fontified nil)) . -1138) (1134 . 1139)) nil (25843 9361 280152 20000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1139) (undo-tree-id1647 . -1) (#(" " 0 1 (fontified t)) . -1140) (undo-tree-id1648 . -1) 1141) nil (25843 9361 280150 798000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -1138) (undo-tree-id1646 . -1) (#("'" 0 1 (fontified t)) . 1139)) nil (25843 9361 280147 432000) 0 nil])
([nil nil ((1138 . 1141)) nil (25843 9361 280146 380000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1152 . 1153) (#("
" 0 1 (fontified nil)) . -1232) (1149 . 1233) 1148) nil (25843 9361 280145 268000) 0 nil])
([nil nil ((#("				
" 0 4 (fontified t) 4 5 (fontified t)) . 1145) (undo-tree-id1644 . -4) (undo-tree-id1645 . -3) 1148) nil (25843 9361 280144 256000) 0 nil])
([nil nil ((811 . 812) (#("	" 0 1 (fontified nil)) . 810) (undo-tree-id1643 . -1) (809 . 812)) nil (25843 9361 280142 793000) 0 nil])
([nil nil ((812 . 821)) nil (25843 9361 280141 981000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -818) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -819) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -820) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) 821) nil (25843 9361 280141 20000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -817) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) 818) nil (25843 9361 280137 964000) 0 nil])
([nil nil ((831 . 832) (#(")" 0 1 (fontified nil)) . -830) (830 . 831) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -830) (830 . 831) (817 . 831)) nil (25843 9361 280135 89000) 0 nil])
([nil nil ((830 . 836)) nil (25843 9361 280132 854000) 0 nil])
([nil nil ((836 . 839)) nil (25843 9361 280132 13000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -842) (842 . 843) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -842) (842 . 843) (840 . 843)) nil (25843 9361 280130 680000) 0 nil])
([nil nil ((843 . 845) (844 . 845) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 843) (843 . 845) (842 . 844)) nil (25843 9361 280128 306000) 0 nil])
([nil nil ((#("	func errorHandler(err error) {
		
	} 
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 18 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (fontified t) 23 28 (face tree-sitter-hl-face:variable fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t) 38 39 (fontified t)) . 811) (undo-tree-id1627 . -36) (undo-tree-id1628 . -38) (undo-tree-id1629 . -36) (undo-tree-id1630 . -1) (undo-tree-id1631 . -28) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -36) 812) nil (25843 9361 280126 843000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 810) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1)) nil (25843 9361 280119 489000) 0 nil])
([nil nil ((1148 . 1150)) nil (25843 9361 280116 824000) 0 nil])
([nil nil ((1197 . 1199)) nil (25843 9361 280115 732000) 0 nil])
([nil nil ((1226 . 1228)) nil (25843 9361 280115 81000) 0 nil])
([nil nil ((1141 . 1144)) nil (25843 9361 280114 470000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1133) (undo-tree-id1619 . 1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) 1134) nil (25843 9361 280113 578000) 0 nil])
([nil nil ((1133 . 1134)) nil (25843 9361 280111 74000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1144) (undo-tree-id1615 . -1) (undo-tree-id1616 . 1) (undo-tree-id1617 . 1) (undo-tree-id1618 . -1) 1145) nil (25843 9361 280109 881000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1108) (undo-tree-id1613 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1109) (undo-tree-id1614 . -1) 1110) nil (25843 9361 280106 876000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1133) (undo-tree-id1611 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1134) (undo-tree-id1612 . -1) 1135) nil (25843 9361 280104 561000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1137) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1138) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -1139) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) 1140) nil (25843 9361 280101 856000) 0 nil])
([nil nil ((1137 . 1138)) nil (25843 9361 280095 515000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1133) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("!" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1134) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1135) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (#(" " 0 1 (fontified t)) . -1136) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1137) (undo-tree-id1603 . -1) 1138) nil (25843 9361 280093 451000) 0 nil])
([nil nil ((#("			  fmt.Printf(\"The following error happened:\")
			  fmt.Printf(err.Error())
			  break
" 0 2 (fontified t) 2 3 (fontified t rear-nonsticky t) 3 5 (fontified t) 5 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 15 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 15 16 (face (rainbow-delimiters-depth-5-face) fontified t) 16 47 (face tree-sitter-hl-face:string fontified t) 47 48 (face (rainbow-delimiters-depth-5-face) fontified t) 48 49 (fontified t) 49 54 (fontified t) 54 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 64 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 64 65 (face (rainbow-delimiters-depth-5-face) fontified t) 65 68 (face tree-sitter-hl-face:variable fontified t) 68 69 (fontified t) 69 74 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 74 75 (face (rainbow-delimiters-depth-6-face) fontified t) 75 76 (face (rainbow-delimiters-depth-6-face) fontified t) 76 77 (face (rainbow-delimiters-depth-5-face) fontified t) 77 78 (fontified t) 78 83 (fontified t) 83 88 (face tree-sitter-hl-face:keyword fontified t) 88 89 (fontified t)) . 1136) (undo-tree-id1586 . -83) (undo-tree-id1587 . -88) (undo-tree-id1588 . -83) (undo-tree-id1589 . -5) (undo-tree-id1590 . 5) (undo-tree-id1591 . -56) (undo-tree-id1592 . -5) (undo-tree-id1593 . -5) (undo-tree-id1594 . -83) 1141) nil (25843 9361 280085 987000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1147) (1147 . 1148) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1147) (1147 . 1148) (1140 . 1148)) nil (25843 9361 280079 184000) 0 nil])
([nil nil ((1148 . 1152) (1149 . 1152) (#("				" 0 4 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1148) (1148 . 1152) (1147 . 1149)) nil (25843 9361 280077 401000) 0 nil])
([nil nil ((1152 . 1157) 1151) nil (25843 9361 280075 908000) 0 nil])
([nil nil ((#("			fmt.Printf(\"%s is not a valid command\\n\", text)
" 0 3 (fontified t) 3 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 13 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 40 (face tree-sitter-hl-face:string fontified t) 40 41 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 41 42 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 42 43 (face tree-sitter-hl-face:string fontified t) 43 45 (fontified t) 45 49 (face tree-sitter-hl-face:variable fontified t) 49 50 (face (rainbow-delimiters-depth-4-face) fontified t) 50 51 (fontified t)) . 1163) (undo-tree-id1579 . -50) (undo-tree-id1580 . -51) (undo-tree-id1581 . -3) (undo-tree-id1582 . -3) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3) (undo-tree-id1585 . -51) 1166) nil (25843 9361 280074 796000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1160 . 1161) (#("
" 0 1 (fontified nil)) . -1208) (1157 . 1209) 1155) nil (25843 9361 280070 27000) 0 nil])
([nil nil ((#("				
" 0 4 (fontified t) 4 5 (fontified t)) . 1153) (undo-tree-id1566 . -4) (undo-tree-id1567 . -3) (undo-tree-id1568 . -4) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -3) (undo-tree-id1576 . -3) (undo-tree-id1577 . -3) (undo-tree-id1578 . -5) 1156) nil (25843 9361 280068 694000) 0 nil])
([nil nil ((#("				
" 0 4 (fontified t) 4 5 (fontified t)) . 1148) (undo-tree-id1542 . -4) (undo-tree-id1543 . 1) (undo-tree-id1544 . -3) (undo-tree-id1545 . -5) (undo-tree-id1546 . -3) (undo-tree-id1547 . -3) (undo-tree-id1548 . -3) (undo-tree-id1549 . -3) (undo-tree-id1550 . -3) (undo-tree-id1551 . -3) (undo-tree-id1552 . -5) (undo-tree-id1553 . -5) (undo-tree-id1554 . -5) (undo-tree-id1555 . -5) (undo-tree-id1556 . -5) (undo-tree-id1557 . -5) (undo-tree-id1558 . -5) (undo-tree-id1559 . -5) (undo-tree-id1560 . -5) (undo-tree-id1561 . -5) (undo-tree-id1562 . -3) (undo-tree-id1563 . -3) (undo-tree-id1564 . -3) (undo-tree-id1565 . -5) 1151) nil (25843 9361 280060 239000) 0 nil])
([nil nil ((1151 . 1153)) nil (25843 9361 280028 710000) 0 nil])
([nil nil ((1135 . 1140) (t 25843 9361 391743 88000)) nil (25843 9369 858084 591000) 0 nil])
([nil nil ((1140 . 1148)) nil (25843 9369 858083 138000) 0 nil])
([nil nil ((apply yas--snippet-revive 1148 1156 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (1148 . 1156) (#("callback" 0 8 (fontified nil)) . 1148) (1148 . 1156) (#("callback" 0 8 (fontified nil)) . -1148) (1148 . 1156)) nil (25843 9369 858080 944000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1157) (1157 . 1158) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1157) (1157 . 1158) (1156 . 1158)) nil (25843 9369 858073 490000) 0 nil])
([nil nil ((#("		cliMap[text].callback()
" 0 2 (fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 15 (fontified t) 15 23 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (fontified t)) . 957) (undo-tree-id1743 . -23) (undo-tree-id1744 . -25) (undo-tree-id1745 . -26) (undo-tree-id1746 . -26) (undo-tree-id1747 . -23) (undo-tree-id1748 . -23) (undo-tree-id1749 . -23) (undo-tree-id1750 . -23) (undo-tree-id1751 . -23) (undo-tree-id1752 . 3) (undo-tree-id1753 . -24) (undo-tree-id1754 . 2) (undo-tree-id1755 . -25) (undo-tree-id1756 . -23) (undo-tree-id1757 . -23) (undo-tree-id1758 . -15) (undo-tree-id1759 . -23) (undo-tree-id1760 . -23) (undo-tree-id1761 . -23) (undo-tree-id1762 . -23) (undo-tree-id1763 . -23) (undo-tree-id1764 . -23) (undo-tree-id1765 . -26) 980 (t 25843 9369 878658 624000)) nil (25843 9450 448907 841000) 0 nil])
([nil nil ((1132 . 1137) (t 25843 9450 471173 220000)) nil (25843 10655 648177 809000) 0 nil])
([nil nil ((1140 . 1142) (#("\"" 0 1 (fontified nil)) . -1140) (1137 . 1141)) nil (25843 10655 648176 417000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1140) (undo-tree-id1790 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 1141)) nil (25843 10655 648174 594000) 0 nil])
([nil nil ((1149 . 1153) (1148 . 1150) (#("\"" 0 1 (fontified nil)) . -1148) (1140 . 1149)) nil (25843 10655 648172 660000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1156) (1156 . 1157) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1156) (1156 . 1157) (1154 . 1157)) nil (25843 10655 648170 256000) 0 nil])
([nil nil ((1157 . 1162) (1158 . 1162) (#("					" 0 5 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 1157) (1157 . 1162) (1156 . 1158)) nil (25843 10655 648168 62000) 0 nil])
([nil nil ((1162 . 1163)) nil (25843 10655 648166 58000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1162) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) 1163) nil (25843 10655 648164 716000) 0 nil])
([nil nil ((1162 . 1163)) nil (25843 10655 648161 861000) 0 nil])
([nil nil ((1163 . 1165)) nil (25843 10655 648160 819000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1163) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1164) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) 1165) nil (25843 10655 648158 284000) 0 nil])
([nil nil ((1163 . 1167)) nil (25843 10655 648128 411000) 0 nil])
([nil nil ((400 . 401) (#(" " 0 1 (face tree-sitter-hl-face:string fontified nil)) . -400) (nil face nil 399 . 400) (399 . 400) (332 . 333) (#("  " 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (fontified nil)) . -332) (nil face nil 331 . 332) (331 . 332) (275 . 276) (#(" " 0 1 (face tree-sitter-hl-face:string fontified nil)) . -275) (nil face nil 274 . 275) (274 . 275) (452 . 453) (#("
" 0 1 (fontified nil)) . 452) (441 . 442) (#("
" 0 1 (fontified nil)) . 441) (425 . 426) (#("
" 0 1 (fontified nil)) . 425) (423 . 424) (#("
" 0 1 (fontified nil)) . 423) (382 . 383) (#("
" 0 1 (fontified nil)) . 382) (355 . 356) (#("
" 0 1 (fontified nil)) . 355) (331 . 332) (#("
" 0 1 (fontified nil)) . 331) (295 . 296) (#("
" 0 1 (fontified nil)) . 295) (293 . 294) (#("
" 0 1 (fontified nil)) . 293) (252 . 253) (#("
" 0 1 (fontified nil)) . 252) (233 . 234) (#("
" 0 1 (fontified t)) . 233) (330 . 331) (#("	" 0 1 (fontified t)) . 441) (#("	" 0 1 (fontified t)) . 425) (#("	" 0 1 (fontified t)) . 423) (#("		" 0 2 (fontified t)) . 382) (#("	" 0 1 (fontified t)) . 355) (#("	" 0 1 (fontified t)) . 331) (#("	" 0 1 (fontified t)) . 296) (#("	" 0 1 (fontified t)) . 294) (#("		" 0 2 (fontified t)) . 253) (#("	" 0 1 (fontified t)) . 234) 359 (t 25843 10655 803926 374000)) nil (25843 10963 399871 558000) 0 nil])
([nil nil ((234 . 235) (253 . 255) (294 . 295) (296 . 297) (331 . 332) (355 . 356) (382 . 384) (423 . 424) (425 . 426) (441 . 442) (#(" " 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 330) (233 . 234) (#(" " 0 1 (fontified nil)) . 233) (252 . 253) (#(" " 0 1 (fontified nil)) . 252) (293 . 294) (#(" " 0 1 (fontified nil)) . 293) (295 . 296) (#(" " 0 1 (fontified nil)) . 295) (331 . 332) (#(" " 0 1 (fontified nil)) . 331) (355 . 356) (#(" " 0 1 (fontified nil)) . 355) (382 . 383) (#(" " 0 1 (fontified nil)) . 382) (423 . 424) (#(" " 0 1 (fontified nil)) . 423) (425 . 426) (#(" " 0 1 (fontified nil)) . 425) (441 . 442) (#(" " 0 1 (fontified nil)) . 441) (452 . 453) (#(" " 0 1 (fontified nil)) . 452) (#("
" 0 1 (face nil fontified nil)) . 274) (nil face nil 274 . 275) (275 . 276) (#("	" 0 1 (fontified nil)) . 275) (#("
" 0 1 (face nil fontified nil)) . 331) (nil face nil 331 . 332) (332 . 334) (#("	" 0 1 (fontified nil)) . 332) (#("
" 0 1 (face nil fontified nil)) . 399) (nil face nil 399 . 400) (400 . 401) (#("	" 0 1 (fontified t)) . 400)) nil (25843 10963 399859 265000) 0 nil])
([nil nil ((67 . 69) (t 25843 10655 803926 374000)) nil (25843 10963 399851 852000) 0 nil])
([nil nil ((70 . 78) (69 . 71) (#("\"" 0 1 (fontified nil)) . -69) (69 . 70)) nil (25843 10963 399850 820000) 0 nil])
([nil nil ((78 . 79)) nil (25843 10963 399849 457000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -78) (undo-tree-id1824 . -1) 79) nil (25843 10963 399847 844000) 0 nil])
([nil nil ((70 . 80)) nil (25843 10963 399846 291000) 0 nil])
([nil nil ((#("type cliCommand struct {
	name        string
	description string
	callback    func() error
}

var cliMap = make(map[string]cliCommand)

func commandHelp() error {
	if cliMap == nil {
		return errors.New(\"No commands to show\")
	}
	fmt.Println(\"Welcome to Pokedex!\")
	fmt.Println(\"Usage:\\n\")
	for k, v := range cliMap {
		fmt.Printf(\"%s: %s\\n\", k, v.description)
	}
	fmt.Print(\"\\n\")
	return nil
}

func commandExit() error {
	fmt.Println(\"Exiting pokedex\")
	return nil
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 15 (face tree-sitter-hl-face:type fontified t) 15 16 (fontified t) 16 22 (face tree-sitter-hl-face:keyword fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 26 (fontified t) 26 30 (face tree-sitter-hl-face:property fontified t) 30 38 (fontified t) 38 44 (face tree-sitter-hl-face:type fontified t) 44 46 (fontified t) 46 57 (face tree-sitter-hl-face:property fontified t) 57 58 (fontified t) 58 64 (face tree-sitter-hl-face:type fontified t) 64 66 (fontified t) 66 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 78 (fontified t) 78 82 (face tree-sitter-hl-face:keyword fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 85 (fontified t) 85 90 (face tree-sitter-hl-face:type fontified t) 90 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t) 92 93 (fontified t) 93 94 (fontified t rear-nonsticky t) 94 97 (face tree-sitter-hl-face:keyword fontified t) 97 98 (fontified t) 98 104 (face tree-sitter-hl-face:variable fontified t) 104 105 (fontified t) 105 106 (face tree-sitter-hl-face:operator fontified t) 106 107 (fontified t) 107 111 (face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 111 112 (face (rainbow-delimiters-depth-1-face) fontified t) 112 115 (face tree-sitter-hl-face:keyword fontified t) 115 116 (face (rainbow-delimiters-depth-2-face) fontified t) 116 122 (face tree-sitter-hl-face:type fontified t) 122 123 (face (rainbow-delimiters-depth-2-face) fontified t) 123 133 (face tree-sitter-hl-face:type fontified t) 133 134 (face (rainbow-delimiters-depth-1-face) fontified t) 134 135 (fontified t) 135 136 (fontified t rear-nonsticky t) 136 140 (face tree-sitter-hl-face:keyword fontified t) 140 141 (fontified t) 141 152 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 152 153 (face (rainbow-delimiters-depth-1-face) fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 155 (fontified t) 155 160 (face tree-sitter-hl-face:type fontified t) 160 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-1-face) fontified t) 162 163 (fontified t) 163 164 (fontified t) 164 166 (face tree-sitter-hl-face:keyword fontified t) 166 167 (fontified t) 167 173 (face tree-sitter-hl-face:variable fontified t) 173 174 (fontified t) 174 176 (face tree-sitter-hl-face:operator fontified t) 176 177 (fontified t) 177 180 (face tree-sitter-hl-face:constant\.builtin fontified t) 180 181 (fontified t) 181 182 (face (rainbow-delimiters-depth-2-face) fontified t) 182 183 (fontified t) 183 185 (fontified t) 185 191 (face tree-sitter-hl-face:keyword fontified t) 191 192 (fontified t) 192 198 (face tree-sitter-hl-face:variable fontified t) 198 199 (fontified t) 199 202 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 202 203 (face (rainbow-delimiters-depth-3-face) fontified t) 203 204 (face tree-sitter-hl-face:string fontified t) 204 206 (face tree-sitter-hl-face:string fontified t) 206 207 (face tree-sitter-hl-face:string fontified t) 207 215 (face tree-sitter-hl-face:string fontified t) 215 216 (face tree-sitter-hl-face:string fontified t) 216 218 (face tree-sitter-hl-face:string fontified t) 218 219 (face tree-sitter-hl-face:string fontified t) 219 223 (face tree-sitter-hl-face:string fontified t) 223 224 (face tree-sitter-hl-face:string fontified t) 224 225 (face (rainbow-delimiters-depth-3-face) fontified t) 225 226 (fontified t) 226 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-2-face) fontified t) 228 229 (fontified t) 229 230 (fontified t) 230 233 (face tree-sitter-hl-face:variable fontified t) 233 234 (fontified t) 234 241 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 241 242 (face (rainbow-delimiters-depth-2-face) fontified t) 242 263 (face tree-sitter-hl-face:string fontified t) 263 264 (face (rainbow-delimiters-depth-2-face) fontified t) 264 265 (fontified t) 265 266 (fontified t) 266 269 (face tree-sitter-hl-face:variable fontified t) 269 270 (fontified t) 270 277 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 277 278 (face (rainbow-delimiters-depth-2-face) fontified t) 278 279 (face tree-sitter-hl-face:string fontified t) 279 284 (face tree-sitter-hl-face:string fontified t) 284 285 (face tree-sitter-hl-face:string fontified t) 285 286 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 286 287 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 287 288 (face tree-sitter-hl-face:string fontified t) 288 289 (face (rainbow-delimiters-depth-2-face) fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 294 (face tree-sitter-hl-face:keyword fontified t) 294 295 (fontified t) 295 296 (face tree-sitter-hl-face:variable fontified t) 296 298 (fontified t) 298 299 (face tree-sitter-hl-face:variable fontified t) 299 300 (fontified t) 300 302 (face tree-sitter-hl-face:operator fontified t) 302 303 (fontified t) 303 308 (face tree-sitter-hl-face:keyword fontified t) 308 309 (fontified t) 309 315 (face tree-sitter-hl-face:variable fontified t) 315 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-2-face) fontified t) 317 318 (fontified t) 318 320 (fontified t) 320 323 (face tree-sitter-hl-face:variable fontified t) 323 324 (fontified t) 324 330 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 330 331 (face (rainbow-delimiters-depth-3-face) fontified t) 331 332 (face tree-sitter-hl-face:string fontified t) 332 333 (face tree-sitter-hl-face:string fontified t) 333 334 (face tree-sitter-hl-face:string fontified t) 334 335 (face tree-sitter-hl-face:string fontified t) 335 336 (face tree-sitter-hl-face:string fontified t) 336 337 (face tree-sitter-hl-face:string fontified t) 337 338 (face tree-sitter-hl-face:string fontified t) 338 339 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 339 340 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 340 341 (face tree-sitter-hl-face:string fontified t) 341 343 (fontified t) 343 344 (face tree-sitter-hl-face:variable fontified t) 344 346 (fontified t) 346 347 (face tree-sitter-hl-face:variable fontified t) 347 348 (fontified t) 348 359 (face tree-sitter-hl-face:property fontified t) 359 360 (face (rainbow-delimiters-depth-3-face) fontified t) 360 361 (fontified t) 361 362 (fontified t) 362 363 (face (rainbow-delimiters-depth-2-face) fontified t) 363 364 (fontified t) 364 365 (fontified t) 365 368 (face tree-sitter-hl-face:variable fontified t) 368 369 (fontified t) 369 374 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 374 375 (face (rainbow-delimiters-depth-2-face) fontified t) 375 376 (face tree-sitter-hl-face:string fontified t) 376 377 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 377 378 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 378 379 (face tree-sitter-hl-face:string fontified t) 379 380 (face (rainbow-delimiters-depth-2-face) fontified t) 380 381 (fontified t) 381 382 (fontified t) 382 388 (face tree-sitter-hl-face:keyword fontified t) 388 389 (fontified t) 389 392 (face tree-sitter-hl-face:constant\.builtin fontified t) 392 393 (fontified t) 393 394 (face (rainbow-delimiters-depth-1-face) fontified t) 394 395 (fontified t) 395 396 (fontified t) 396 400 (face tree-sitter-hl-face:keyword fontified t) 400 401 (fontified t) 401 412 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 412 413 (face (rainbow-delimiters-depth-1-face) fontified t) 413 414 (face (rainbow-delimiters-depth-1-face) fontified t) 414 415 (fontified t) 415 420 (face tree-sitter-hl-face:type fontified t) 420 421 (fontified t) 421 422 (face (rainbow-delimiters-depth-1-face) fontified t) 422 423 (fontified t) 423 424 (fontified t) 424 427 (face tree-sitter-hl-face:variable fontified t) 427 428 (fontified t) 428 435 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 435 436 (face (rainbow-delimiters-depth-2-face) fontified t) 436 453 (face tree-sitter-hl-face:string fontified t) 453 454 (face (rainbow-delimiters-depth-2-face) fontified t) 454 455 (fontified t) 455 456 (fontified t) 456 462 (face tree-sitter-hl-face:keyword fontified t) 462 463 (fontified t) 463 466 (face tree-sitter-hl-face:constant\.builtin fontified t) 466 467 (fontified t) 467 468 (face (rainbow-delimiters-depth-1-face) fontified t) 468 469 (fontified t)) . 93) (undo-tree-id1791 . -468) (undo-tree-id1792 . -316) (undo-tree-id1793 . -468) (undo-tree-id1794 . -13) (undo-tree-id1795 . -468) (undo-tree-id1796 . 411) (undo-tree-id1797 . -134) (undo-tree-id1798 . -395) (undo-tree-id1799 . -395) (undo-tree-id1800 . -289) (undo-tree-id1801 . -288) (undo-tree-id1802 . -288) (undo-tree-id1803 . -317) (undo-tree-id1804 . -288) (undo-tree-id1805 . -316) (undo-tree-id1806 . -316) (undo-tree-id1807 . -468) (undo-tree-id1808 . -229) (undo-tree-id1809 . -26) (undo-tree-id1810 . -46) (undo-tree-id1811 . -66) (undo-tree-id1812 . -98) (undo-tree-id1813 . -141) (undo-tree-id1814 . -401) (undo-tree-id1815 . -469) (undo-tree-id1816 . -13) (undo-tree-id1817 . -468) (undo-tree-id1818 . -467) (undo-tree-id1819 . -468) (undo-tree-id1820 . -468) (undo-tree-id1821 . -468) (undo-tree-id1822 . -468) (undo-tree-id1823 . -469) 561) nil (25843 10963 399841 823000) 0 nil])
([nil nil ((#("	cliMap = map[string]cliCommand{
		\"help\": {
			name:        \"help\",
			description: \"Display help message\",
			callback:    commandHelp,
		},
		\"exit\": {
			name:        \"exit\",
			description: \"Exit the Pokedex\",
			callback:    commandExit,
		},
	}
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator fontified t) 9 10 (fontified t) 10 11 (face tree-sitter-hl-face:keyword fontified t) 11 12 (face tree-sitter-hl-face:keyword fontified t) 12 13 (face tree-sitter-hl-face:keyword fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (face tree-sitter-hl-face:type fontified t) 15 16 (face tree-sitter-hl-face:type fontified t) 16 17 (face tree-sitter-hl-face:type fontified t) 17 18 (face tree-sitter-hl-face:type fontified t) 18 19 (face tree-sitter-hl-face:type fontified t) 19 20 (face tree-sitter-hl-face:type fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (face tree-sitter-hl-face:type fontified t) 22 23 (face tree-sitter-hl-face:type fontified t) 23 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face tree-sitter-hl-face:type fontified t) 25 26 (face tree-sitter-hl-face:type fontified t) 26 27 (face tree-sitter-hl-face:type fontified t) 27 28 (face tree-sitter-hl-face:type fontified t) 28 29 (face tree-sitter-hl-face:type fontified t) 29 30 (face tree-sitter-hl-face:type fontified t) 30 31 (face tree-sitter-hl-face:type fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (fontified t) 33 35 (fontified t) 35 36 (face tree-sitter-hl-face:string fontified t) 36 37 (face tree-sitter-hl-face:string fontified t) 37 38 (face tree-sitter-hl-face:string fontified t) 38 39 (face tree-sitter-hl-face:string fontified t) 39 40 (face tree-sitter-hl-face:string fontified t) 40 41 (face tree-sitter-hl-face:string fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (fontified t) 45 48 (fontified t) 48 52 (face tree-sitter-hl-face:variable fontified t) 52 54 (fontified t) 54 61 (fontified t) 61 62 (face tree-sitter-hl-face:string fontified t) 62 66 (face tree-sitter-hl-face:string fontified t) 66 67 (face tree-sitter-hl-face:string fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 72 (fontified t) 72 83 (face tree-sitter-hl-face:variable fontified t) 83 85 (fontified t) 85 107 (face tree-sitter-hl-face:string fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 112 (fontified t) 112 120 (face tree-sitter-hl-face:variable fontified t) 120 121 (fontified t) 121 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (fontified t) 137 138 (fontified t) 138 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-3-face) fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 145 (fontified t) 145 146 (face tree-sitter-hl-face:string fontified t) 146 150 (face tree-sitter-hl-face:string fontified t) 150 151 (face tree-sitter-hl-face:string fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-3-face) fontified t) 154 155 (fontified t) 155 158 (fontified t) 158 162 (face tree-sitter-hl-face:variable fontified t) 162 163 (fontified t) 163 171 (fontified t) 171 172 (face tree-sitter-hl-face:string fontified t) 172 176 (face tree-sitter-hl-face:string fontified t) 176 177 (face tree-sitter-hl-face:string fontified t) 177 178 (fontified t) 178 179 (fontified t) 179 182 (fontified t) 182 193 (face tree-sitter-hl-face:variable fontified t) 193 195 (fontified t) 195 213 (face tree-sitter-hl-face:string fontified t) 213 214 (fontified t) 214 215 (fontified t) 215 218 (fontified t) 218 226 (face tree-sitter-hl-face:variable fontified t) 226 231 (fontified t) 231 242 (face tree-sitter-hl-face:variable fontified t) 242 243 (fontified t) 243 244 (fontified t) 244 246 (fontified t) 246 247 (face (rainbow-delimiters-depth-3-face) fontified t) 247 248 (fontified t) 248 249 (fontified t) 249 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-2-face) fontified t) 251 252 (fontified t)) . 111) (undo-tree-id1830 . -249) (undo-tree-id1831 . -251) (undo-tree-id1832 . -249) (undo-tree-id1833 . -249) (undo-tree-id1834 . -249) (undo-tree-id1835 . -249) (undo-tree-id1836 . -249) (undo-tree-id1837 . -249) (undo-tree-id1838 . -249) (undo-tree-id1839 . -248) (undo-tree-id1840 . -249) (undo-tree-id1841 . -249) 360 (t 25843 10963 462084 842000)) nil (25843 11134 167787 633000) 0 nil])
([nil nil ((111 . 112) (#("	" 0 1 (fontified nil)) . 110) (110 . 111) (110 . 111)) nil (25843 11134 167778 906000) 0 nil])
([nil nil ((112 . 118)) nil (25843 11134 167777 690000) 0 nil])
([nil nil ((118 . 124)) nil (25843 11134 167776 904000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -123) (undo-tree-id1829 . -1) 124) nil (25843 11134 167775 698000) 0 nil])
([nil nil ((123 . 124)) nil (25843 11134 167773 460000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -122) (undo-tree-id1827 . -1) (#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -123) (undo-tree-id1828 . -1) 124) nil (25843 11134 167772 479000) 0 nil])
([nil nil ((122 . 125)) nil (25843 11134 167769 352000) 0 nil])
([nil nil ((apply yas--snippet-revive 122 147 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (122 . 147) (#("commands.GetCLICommands()" 0 25 (fontified nil)) . 122) (122 . 147) (#("Get" 0 3 (fontified nil)) . 122) (122 . 125) (#("commands.GetCLICommands" 0 23 (fontified nil)) . -122) (122 . 145) (#("Get" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -122) (undo-tree-id1825 . -3) (undo-tree-id1826 . -3) 125) nil (25843 11134 167763 834000) 0 nil])
([nil nil ((#("	\"errors\"
" 0 1 (fontified t) 1 9 (face tree-sitter-hl-face:string fontified t) 9 10 (fontified t)) . 33) (undo-tree-id1842 . -5) (undo-tree-id1843 . -9) (undo-tree-id1844 . -5) (undo-tree-id1845 . -5) (undo-tree-id1846 . -1) (undo-tree-id1847 . -9) (undo-tree-id1848 . -1) (undo-tree-id1849 . -9) (undo-tree-id1850 . -5) (undo-tree-id1851 . -5) (undo-tree-id1852 . -5) (undo-tree-id1853 . -5) (undo-tree-id1854 . -5) (undo-tree-id1855 . -5) (undo-tree-id1856 . 8) (undo-tree-id1857 . -8) (undo-tree-id1858 . -1) (undo-tree-id1859 . -9) (undo-tree-id1860 . -5) (undo-tree-id1861 . -5) (undo-tree-id1862 . -5) (undo-tree-id1863 . -5) (undo-tree-id1864 . -5) (undo-tree-id1865 . -10) 38 (t 25843 11134 230053 154000)) nil (25843 11194 94980 688000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -448) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("." 0 1 (fontified t)) . -449) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -450) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -451) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -452) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -453) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -454) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -455) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -456) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("k" 0 1 (face tree-sitter-hl-face:property fontified t)) . -457) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -458) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -459) (undo-tree-id1921 . -1) (undo-tree-id1922 . 1) (undo-tree-id1923 . -1) 460 (t 25843 11194 117125 94000)) nil (25843 11217 47572 867000) 0 nil])
([nil nil ((448 . 451)) nil (25843 11217 47552 288000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -450) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 451) nil (25843 11217 47550 574000) 0 nil])
([nil nil ((450 . 451)) nil (25843 11217 47542 985000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -450) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) 451) nil (25843 11217 47541 331000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -459) (459 . 460) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -459) (459 . 460) (450 . 460)) nil (25843 11217 47515 740000) 0 nil])
([nil nil ((137 . 139) (t 25843 11217 69592 291000)) nil (25843 11332 218460 505000) 0 nil])
([nil nil ((139 . 144)) nil (25843 11332 218459 352000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 147 153 nil nil nil t nil)) nil 16 nil #s(yas--field 1 147 153 nil nil nil t nil) nil nil)) (139 . 160) (#("println(${1:args ...Type})" 0 26 (fontified nil)) . 139) (139 . 165) (#("print" 0 5 (fontified nil)) . 139) (139 . 144) (#("println" 0 7 (fontified nil)) . -139) (139 . 146) (#("print" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -139) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) (undo-tree-id1929 . -5) (undo-tree-id1930 . -5) (undo-tree-id1931 . -5) (undo-tree-id1932 . -5) (undo-tree-id1933 . -5) (undo-tree-id1934 . -5) (undo-tree-id1935 . -5) (undo-tree-id1936 . -5) 144) nil (25843 11332 218457 388000) 0 nil])
([nil nil ((148 . 153) (#("args ...Type" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:operator fontified nil) 8 12 (face tree-sitter-hl-face:variable fontified nil)) . 148) (undo-tree-id1924 . -12) (undo-tree-id1925 . -8) (undo-tree-id1926 . -9) (147 . 148)) nil (25843 11332 218447 63000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 154 #s(yas--snippet nil (#s(yas--field 1 147 153 nil nil nil t nil)) nil 16 nil #s(yas--field 1 147 153 nil nil nil t nil) nil nil))) nil (25843 11332 218428 639000) 0 nil])
([nil nil ((459 . 461) (t 25843 11332 281469 138000)) nil (25843 11338 567931 354000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -417) (undo-tree-id1939 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -418) (undo-tree-id1940 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -419) (undo-tree-id1941 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -420) (undo-tree-id1942 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -421) (undo-tree-id1943 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -422) (undo-tree-id1944 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -423) (undo-tree-id1945 . -1) 424 (t 25843 11338 586620 585000)) nil (25843 11349 53281 372000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -417) (undo-tree-id1937 . -1) (#(" " 0 1 (fontified t)) . -418) (undo-tree-id1938 . -1) 419) nil (25843 11349 53273 363000) 0 nil])
([nil nil ((417 . 419)) nil (25843 11349 53254 97000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -154) (154 . 155) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -154) (154 . 155) (153 . 155) (t 25843 11349 74862 784000)) nil (25843 11363 491363 39000) 0 nil])
([nil nil ((155 . 157) (154 . 156) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -154) (154 . 155)) nil (25843 11363 491361 220000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -156) (undo-tree-id1946 . -1) 157) nil (25843 11363 491359 21000) 0 nil])
([nil nil ((156 . 159)) nil (25843 11363 491340 978000) 0 nil])
([nil nil ((161 . 166) (t 25843 11363 513086 473000)) nil (25843 11387 396414 433000) 0 nil])
([nil nil ((#("	println(cliMap[\"exit\"].name)
" 0 1 (fontified t) 1 8 (face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 22 (face tree-sitter-hl-face:string fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t) 24 28 (face tree-sitter-hl-face:property fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t rear-nonsticky t)) . 138) (undo-tree-id2039 . -17) (undo-tree-id2040 . -29) (undo-tree-id2041 . -30) (undo-tree-id2042 . -30) (undo-tree-id2043 . -30) (undo-tree-id2044 . 1) (undo-tree-id2045 . -30) (undo-tree-id2046 . -30) (undo-tree-id2047 . -30) (undo-tree-id2048 . -30) (undo-tree-id2049 . -30) (undo-tree-id2050 . -30) (undo-tree-id2051 . -30) (undo-tree-id2052 . -30) (undo-tree-id2053 . -30) (undo-tree-id2054 . -30) (undo-tree-id2055 . -28) (undo-tree-id2056 . -17) 155 (t 25843 11387 418600 637000)) nil (25843 11460 850113 914000) 0 nil])
([nil nil ((102 . 106)) nil (25843 11460 849760 45000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -113) (undo-tree-id2038 . -1) 114) nil (25843 11460 849758 712000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -438) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -439) (undo-tree-id2037 . -1) 440) nil (25843 11460 849756 618000) 0 nil])
([nil nil ((#("_" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -403) (undo-tree-id2034 . -1) 404) nil (25843 11460 849753 72000) 0 nil])
([nil nil ((403 . 411)) nil (25843 11460 849751 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -429) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) 430) nil (25843 11460 849750 487000) 0 nil])
([nil nil ((429 . 433)) nil (25843 11460 849747 211000) 0 nil])
([nil nil ((433 . 440)) nil (25843 11460 849746 469000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -433) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -434) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -435) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -436) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -437) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("L" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -438) (undo-tree-id2030 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -439) (undo-tree-id2031 . -1) 440) nil (25843 11460 849744 436000) 0 nil])
([nil nil ((433 . 439)) nil (25843 11460 849737 412000) 0 nil])
([nil nil ((439 . 440)) nil (25843 11460 849736 661000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 445 446 nil nil nil t nil)) nil 17 nil #s(yas--field 1 445 446 nil nil nil t nil) nil nil)) (437 . 454) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 437) (437 . 459) (#("Pri" 0 3 (fontified nil)) . 437) (437 . 440) (#("Println" 0 7 (fontified nil)) . -437) (437 . 444) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -437) (undo-tree-id2017 . -3) (undo-tree-id2018 . -3) (undo-tree-id2019 . -3) 440) nil (25843 11460 849734 878000) 0 nil])
([nil nil ((#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 446) (undo-tree-id2014 . -8) (undo-tree-id2015 . -5) (undo-tree-id2016 . -6) (445 . 446)) nil (25843 11460 849730 560000) 0 nil])
([nil nil ((apply yas--snippet-revive 437 447 #s(yas--snippet nil (#s(yas--field 1 445 446 nil nil nil t nil)) nil 17 nil #s(yas--field 1 445 446 nil nil nil t nil) nil nil))) nil (25843 11460 849728 185000) 0 nil])
([nil nil ((462 . 464)) nil (25843 11460 849727 143000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -403) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -404) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -405) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -406) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -407) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -408) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -409) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) 410) nil (25843 11460 849724 619000) 0 nil])
([nil nil ((403 . 404)) nil (25843 11460 849667 442000) 0 nil])
([nil nil ((#("_" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -403) (undo-tree-id2079 . -1) 404 (t 25843 11460 871934 645000)) nil (25843 11509 154666 795000) 0 nil])
([nil nil ((403 . 410)) nil (25843 11509 154665 232000) 0 nil])
([nil nil ((447 . 451)) nil (25843 11509 154664 300000) 0 nil])
([nil nil ((451 . 457)) nil (25843 11509 154662 837000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -455) (undo-tree-id2077 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -456) (undo-tree-id2078 . -1) 457) nil (25843 11509 154661 765000) 0 nil])
([nil nil ((455 . 458)) nil (25843 11509 154659 761000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 463 475 nil nil nil t nil)) nil 18 nil #s(yas--field 1 463 475 nil nil nil t nil) nil nil)) (455 . 472) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 455) (455 . 477) (#("Pri" 0 3 (fontified nil)) . 455) (455 . 458) (#("Println" 0 7 (fontified nil)) . -455) (455 . 462) (#("Pri" 0 3 (face tree-sitter-hl-face:property fontified t)) . -455) (undo-tree-id2075 . -3) (undo-tree-id2076 . -3) 458) nil (25843 11509 154658 18000) 0 nil])
([nil nil ((464 . 475) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 464) (463 . 464)) nil (25843 11509 154653 980000) 0 nil])
([nil nil ((475 . 479)) nil (25843 11509 154652 717000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -475) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (#("	" 0 1 (fontified t)) . -476) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (#("	" 0 1 (fontified t)) . -477) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (#("	" 0 1 (fontified t)) . -478) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) 479) nil (25843 11509 154650 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 455 476 #s(yas--snippet nil (#s(yas--field 1 463 475 nil nil nil t nil)) nil 18 nil #s(yas--field 1 463 475 nil nil nil t nil) nil nil))) nil (25843 11509 154645 493000) 0 nil])
([nil nil ((#("			fmt.Println(command.name)
" 0 3 (fontified t) 3 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 14 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (fontified t) 23 27 (face tree-sitter-hl-face:property fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 29 (fontified t)) . 448) (undo-tree-id2057 . -28) (undo-tree-id2058 . 1) (undo-tree-id2059 . -28) (undo-tree-id2060 . -27) (undo-tree-id2061 . -15) (undo-tree-id2062 . 2) (undo-tree-id2063 . 2) (undo-tree-id2064 . -28) (undo-tree-id2065 . 15) (undo-tree-id2066 . -15) 475) nil (25843 11509 154641 345000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -462) (undo-tree-id2085 . -1) (#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -463) (undo-tree-id2086 . -1) 464 (t 25843 11509 272799 82000)) nil (25843 11788 652264 714000) 0 nil])
([nil nil ((106 . 107)) nil (25843 11788 652263 91000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -106) (undo-tree-id2084 . -1) 107) nil (25843 11788 652262 259000) 0 nil])
([nil nil ((115 . 116)) nil (25843 11788 652261 187000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -115) (undo-tree-id2083 . -1) 116) nil (25843 11788 652260 596000) 0 nil])
([nil nil ((#("c" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -470) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) 471) nil (25843 11788 652258 932000) 0 nil])
([nil nil ((470 . 471)) nil (25843 11788 652240 306000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 84) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (t 25843 11788 672187 531000)) nil (25843 11954 277041 359000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 83) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1)) nil (25843 11954 277036 941000) 0 nil])
([nil nil ((79 . 81) (t 25843 11954 293180 655000)) nil (25843 12355 167659 826000) 0 nil])
([nil nil ((81 . 83) (#("\"" 0 1 (fontified nil)) . -81) (81 . 82)) nil (25843 12355 167658 955000) 0 nil])
([nil nil ((82 . 86)) nil (25843 12355 167658 43000) 0 nil])
([nil nil ((apply yas--snippet-revive 82 92 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (82 . 92) (#("GoPokedex/" 0 10 (fontified nil)) . 82) (82 . 92) (#("GoPo" 0 4 (fontified nil)) . 82) (82 . 86) (#("GoPokedex/" 0 10 (fontified nil)) . -82) (82 . 92) (#("GoPo" 0 4 (face tree-sitter-hl-face:string fontified t)) . -82) (undo-tree-id2104 . -4) (undo-tree-id2105 . -4) 86) nil (25843 12355 167656 851000) 0 nil])
([nil nil ((92 . 99)) nil (25843 12355 167653 825000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id2103 . -1) 99) nil (25843 12355 167653 34000) 0 nil])
([nil nil ((98 . 99)) nil (25843 12355 167652 52000) 0 nil])
([nil nil ((apply yas--snippet-revive 92 99 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (92 . 99) (#("service" 0 7 (fontified nil)) . 92) (92 . 99) (#("service" 0 7 (fontified nil)) . 92) (92 . 99) (#("service" 0 7 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id2101 . -7) (undo-tree-id2102 . -7) 99) nil (25843 12355 167651 40000) 0 nil])
([nil nil ((161 . 162) (#("	" 0 1 (fontified nil)) . 160) (undo-tree-id2100 . -1) (159 . 162)) nil (25843 12355 167648 225000) 0 nil])
([nil nil ((162 . 165)) nil (25843 12355 167646 351000) 0 nil])
([nil nil ((apply yas--snippet-revive 162 169 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (162 . 169) (#("service" 0 7 (fontified nil)) . 162) (162 . 169) (#("ser" 0 3 (fontified nil)) . 162) (162 . 165) (#("service" 0 7 (fontified nil)) . -162) (162 . 169) (#("ser" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -162) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) 165) nil (25843 12355 167644 678000) 0 nil])
([nil nil ((169 . 170)) nil (25843 12355 167626 434000) 0 nil])
([nil nil ((170 . 172) (t 25843 12355 183556 329000)) nil (25843 12364 764220 730000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -170) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -171) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) 172) nil (25843 12364 764219 388000) 0 nil])
([nil nil ((170 . 173)) nil (25843 12364 764205 422000) 0 nil])
([nil nil ((apply yas--snippet-revive 170 184 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (170 . 184) (#("GetLocations()" 0 14 (fontified nil)) . 170) (170 . 184) (#("Get" 0 3 (fontified nil)) . 170) (170 . 173) (#("GetLocations" 0 12 (fontified nil)) . -170) (170 . 182) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -170) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -2) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -3) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) 173) nil (25843 12364 764202 336000) 0 nil])
([nil nil ((#("	service.GetLocations()
" 0 1 (fontified t) 1 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 21 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (fontified t)) . 161) (undo-tree-id26 . -23) (undo-tree-id27 . -13) (undo-tree-id28 . -13) (undo-tree-id29 . -13) (undo-tree-id30 . -13) (undo-tree-id31 . -13) (undo-tree-id32 . -13) (undo-tree-id33 . -13) (undo-tree-id34 . -13) (undo-tree-id35 . -13) (undo-tree-id36 . -13) (undo-tree-id37 . -13) (undo-tree-id38 . -13) (undo-tree-id39 . -13) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) (undo-tree-id43 . -13) (undo-tree-id44 . 23) (t 25843 12364 780348 803000)) nil (25843 16161 999036 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 160) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1)) nil (25843 16161 999031 138000) 0 nil])
([nil nil ((#("	\"GoPokedex/service\"
" 0 1 (fontified t) 1 20 (face tree-sitter-hl-face:string fontified t) 20 21 (fontified t)) . 80) (undo-tree-id0 . -20) (undo-tree-id1 . -1) (undo-tree-id2 . -20) (undo-tree-id3 . 19) (undo-tree-id4 . -19) (undo-tree-id5 . -21)) nil (25843 16161 999022 261000) 0 nil])
([nil nil ((#("			fmt.Println(e)
" 0 3 (fontified t) 3 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 14 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 18 (fontified t)) . 428) (undo-tree-id45 . -8) (undo-tree-id46 . -17) (undo-tree-id47 . -8) 436 (t 25843 16162 12384 478000)) nil (25843 16190 796033 719000) 0 nil])
([nil nil ((442 . 447) (t 25843 16190 905173 906000)) nil (25843 16909 315459 666000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -442) (undo-tree-id75 . -1) 443) nil (25843 16909 315459 165000) 0 nil])
([nil nil ((442 . 445)) nil (25843 16909 315458 614000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -443) (undo-tree-id73 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -444) (undo-tree-id74 . -1) 445) nil (25843 16909 315457 753000) 0 nil])
([nil nil ((443 . 445)) nil (25843 16909 315456 410000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -442) (undo-tree-id70 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -443) (undo-tree-id71 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -444) (undo-tree-id72 . -1) 445) nil (25843 16909 315455 448000) 0 nil])
([nil nil ((442 . 443)) nil (25843 16909 315452 944000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -442) (undo-tree-id69 . -1) 443) nil (25843 16909 315452 693000) 0 nil])
([nil nil ((442 . 445)) nil (25843 16909 315451 621000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -443) (undo-tree-id67 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -444) (undo-tree-id68 . -1) 445) nil (25843 16909 315450 910000) 0 nil])
([nil nil ((443 . 446)) nil (25843 16909 315448 896000) 0 nil])
([nil nil ((468 . 473)) nil (25843 16909 315448 505000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -477) (477 . 478) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -477) (477 . 478) (473 . 478)) nil (25843 16909 315447 674000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -476) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . 1) (undo-tree-id63 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -477) (undo-tree-id64 . -1) (undo-tree-id65 . 1) (undo-tree-id66 . -1) 478) nil (25843 16909 315446 331000) 0 nil])
([nil nil ((476 . 480)) nil (25843 16909 315443 145000) 0 nil])
([nil nil ((476 . 480) (#("err" 0 3 (fontified nil)) . 476) (476 . 479) (#("errc" 0 4 (fontified nil)) . -476) (476 . 480) (#("errű" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -476) (undo-tree-id58 . -4) (undo-tree-id59 . -3) 480) nil (25843 16909 315441 803000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -482) (482 . 483) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -482) (482 . 483) (480 . 483)) nil (25843 16909 315439 939000) 0 nil])
([nil nil ((483 . 488) (484 . 488) (#("					" 0 5 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 483) (483 . 488) (482 . 484)) nil (25843 16909 315438 837000) 0 nil])
([nil nil ((482 . 484) (481 . 483) (#("'" 0 1 (fontified nil)) . -481) (480 . 482)) nil (25843 16909 315437 846000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:string fontified t)) . -482) (undo-tree-id56 . -1) (#(" " 0 1 (fontified t)) . -483) (undo-tree-id57 . -1) 484) nil (25843 16909 315437 94000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -481) (undo-tree-id55 . -1) (#("'" 0 1 (fontified t)) . 482)) nil (25843 16909 315435 922000) 0 nil])
([nil nil ((481 . 483) (#("'" 0 1 (fontified nil)) . -481) (481 . 482)) nil (25843 16909 315434 900000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -481) (undo-tree-id54 . -1) (#("'" 0 1 (fontified t)) . 482)) nil (25843 16909 315433 718000) 0 nil])
([nil nil ((481 . 487)) nil (25843 16909 315432 956000) 0 nil])
([nil nil ((nil rear-nonsticky nil 498 . 499) (#("
" 0 1 (fontified nil)) . -569) (495 . 570) 494) nil (25843 16909 315431 894000) 0 nil])
([nil nil ((#("					
" 0 5 (fontified t) 5 6 (fontified t)) . 490) (undo-tree-id48 . -5) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -6) 493) nil (25843 16909 315430 872000) 0 nil])
([nil nil ((493 . 497)) nil (25843 16909 315417 988000) 0 nil])
([nil nil ((544 . 548)) nil (25843 16909 315415 333000) 0 nil])
([nil nil ((577 . 581) (t 25843 16909 332982 379000)) nil (25843 16923 576396 414000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -577) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -578) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -579) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -580) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 581) nil (25843 16923 576393 208000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -569) (undo-tree-id183 . -1) (undo-tree-id184 . 1) (undo-tree-id185 . -1) 570 (t 25843 16923 588879 892000)) nil (25843 16996 872559 389000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -568) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . 1) (undo-tree-id180 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . 569) (undo-tree-id181 . 1) (undo-tree-id182 . 1)) nil (25843 16996 872557 646000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -562) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -563) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -564) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -565) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -566) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -567) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 568) nil (25843 16996 872553 558000) 0 nil])
([nil nil ((562 . 563)) nil (25843 16996 872541 496000) 0 nil])
([nil nil ((563 . 570) (#("Error" 0 5 (fontified nil)) . -563) (563 . 568)) nil (25843 16996 872541 95000) 0 nil])
([nil nil ((570 . 571)) nil (25843 16996 872540 795000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -570) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 571) nil (25843 16996 872537 268000) 0 nil])
([nil nil ((570 . 571) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -570) (570 . 571)) nil (25843 16996 872536 396000) 0 nil])
([nil nil ((562 . 563)) nil (25843 16996 872535 915000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -570) (undo-tree-id136 . -1) (undo-tree-id137 . 1) (undo-tree-id138 . -1) 571) nil (25843 16996 872535 404000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -569) (undo-tree-id135 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . 570)) nil (25843 16996 872533 791000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -563) (undo-tree-id129 . -1) (#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -564) (undo-tree-id130 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -565) (undo-tree-id131 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -566) (undo-tree-id132 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -567) (undo-tree-id133 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -568) (undo-tree-id134 . -1) 569) nil (25843 16996 872532 529000) 0 nil])
([nil nil ((563 . 564)) nil (25843 16996 872524 434000) 0 nil])
([nil nil ((564 . 571) (#("Error" 0 5 (fontified nil)) . -564) (564 . 569)) nil (25843 16996 872523 743000) 0 nil])
([nil nil ((571 . 572) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -571) (571 . 572)) nil (25843 16996 872519 895000) 0 nil])
([nil nil ((572 . 578) (t 25843 16996 983352 438000)) nil (25843 17105 877359 807000) 0 nil])
([nil nil ((578 . 579)) nil (25843 17105 877359 276000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -578) (undo-tree-id197 . -1) 579) nil (25843 17105 877358 926000) 0 nil])
([nil nil ((578 . 580)) nil (25843 17105 877358 134000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -572) (undo-tree-id189 . -1) (#("	" 0 1 (fontified t)) . -573) (undo-tree-id190 . -1) (#("	" 0 1 (fontified t)) . -574) (undo-tree-id191 . -1) (#("	" 0 1 (fontified t)) . -575) (undo-tree-id192 . -1) (#("	" 0 1 (fontified t)) . -576) (undo-tree-id193 . -1) (#("	" 0 1 (fontified t)) . -577) (undo-tree-id194 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -578) (undo-tree-id195 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -579) (undo-tree-id196 . -1) 580) nil (25843 17105 877356 992000) 0 nil])
([nil nil ((#("f" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -557) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) 558) nil (25843 17105 877351 672000) 0 nil])
([nil nil ((557 . 559)) nil (25843 17105 877338 187000) 0 nil])
([nil nil ((140 . 141) (#("	" 0 1 (fontified nil)) . 139) (undo-tree-id106 . -1) (138 . 141) (t 25843 17105 985569 592000)) nil (25846 23065 347901 185000) 0 nil])
([nil nil ((141 . 147)) nil (25846 23065 347898 901000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -142) (undo-tree-id101 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -143) (undo-tree-id102 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -144) (undo-tree-id103 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -145) (undo-tree-id104 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -146) (undo-tree-id105 . -1) 147) nil (25846 23065 347897 479000) 0 nil])
([nil nil ((142 . 150)) nil (25846 23065 347892 469000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -149) (undo-tree-id100 . -1) 150) nil (25846 23065 347891 478000) 0 nil])
([nil nil ((149 . 153)) nil (25846 23065 347889 664000) 0 nil])
([nil nil ((153 . 156)) nil (25846 23065 347888 662000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -149) (undo-tree-id93 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -150) (undo-tree-id94 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -151) (undo-tree-id95 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -152) (undo-tree-id96 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -153) (undo-tree-id97 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -154) (undo-tree-id98 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -155) (undo-tree-id99 . -1) 156) nil (25846 23065 347886 498000) 0 nil])
([nil nil ((149 . 150)) nil (25846 23065 347844 692000) 0 nil])
([nil nil ((150 . 153)) nil (25846 23065 347843 660000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -150) (undo-tree-id90 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -151) (undo-tree-id91 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -152) (undo-tree-id92 . -1) 153) nil (25846 23065 347842 17000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -149) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 150) nil (25846 23065 347839 322000) 0 nil])
([nil nil ((149 . 150)) nil (25846 23065 347837 338000) 0 nil])
([nil nil ((150 . 166) (#("GetCLICommands" 0 14 (fontified nil)) . -150) (150 . 164)) nil (25846 23065 347836 286000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -165) (undo-tree-id85 . -1) (undo-tree-id86 . 1) (undo-tree-id87 . -1) 166) nil (25846 23065 347834 473000) 0 nil])
([nil nil ((#("m" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -144) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -145) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -146) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("d" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -147) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -148) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("." 0 1 (fontified t)) . -149) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -150) (undo-tree-id70 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -151) (undo-tree-id71 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -152) (undo-tree-id72 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -153) (undo-tree-id73 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:property)) . -154) (undo-tree-id74 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -155) (undo-tree-id75 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -156) (undo-tree-id76 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -157) (undo-tree-id77 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -158) (undo-tree-id78 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -159) (undo-tree-id79 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -160) (undo-tree-id80 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -161) (undo-tree-id81 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -162) (undo-tree-id82 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -163) (undo-tree-id83 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -164) (undo-tree-id84 . -1) 165) nil (25846 23065 347828 562000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -138) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("
" 0 1 (fontified t)) . -139) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("	" 0 1 (fontified t)) . -140) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -141) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -142) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -143) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 144) nil (25846 23065 347802 404000) 0 nil])
([nil nil ((211 . 214) (t 25846 23065 367217 993000)) nil (25846 23555 607591 963000) 0 nil])
([nil nil ((214 . 218)) nil (25846 23555 607591 201000) 0 nil])
([nil nil ((218 . 223)) nil (25846 23555 607590 470000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 230 242 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 230 242 nil nil nil nil nil) nil nil)) (220 . 243) (#("NewReader(${1:rd io.Reader})" 0 28 (fontified nil)) . 220) (220 . 248) (#("New" 0 3 (fontified nil)) . 220) (220 . 223) (#("NewReader" 0 9 (fontified nil)) . -220) (220 . 229) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -220) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -2) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) 223) nil (25846 23555 607588 977000) 0 nil])
([nil nil ((apply yas--snippet-revive 220 243 #s(yas--snippet nil (#s(yas--field 1 230 242 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 230 242 nil nil nil nil nil) nil nil))) nil (25846 23555 607581 714000) 0 nil])
([nil nil ((#("		bufio.NewReader(rd io.Reader)
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 17 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 23 (face tree-sitter-hl-face:variable fontified t) 23 24 (fontified t) 24 30 (face tree-sitter-hl-face:property fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 32 (fontified t)) . 212) (undo-tree-id0 . -17) (undo-tree-id1 . -17) (undo-tree-id2 . -8) (undo-tree-id3 . -8) (undo-tree-id4 . -8) (undo-tree-id5 . -8) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -18) (undo-tree-id13 . -21) (undo-tree-id14 . -22) (undo-tree-id15 . -18) (undo-tree-id16 . -18) (undo-tree-id17 . -18) (undo-tree-id18 . -18) (undo-tree-id19 . 14) (undo-tree-id20 . -17) (undo-tree-id21 . -17) (undo-tree-id22 . 15) (undo-tree-id23 . -18) (undo-tree-id24 . 2) (undo-tree-id25 . -31) (undo-tree-id26 . -17) (undo-tree-id27 . -17) (undo-tree-id28 . -8) (undo-tree-id29 . -17) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -17) (undo-tree-id33 . -17) (undo-tree-id34 . -17) (undo-tree-id35 . -32) (undo-tree-id36 . -31) 229) nil (25846 23555 607578 858000) 0 nil])
([nil nil ((285 . 288) (t 25846 23555 624758 805000)) nil (25850 5002 975319 935000) 0 nil])
([nil nil ((288 . 304)) nil (25850 5002 975319 645000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -303) (undo-tree-id41 . -1) 304) nil (25850 5002 975319 284000) 0 nil])
([nil nil ((303 . 306)) nil (25850 5002 975318 513000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 309 313 nil nil nil t #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil))) #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil)) #s(yas--field 3 320 320 nil nil nil nil nil)) nil 29 nil #s(yas--field 3 320 320 nil nil nil nil nil) nil nil)) (303 . 332) (#("Split(${1:s string}, ${2:sep string})[${3:}]" 0 44 (fontified nil)) . 303) (303 . 347) (#("Spl" 0 3 (fontified nil)) . 303) (303 . 306) (#("Split" 0 5 (fontified nil)) . -303) (303 . 308) (#("Spl" 0 3 (fontified t face tree-sitter-hl-face:property)) . -303) (undo-tree-id39 . -3) (undo-tree-id40 . -3) 306) nil (25850 5002 975317 421000) 0 nil])
([nil nil ((310 . 313) (#("s string" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 8 (fontified nil face tree-sitter-hl-face:variable)) . 310) (undo-tree-id36 . -8) (undo-tree-id37 . -2) (undo-tree-id38 . -3) (309 . 310)) nil (25850 5002 975315 407000) 0 nil])
([nil nil ((apply yas--snippet-revive 309 313 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 309 313 nil nil nil t #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 309 313 nil nil nil t #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil))) nil)) (309 . 313) (#("text" 0 4 (fontified nil)) . 309) (undo-tree-id26 . -4) (309 . 313) (#("text" 0 4 (fontified nil)) . 309) (undo-tree-id27 . -4) (309 . 313) (#("text" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -309) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) 313) nil (25850 5002 975313 313000) 0 nil])
([nil nil ((316 . 317) (315 . 317) (#("\"" 0 1 (fontified nil)) . -315) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("sep string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 316) (undo-tree-id23 . -10) (undo-tree-id24 . -4) (undo-tree-id25 . -5) (315 . 316)) nil (25850 5002 975308 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 303 321 #s(yas--snippet nil (#s(yas--field 1 309 313 nil nil nil t #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil))) #s(yas--field 2 315 318 nil nil nil t #s(yas--field 3 320 320 nil nil nil nil nil)) #s(yas--field 3 320 320 nil nil nil nil nil)) nil 29 nil #s(yas--field 3 320 320 nil nil nil nil nil) nil nil))) nil (25850 5002 975304 466000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -319) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . 1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -320) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 321) nil (25850 5002 975301 611000) 0 nil])
([nil nil ((293 . 294) (t 25850 5002 993582 602000)) nil (25850 5067 986039 76000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -288) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -289) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -290) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -291) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 292) nil (25850 5067 986038 304000) 0 nil])
([nil nil ((288 . 297)) nil (25850 5067 986036 60000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -288) (undo-tree-id64 . -1) 289) nil (25850 5067 986035 619000) 0 nil])
([nil nil ((288 . 289)) nil (25850 5067 986034 968000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -462) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -463) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -464) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id63 . -1) 466) nil (25850 5067 986034 147000) 0 nil])
([nil nil ((462 . 463)) nil (25850 5067 986031 552000) 0 nil])
([nil nil ((463 . 466)) nil (25850 5067 986031 1000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 472 473 nil nil nil t nil)) nil 31 nil #s(yas--field 1 472 473 nil nil nil t nil) nil nil)) (462 . 473) (#("splitText[${1:}]" 0 16 (fontified nil)) . 462) (462 . 478) (#("spli" 0 4 (fontified nil)) . 462) (462 . 466) (#("splitText" 0 9 (fontified nil)) . -462) (462 . 471) (#("spli" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -462) (undo-tree-id55 . -4) (undo-tree-id56 . -4) 466) nil (25850 5067 986029 428000) 0 nil])
([nil nil ((472 . 473)) nil (25850 5067 986027 494000) 0 nil])
([nil nil ((apply yas--snippet-revive 462 474 #s(yas--snippet nil (#s(yas--field 1 472 473 nil nil nil t nil)) nil 31 nil #s(yas--field 1 472 473 nil nil nil t nil) nil nil))) nil (25850 5067 986026 963000) 0 nil])
([nil nil ((515 . 518)) nil (25850 5067 986026 342000) 0 nil])
([nil nil ((518 . 519)) nil (25850 5067 986026 81000) 0 nil])
([nil nil ((519 . 521)) nil (25850 5067 986025 751000) 0 nil])
([nil nil ((521 . 522)) nil (25850 5067 986025 420000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 532 534 nil nil nil t nil)) nil 32 nil #s(yas--field 1 532 534 nil nil nil t nil) nil nil)) (522 . 533) (#("splitText[${1:}]" 0 16 (fontified nil)) . 522) (518 . 538) (#("splitText" 0 9 (fontified nil)) . -518) (518 . 527) (#("spli" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -518) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -2) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) 522) nil (25850 5067 986024 108000) 0 nil])
([nil nil ((532 . 534)) nil (25850 5067 986013 658000) 0 nil])
([nil nil ((apply yas--snippet-revive 522 535 #s(yas--snippet nil (#s(yas--field 1 532 534 nil nil nil t nil)) nil 32 nil #s(yas--field 1 532 534 nil nil nil t nil) nil nil))) nil (25850 5067 986010 973000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -515) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("." 0 1 (fontified t)) . -516) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:operator)) . -517) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 518 (t 25850 5068 95641 970000)) nil (25850 5098 259915 898000) 0 nil])
([nil nil ((532 . 535)) nil (25850 5098 259912 141000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -515) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -516) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -517) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -518) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 519) nil (25850 5098 259909 546000) 0 nil])
([nil nil ((437 . 441) (t 25850 5098 368747 143000)) nil (25850 5152 629647 456000) 0 nil])
([nil nil ((441 . 445)) nil (25850 5152 629647 156000) 0 nil])
([nil nil ((445 . 449)) nil (25850 5152 629646 915000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 453 465 nil nil nil t nil)) nil 33 nil #s(yas--field 1 453 465 nil nil nil t nil) nil nil)) (445 . 462) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 445) (445 . 467) (#("Prin" 0 4 (fontified nil)) . 445) (445 . 449) (#("Println" 0 7 (fontified nil)) . -445) (445 . 452) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -445) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 449) nil (25850 5152 629646 174000) 0 nil])
([nil nil ((454 . 457) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 454) (undo-tree-id138 . -8) (453 . 454)) nil (25850 5152 629644 331000) 0 nil])
([nil nil ((apply yas--snippet-revive 453 462 #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 453 465 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 453 465 nil nil nil t nil) nil)) (453 . 462) (#("splitText" 0 9 (fontified nil)) . 453) (undo-tree-id132 . -9) (453 . 462) (#("splt" 0 4 (fontified nil)) . 453) (undo-tree-id133 . -4) (453 . 457) (#("splitText" 0 9 (fontified nil)) . -453) (undo-tree-id134 . -9) (453 . 462) (#("splt" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -453) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) 457) nil (25850 5152 629643 108000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -463) (463 . 464) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -463) (463 . 464) (462 . 464)) nil (25850 5152 629633 250000) 0 nil])
([nil nil ((463 . 464)) nil (25850 5152 629632 689000) 0 nil])
([nil current ((apply yas--snippet-revive 445 466 #s(yas--snippet nil (#s(yas--field 1 453 465 nil nil nil t nil)) nil 33 nil #s(yas--field 1 453 465 nil nil nil t nil) nil nil))) nil (25850 5152 629629 322000) 0 nil])
nil

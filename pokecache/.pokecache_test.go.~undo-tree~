(undo-tree-save-format-version . 1)
"c75dd44408008459791fad3919295bb41c50060b"
[nil nil nil nil (25850 1511 906205 324000) 0 nil]
([nil nil ((1 . 12) (t 25850 1481 320183 388000)) nil (25850 1511 906204 483000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 18 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (9 . 18) (#("pokecache" 0 9 (fontified nil)) . 9) (9 . 18) (#("pok" 0 3 (fontified nil)) . 9) (9 . 12) (#("pokecache" 0 9 (fontified nil)) . -9) (9 . 18) (#("pok" 0 3 (fontified t)) . -9) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 12) nil (25850 1511 906203 330000) 0 nil])
([nil nil ((18 . 20)) nil (25850 1511 906201 156000) 0 nil])
([nil nil ((20 . 27)) nil (25850 1511 906200 776000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -28) (28 . 29) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -28) (28 . 29) (27 . 29)) nil (25850 1511 906199 974000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 29) (29 . 30) (28 . 30)) nil (25850 1511 906199 173000) 0 nil])
([nil nil ((31 . 35) (30 . 32) (#("\"" 0 1 (fontified nil)) . -30) (30 . 31)) nil (25850 1511 906198 241000) 0 nil])
([nil nil ((apply yas--snippet-revive 31 38 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (31 . 38) (#("testing" 0 7 (fontified nil)) . 31) (31 . 38) (#("test" 0 4 (fontified nil)) . 31) (31 . 35) (#("testing" 0 7 (fontified nil)) . -31) (31 . 38) (#("test" 0 4 (fontified t face tree-sitter-hl-face:string)) . -31) (undo-tree-id17 . -4) (undo-tree-id18 . -4) 35) nil (25850 1511 906197 189000) 0 nil])
([nil nil ((39 . 41)) nil (25850 1511 906195 456000) 0 nil])
([nil nil ((42 . 48) (41 . 43) (#("\"" 0 1 (fontified nil)) . -41) (41 . 42)) nil (25850 1511 906194 975000) 0 nil])
([nil nil ((#("	\"regexp\"
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:string) 9 10 (fontified t)) . 40) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . 2) (undo-tree-id3 . -1) (undo-tree-id4 . -8) (undo-tree-id5 . 1) (undo-tree-id6 . 8) (undo-tree-id7 . -8) (undo-tree-id8 . -1) (undo-tree-id9 . -9) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -10) (undo-tree-id16 . -9) 48) nil (25850 1511 906194 3000) 0 nil])
([nil nil ((41 . 42)) nil (25850 1511 906163 506000) 0 nil])
([nil nil ((41 . 43) (t 25850 1511 908233 36000)) nil (25850 2038 341076 80000) 0 nil])
([nil nil ((43 . 52)) nil (25850 2038 341075 569000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 52 57 nil nil nil t #s(yas--exit 75 nil))) #s(yas--exit 75 nil) 2 nil #s(yas--field 1 52 57 nil nil nil t #s(yas--exit 75 nil)) nil nil)) (48 . 76) (#("Test${1:Xxx}(t *testing.T) {
	$0
	\\}" 0 34 (fontified nil) 34 35 (fontified nil syntax-table (9)) 35 36 (fontified nil)) . 48) (81 . 82) (77 . 78) (48 . 82) (48 . 52) (#("TestXxx(t *testing.T)" 0 21 (fontified nil)) . -48) (48 . 69) (#("Test" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -48) (undo-tree-id38 . -4) (undo-tree-id39 . -4) 52) nil (25850 2038 341074 357000) 0 nil])
([nil nil ((53 . 55) (#("Xxx" 0 3 (fontified nil face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . 53) (52 . 53)) nil (25850 2038 341072 493000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -54) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 55) nil (25850 2038 341071 952000) 0 nil])
([nil nil ((54 . 58)) nil (25850 2038 341071 161000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -53) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 54) nil (25850 2038 341070 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 48 78 #s(yas--snippet nil (#s(yas--field 1 52 57 nil nil nil t #s(yas--exit 75 nil))) #s(yas--exit 75 nil) 2 nil #s(yas--field 1 52 57 nil nil nil t #s(yas--exit 75 nil)) nil nil))) nil (25850 2038 341069 588000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -78) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -79) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -80) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -81) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 82) nil (25850 2038 341068 776000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -76) (undo-tree-id25 . -1) 77) nil (25850 2038 341066 1000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . 74) (74 . 75) (74 . 75)) nil (25850 2038 341065 29000) 0 nil])
([nil nil ((nil rear-nonsticky nil 648 . 649) (nil fontified nil 74 . 649) (74 . 649)) nil (25850 2038 341064 228000) 0 nil])
([nil nil ((39 . 41)) nil (25850 2038 341063 737000) 0 nil])
([nil nil ((41 . 45)) nil (25850 2038 341063 476000) 0 nil])
([nil nil ((41 . 43) (#("\"" 0 1 (fontified nil)) . -41) (41 . 42)) nil (25850 2038 341062 554000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -42) (undo-tree-id24 . -1) 43) nil (25850 2038 341061 633000) 0 nil])
([nil nil ((46 . 48) (#("\"" 0 1 (fontified nil)) . -46) (46 . 47)) nil (25850 2038 341060 290000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -47) (undo-tree-id23 . -1) 48) nil (25850 2038 341059 749000) 0 nil])
([nil nil ((47 . 49)) nil (25850 2038 341058 747000) 0 nil])
([nil nil ((50 . 53) (49 . 51) (#("\"" 0 1 (fontified nil)) . -49) (49 . 50)) nil (25850 2038 341058 26000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -464) (undo-tree-id22 . -1) 465) nil (25850 2038 341057 184000) 0 nil])
([nil nil ((464 . 465)) nil (25850 2038 341056 2000) 0 nil])
([nil nil ((#("V" 0 1 (fontified t face tree-sitter-hl-face:property)) . -464) (undo-tree-id21 . -1) 465) nil (25850 2038 341055 0) 0 nil])
([nil nil ((464 . 465)) nil (25850 2038 341044 510000) 0 nil])
([nil nil ((669 . 671) (t 25850 2038 346961 108000)) nil (25850 2409 497684 193000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1102 . 1103) (nil fontified nil 671 . 1103) (671 . 1103)) nil (25850 2409 497683 492000) 0 nil])
([nil nil ((1103 . 1104)) nil (25850 2409 497680 466000) 0 nil])
([nil nil ((1104 . 1105) (t 25850 2409 500392 969000)) nil (25850 2726 363203 542000) 0 nil])
([nil nil ((1105 . 1109)) nil (25850 2726 363202 721000) 0 nil])
([nil nil ((1109 . 1110)) nil (25850 2726 363202 69000) 0 nil])
([nil nil ((1110 . 1114)) nil (25850 2726 363201 388000) 0 nil])
([nil nil ((1114 . 1117)) nil (25850 2726 363200 937000) 0 nil])
([nil nil ((apply yas--snippet-revive 1110 1131 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (1110 . 1131) (#("TestGet(t *testing.T)" 0 21 (fontified nil)) . 1110) (1110 . 1131) (1110 . 1117) (#("TestGet(t *testing.T)" 0 21 (fontified nil)) . -1110) (1110 . 1131) (#("TestGet" 0 7 (fontified t face tree-sitter-hl-face:variable)) . -1110) (undo-tree-id99 . -7) (undo-tree-id100 . -7) 1117) nil (25850 2726 363199 635000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1132) (undo-tree-id93 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1133) (undo-tree-id94 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1134) (undo-tree-id95 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1135) (undo-tree-id96 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1136) (undo-tree-id97 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1137) (undo-tree-id98 . -1) 1138) nil (25850 2726 363196 729000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1131) (undo-tree-id92 . -1) 1132) nil (25850 2726 363194 305000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1133) (1133 . 1134) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1133) (1133 . 1134) (1131 . 1134)) nil (25850 2726 363193 213000) 0 nil])
([nil nil ((1134 . 1135) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1134) (1134 . 1135) (1133 . 1135)) nil (25850 2726 363191 650000) 0 nil])
([nil nil ((1135 . 1147)) nil (25850 2726 363190 618000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1146) (undo-tree-id91 . -1) 1147) nil (25850 2726 363190 77000) 0 nil])
([nil nil ((1146 . 1154)) nil (25850 2726 363187 893000) 0 nil])
([nil nil ((1154 . 1163)) nil (25850 2726 363187 291000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1159) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1160) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1161) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1162) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 1163) nil (25850 2726 363186 650000) 0 nil])
([nil nil ((1159 . 1164)) nil (25850 2726 363183 374000) 0 nil])
([nil nil ((apply yas--snippet-revive 1159 1170 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (1159 . 1170) (#("Millisecond" 0 11 (fontified nil)) . 1159) (1159 . 1170) (#("Milli" 0 5 (fontified nil)) . 1159) (1159 . 1164) (#("Millisecond" 0 11 (fontified nil)) . -1159) (1159 . 1170) (#("Milli" 0 5 (fontified t face tree-sitter-hl-face:property)) . -1159) (undo-tree-id81 . -5) (undo-tree-id82 . -5) 1164) nil (25850 2726 363182 643000) 0 nil])
([nil nil ((1170 . 1172)) nil (25850 2726 363180 609000) 0 nil])
([nil nil ((1172 . 1174)) nil (25850 2726 363180 138000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1173) (undo-tree-id80 . -1) 1174) nil (25850 2726 363179 657000) 0 nil])
([nil nil ((1173 . 1189)) nil (25850 2726 363178 665000) 0 nil])
([nil nil ((1189 . 1190)) nil (25850 2726 363178 84000) 0 nil])
([nil current ((#("
func TestGet(t *testing.T) {
	const baseTime = 5*time.Millisecond
	const waitTime = 5
}" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 13 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:operator) 17 25 (fontified t) 25 26 (fontified t face tree-sitter-hl-face:type) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-1-face)) 29 30 (fontified t) 30 31 (fontified t) 31 36 (fontified t face tree-sitter-hl-face:keyword) 36 37 (fontified t) 37 45 (fontified t face tree-sitter-hl-face:variable) 45 46 (fontified t) 46 47 (fontified t face tree-sitter-hl-face:operator) 47 48 (fontified t) 48 49 (fontified t face tree-sitter-hl-face:number) 49 50 (fontified t face tree-sitter-hl-face:operator) 50 54 (fontified t face tree-sitter-hl-face:variable) 54 55 (fontified t) 55 66 (fontified t face tree-sitter-hl-face:property) 66 67 (fontified t) 67 68 (fontified t) 68 73 (fontified t face tree-sitter-hl-face:keyword) 73 74 (fontified t) 74 82 (fontified t face tree-sitter-hl-face:variable) 82 83 (fontified t) 83 84 (fontified t face tree-sitter-hl-face:operator) 84 85 (fontified t) 85 86 (fontified t face tree-sitter-hl-face:number) 86 87 (fontified t) 87 88 (fontified t face (rainbow-delimiters-depth-1-face))) . 1104) (undo-tree-id40 . 2) (undo-tree-id41 . -1) (undo-tree-id42 . -87) (undo-tree-id43 . -87) (undo-tree-id44 . -73) (undo-tree-id45 . -1) (undo-tree-id46 . -31) (undo-tree-id47 . 2) (undo-tree-id48 . -6) (undo-tree-id49 . 59) (undo-tree-id50 . -1) (undo-tree-id51 . -87) (undo-tree-id52 . -1) (undo-tree-id53 . -85) (undo-tree-id54 . -48) (undo-tree-id55 . -48) (undo-tree-id56 . -48) (undo-tree-id57 . -48) (undo-tree-id58 . -48) (undo-tree-id59 . -48) (undo-tree-id60 . -85) (undo-tree-id61 . -85) (undo-tree-id62 . -85) (undo-tree-id63 . -85) (undo-tree-id64 . -87) (undo-tree-id65 . -1) (undo-tree-id66 . -88) (undo-tree-id67 . -1) (undo-tree-id68 . -87) (undo-tree-id69 . -87) (undo-tree-id70 . -87) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -5) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -88) 1105) nil (25850 2726 363175 499000) 0 nil])
nil
